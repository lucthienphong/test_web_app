using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblEngravingTobacco class.
	/// </summary>
    [Serializable]
	public partial class TblEngravingTobaccoCollection : ActiveList<TblEngravingTobacco, TblEngravingTobaccoCollection>
	{	   
		public TblEngravingTobaccoCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblEngravingTobaccoCollection</returns>
		public TblEngravingTobaccoCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblEngravingTobacco o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblEngravingTobacco table.
	/// </summary>
	[Serializable]
	public partial class TblEngravingTobacco : ActiveRecord<TblEngravingTobacco>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblEngravingTobacco()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblEngravingTobacco(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblEngravingTobacco(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblEngravingTobacco(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblEngravingTobacco", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarEngravingID = new TableSchema.TableColumn(schema);
				colvarEngravingID.ColumnName = "EngravingID";
				colvarEngravingID.DataType = DbType.Int32;
				colvarEngravingID.MaxLength = 0;
				colvarEngravingID.AutoIncrement = true;
				colvarEngravingID.IsNullable = false;
				colvarEngravingID.IsPrimaryKey = true;
				colvarEngravingID.IsForeignKey = false;
				colvarEngravingID.IsReadOnly = false;
				colvarEngravingID.DefaultSetting = @"";
				colvarEngravingID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEngravingID);
				
				TableSchema.TableColumn colvarCylinderID = new TableSchema.TableColumn(schema);
				colvarCylinderID.ColumnName = "CylinderID";
				colvarCylinderID.DataType = DbType.Int32;
				colvarCylinderID.MaxLength = 0;
				colvarCylinderID.AutoIncrement = false;
				colvarCylinderID.IsNullable = false;
				colvarCylinderID.IsPrimaryKey = false;
				colvarCylinderID.IsForeignKey = false;
				colvarCylinderID.IsReadOnly = false;
				colvarCylinderID.DefaultSetting = @"";
				colvarCylinderID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCylinderID);
				
				TableSchema.TableColumn colvarSequence = new TableSchema.TableColumn(schema);
				colvarSequence.ColumnName = "Sequence";
				colvarSequence.DataType = DbType.Int32;
				colvarSequence.MaxLength = 0;
				colvarSequence.AutoIncrement = false;
				colvarSequence.IsNullable = false;
				colvarSequence.IsPrimaryKey = false;
				colvarSequence.IsForeignKey = false;
				colvarSequence.IsReadOnly = false;
				colvarSequence.DefaultSetting = @"";
				colvarSequence.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSequence);
				
				TableSchema.TableColumn colvarJobID = new TableSchema.TableColumn(schema);
				colvarJobID.ColumnName = "JobID";
				colvarJobID.DataType = DbType.Int32;
				colvarJobID.MaxLength = 0;
				colvarJobID.AutoIncrement = false;
				colvarJobID.IsNullable = false;
				colvarJobID.IsPrimaryKey = false;
				colvarJobID.IsForeignKey = false;
				colvarJobID.IsReadOnly = false;
				colvarJobID.DefaultSetting = @"";
				colvarJobID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarJobID);
				
				TableSchema.TableColumn colvarStylus = new TableSchema.TableColumn(schema);
				colvarStylus.ColumnName = "Stylus";
				colvarStylus.DataType = DbType.Int32;
				colvarStylus.MaxLength = 0;
				colvarStylus.AutoIncrement = false;
				colvarStylus.IsNullable = true;
				colvarStylus.IsPrimaryKey = false;
				colvarStylus.IsForeignKey = false;
				colvarStylus.IsReadOnly = false;
				colvarStylus.DefaultSetting = @"";
				colvarStylus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStylus);
				
				TableSchema.TableColumn colvarScreen = new TableSchema.TableColumn(schema);
				colvarScreen.ColumnName = "Screen";
				colvarScreen.DataType = DbType.String;
				colvarScreen.MaxLength = 20;
				colvarScreen.AutoIncrement = false;
				colvarScreen.IsNullable = true;
				colvarScreen.IsPrimaryKey = false;
				colvarScreen.IsForeignKey = false;
				colvarScreen.IsReadOnly = false;
				colvarScreen.DefaultSetting = @"";
				colvarScreen.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScreen);
				
				TableSchema.TableColumn colvarMasterScreen = new TableSchema.TableColumn(schema);
				colvarMasterScreen.ColumnName = "MasterScreen";
				colvarMasterScreen.DataType = DbType.Byte;
				colvarMasterScreen.MaxLength = 0;
				colvarMasterScreen.AutoIncrement = false;
				colvarMasterScreen.IsNullable = true;
				colvarMasterScreen.IsPrimaryKey = false;
				colvarMasterScreen.IsForeignKey = false;
				colvarMasterScreen.IsReadOnly = false;
				colvarMasterScreen.DefaultSetting = @"";
				colvarMasterScreen.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMasterScreen);
				
				TableSchema.TableColumn colvarAngle = new TableSchema.TableColumn(schema);
				colvarAngle.ColumnName = "Angle";
				colvarAngle.DataType = DbType.String;
				colvarAngle.MaxLength = 20;
				colvarAngle.AutoIncrement = false;
				colvarAngle.IsNullable = true;
				colvarAngle.IsPrimaryKey = false;
				colvarAngle.IsForeignKey = false;
				colvarAngle.IsReadOnly = false;
				colvarAngle.DefaultSetting = @"";
				colvarAngle.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAngle);
				
				TableSchema.TableColumn colvarElongation = new TableSchema.TableColumn(schema);
				colvarElongation.ColumnName = "Elongation";
				colvarElongation.DataType = DbType.String;
				colvarElongation.MaxLength = 20;
				colvarElongation.AutoIncrement = false;
				colvarElongation.IsNullable = true;
				colvarElongation.IsPrimaryKey = false;
				colvarElongation.IsForeignKey = false;
				colvarElongation.IsReadOnly = false;
				colvarElongation.DefaultSetting = @"";
				colvarElongation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarElongation);
				
				TableSchema.TableColumn colvarDistotion = new TableSchema.TableColumn(schema);
				colvarDistotion.ColumnName = "Distotion";
				colvarDistotion.DataType = DbType.String;
				colvarDistotion.MaxLength = 20;
				colvarDistotion.AutoIncrement = false;
				colvarDistotion.IsNullable = true;
				colvarDistotion.IsPrimaryKey = false;
				colvarDistotion.IsForeignKey = false;
				colvarDistotion.IsReadOnly = false;
				colvarDistotion.DefaultSetting = @"";
				colvarDistotion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDistotion);
				
				TableSchema.TableColumn colvarResolution = new TableSchema.TableColumn(schema);
				colvarResolution.ColumnName = "Resolution";
				colvarResolution.DataType = DbType.String;
				colvarResolution.MaxLength = 20;
				colvarResolution.AutoIncrement = false;
				colvarResolution.IsNullable = true;
				colvarResolution.IsPrimaryKey = false;
				colvarResolution.IsForeignKey = false;
				colvarResolution.IsReadOnly = false;
				colvarResolution.DefaultSetting = @"";
				colvarResolution.ForeignKeyTableName = "";
				schema.Columns.Add(colvarResolution);
				
				TableSchema.TableColumn colvarHexagonal = new TableSchema.TableColumn(schema);
				colvarHexagonal.ColumnName = "Hexagonal";
				colvarHexagonal.DataType = DbType.Int32;
				colvarHexagonal.MaxLength = 0;
				colvarHexagonal.AutoIncrement = false;
				colvarHexagonal.IsNullable = true;
				colvarHexagonal.IsPrimaryKey = false;
				colvarHexagonal.IsForeignKey = false;
				colvarHexagonal.IsReadOnly = false;
				colvarHexagonal.DefaultSetting = @"";
				colvarHexagonal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHexagonal);
				
				TableSchema.TableColumn colvarImageSmoothness = new TableSchema.TableColumn(schema);
				colvarImageSmoothness.ColumnName = "ImageSmoothness";
				colvarImageSmoothness.DataType = DbType.Byte;
				colvarImageSmoothness.MaxLength = 0;
				colvarImageSmoothness.AutoIncrement = false;
				colvarImageSmoothness.IsNullable = true;
				colvarImageSmoothness.IsPrimaryKey = false;
				colvarImageSmoothness.IsForeignKey = false;
				colvarImageSmoothness.IsReadOnly = false;
				colvarImageSmoothness.DefaultSetting = @"";
				colvarImageSmoothness.ForeignKeyTableName = "";
				schema.Columns.Add(colvarImageSmoothness);
				
				TableSchema.TableColumn colvarUnsharpMasking = new TableSchema.TableColumn(schema);
				colvarUnsharpMasking.ColumnName = "UnsharpMasking";
				colvarUnsharpMasking.DataType = DbType.String;
				colvarUnsharpMasking.MaxLength = 20;
				colvarUnsharpMasking.AutoIncrement = false;
				colvarUnsharpMasking.IsNullable = true;
				colvarUnsharpMasking.IsPrimaryKey = false;
				colvarUnsharpMasking.IsForeignKey = false;
				colvarUnsharpMasking.IsReadOnly = false;
				colvarUnsharpMasking.DefaultSetting = @"";
				colvarUnsharpMasking.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnsharpMasking);
				
				TableSchema.TableColumn colvarAntialiasing = new TableSchema.TableColumn(schema);
				colvarAntialiasing.ColumnName = "Antialiasing";
				colvarAntialiasing.DataType = DbType.String;
				colvarAntialiasing.MaxLength = 20;
				colvarAntialiasing.AutoIncrement = false;
				colvarAntialiasing.IsNullable = true;
				colvarAntialiasing.IsPrimaryKey = false;
				colvarAntialiasing.IsForeignKey = false;
				colvarAntialiasing.IsReadOnly = false;
				colvarAntialiasing.DefaultSetting = @"";
				colvarAntialiasing.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAntialiasing);
				
				TableSchema.TableColumn colvarLineworkWidening = new TableSchema.TableColumn(schema);
				colvarLineworkWidening.ColumnName = "LineworkWidening";
				colvarLineworkWidening.DataType = DbType.String;
				colvarLineworkWidening.MaxLength = 20;
				colvarLineworkWidening.AutoIncrement = false;
				colvarLineworkWidening.IsNullable = true;
				colvarLineworkWidening.IsPrimaryKey = false;
				colvarLineworkWidening.IsForeignKey = false;
				colvarLineworkWidening.IsReadOnly = false;
				colvarLineworkWidening.DefaultSetting = @"";
				colvarLineworkWidening.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLineworkWidening);
				
				TableSchema.TableColumn colvarEngravingStart = new TableSchema.TableColumn(schema);
				colvarEngravingStart.ColumnName = "EngravingStart";
				colvarEngravingStart.DataType = DbType.String;
				colvarEngravingStart.MaxLength = 20;
				colvarEngravingStart.AutoIncrement = false;
				colvarEngravingStart.IsNullable = true;
				colvarEngravingStart.IsPrimaryKey = false;
				colvarEngravingStart.IsForeignKey = false;
				colvarEngravingStart.IsReadOnly = false;
				colvarEngravingStart.DefaultSetting = @"";
				colvarEngravingStart.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEngravingStart);
				
				TableSchema.TableColumn colvarEngravingWidth = new TableSchema.TableColumn(schema);
				colvarEngravingWidth.ColumnName = "EngravingWidth";
				colvarEngravingWidth.DataType = DbType.String;
				colvarEngravingWidth.MaxLength = 20;
				colvarEngravingWidth.AutoIncrement = false;
				colvarEngravingWidth.IsNullable = true;
				colvarEngravingWidth.IsPrimaryKey = false;
				colvarEngravingWidth.IsForeignKey = false;
				colvarEngravingWidth.IsReadOnly = false;
				colvarEngravingWidth.DefaultSetting = @"";
				colvarEngravingWidth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEngravingWidth);
				
				TableSchema.TableColumn colvarCellShape = new TableSchema.TableColumn(schema);
				colvarCellShape.ColumnName = "CellShape";
				colvarCellShape.DataType = DbType.Int32;
				colvarCellShape.MaxLength = 0;
				colvarCellShape.AutoIncrement = false;
				colvarCellShape.IsNullable = true;
				colvarCellShape.IsPrimaryKey = false;
				colvarCellShape.IsForeignKey = false;
				colvarCellShape.IsReadOnly = false;
				colvarCellShape.DefaultSetting = @"";
				colvarCellShape.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellShape);
				
				TableSchema.TableColumn colvarGradation = new TableSchema.TableColumn(schema);
				colvarGradation.ColumnName = "Gradation";
				colvarGradation.DataType = DbType.Int32;
				colvarGradation.MaxLength = 0;
				colvarGradation.AutoIncrement = false;
				colvarGradation.IsNullable = true;
				colvarGradation.IsPrimaryKey = false;
				colvarGradation.IsForeignKey = false;
				colvarGradation.IsReadOnly = false;
				colvarGradation.DefaultSetting = @"";
				colvarGradation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGradation);
				
				TableSchema.TableColumn colvarGamma = new TableSchema.TableColumn(schema);
				colvarGamma.ColumnName = "Gamma";
				colvarGamma.DataType = DbType.String;
				colvarGamma.MaxLength = 100;
				colvarGamma.AutoIncrement = false;
				colvarGamma.IsNullable = true;
				colvarGamma.IsPrimaryKey = false;
				colvarGamma.IsForeignKey = false;
				colvarGamma.IsReadOnly = false;
				colvarGamma.DefaultSetting = @"";
				colvarGamma.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGamma);
				
				TableSchema.TableColumn colvarLaserA = new TableSchema.TableColumn(schema);
				colvarLaserA.ColumnName = "LaserA";
				colvarLaserA.DataType = DbType.Byte;
				colvarLaserA.MaxLength = 0;
				colvarLaserA.AutoIncrement = false;
				colvarLaserA.IsNullable = true;
				colvarLaserA.IsPrimaryKey = false;
				colvarLaserA.IsForeignKey = false;
				colvarLaserA.IsReadOnly = false;
				colvarLaserA.DefaultSetting = @"";
				colvarLaserA.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLaserA);
				
				TableSchema.TableColumn colvarLaserB = new TableSchema.TableColumn(schema);
				colvarLaserB.ColumnName = "LaserB";
				colvarLaserB.DataType = DbType.Byte;
				colvarLaserB.MaxLength = 0;
				colvarLaserB.AutoIncrement = false;
				colvarLaserB.IsNullable = true;
				colvarLaserB.IsPrimaryKey = false;
				colvarLaserB.IsForeignKey = false;
				colvarLaserB.IsReadOnly = false;
				colvarLaserB.DefaultSetting = @"";
				colvarLaserB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLaserB);
				
				TableSchema.TableColumn colvarCellWidth = new TableSchema.TableColumn(schema);
				colvarCellWidth.ColumnName = "CellWidth";
				colvarCellWidth.DataType = DbType.String;
				colvarCellWidth.MaxLength = 20;
				colvarCellWidth.AutoIncrement = false;
				colvarCellWidth.IsNullable = true;
				colvarCellWidth.IsPrimaryKey = false;
				colvarCellWidth.IsForeignKey = false;
				colvarCellWidth.IsReadOnly = false;
				colvarCellWidth.DefaultSetting = @"";
				colvarCellWidth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellWidth);
				
				TableSchema.TableColumn colvarChannelWidth = new TableSchema.TableColumn(schema);
				colvarChannelWidth.ColumnName = "ChannelWidth";
				colvarChannelWidth.DataType = DbType.String;
				colvarChannelWidth.MaxLength = 20;
				colvarChannelWidth.AutoIncrement = false;
				colvarChannelWidth.IsNullable = true;
				colvarChannelWidth.IsPrimaryKey = false;
				colvarChannelWidth.IsForeignKey = false;
				colvarChannelWidth.IsReadOnly = false;
				colvarChannelWidth.DefaultSetting = @"";
				colvarChannelWidth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarChannelWidth);
				
				TableSchema.TableColumn colvarCellDepth = new TableSchema.TableColumn(schema);
				colvarCellDepth.ColumnName = "CellDepth";
				colvarCellDepth.DataType = DbType.String;
				colvarCellDepth.MaxLength = 20;
				colvarCellDepth.AutoIncrement = false;
				colvarCellDepth.IsNullable = true;
				colvarCellDepth.IsPrimaryKey = false;
				colvarCellDepth.IsForeignKey = false;
				colvarCellDepth.IsReadOnly = false;
				colvarCellDepth.DefaultSetting = @"";
				colvarCellDepth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellDepth);
				
				TableSchema.TableColumn colvarEngravingTime = new TableSchema.TableColumn(schema);
				colvarEngravingTime.ColumnName = "EngravingTime";
				colvarEngravingTime.DataType = DbType.String;
				colvarEngravingTime.MaxLength = 50;
				colvarEngravingTime.AutoIncrement = false;
				colvarEngravingTime.IsNullable = true;
				colvarEngravingTime.IsPrimaryKey = false;
				colvarEngravingTime.IsForeignKey = false;
				colvarEngravingTime.IsReadOnly = false;
				colvarEngravingTime.DefaultSetting = @"";
				colvarEngravingTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEngravingTime);
				
				TableSchema.TableColumn colvarBeam = new TableSchema.TableColumn(schema);
				colvarBeam.ColumnName = "Beam";
				colvarBeam.DataType = DbType.String;
				colvarBeam.MaxLength = 20;
				colvarBeam.AutoIncrement = false;
				colvarBeam.IsNullable = true;
				colvarBeam.IsPrimaryKey = false;
				colvarBeam.IsForeignKey = false;
				colvarBeam.IsReadOnly = false;
				colvarBeam.DefaultSetting = @"";
				colvarBeam.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBeam);
				
				TableSchema.TableColumn colvarThreshold = new TableSchema.TableColumn(schema);
				colvarThreshold.ColumnName = "Threshold";
				colvarThreshold.DataType = DbType.String;
				colvarThreshold.MaxLength = 20;
				colvarThreshold.AutoIncrement = false;
				colvarThreshold.IsNullable = true;
				colvarThreshold.IsPrimaryKey = false;
				colvarThreshold.IsForeignKey = false;
				colvarThreshold.IsReadOnly = false;
				colvarThreshold.DefaultSetting = @"";
				colvarThreshold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarThreshold);
				
				TableSchema.TableColumn colvarCheckedBy = new TableSchema.TableColumn(schema);
				colvarCheckedBy.ColumnName = "CheckedBy";
				colvarCheckedBy.DataType = DbType.String;
				colvarCheckedBy.MaxLength = 200;
				colvarCheckedBy.AutoIncrement = false;
				colvarCheckedBy.IsNullable = true;
				colvarCheckedBy.IsPrimaryKey = false;
				colvarCheckedBy.IsForeignKey = false;
				colvarCheckedBy.IsReadOnly = false;
				colvarCheckedBy.DefaultSetting = @"";
				colvarCheckedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCheckedBy);
				
				TableSchema.TableColumn colvarCheckedOn = new TableSchema.TableColumn(schema);
				colvarCheckedOn.ColumnName = "CheckedOn";
				colvarCheckedOn.DataType = DbType.DateTime;
				colvarCheckedOn.MaxLength = 0;
				colvarCheckedOn.AutoIncrement = false;
				colvarCheckedOn.IsNullable = true;
				colvarCheckedOn.IsPrimaryKey = false;
				colvarCheckedOn.IsForeignKey = false;
				colvarCheckedOn.IsReadOnly = false;
				colvarCheckedOn.DefaultSetting = @"";
				colvarCheckedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCheckedOn);
				
				TableSchema.TableColumn colvarIsCopy = new TableSchema.TableColumn(schema);
				colvarIsCopy.ColumnName = "IsCopy";
				colvarIsCopy.DataType = DbType.Byte;
				colvarIsCopy.MaxLength = 0;
				colvarIsCopy.AutoIncrement = false;
				colvarIsCopy.IsNullable = false;
				colvarIsCopy.IsPrimaryKey = false;
				colvarIsCopy.IsForeignKey = false;
				colvarIsCopy.IsReadOnly = false;
				colvarIsCopy.DefaultSetting = @"";
				colvarIsCopy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCopy);
				
				TableSchema.TableColumn colvarColor = new TableSchema.TableColumn(schema);
				colvarColor.ColumnName = "Color";
				colvarColor.DataType = DbType.String;
				colvarColor.MaxLength = 100;
				colvarColor.AutoIncrement = false;
				colvarColor.IsNullable = true;
				colvarColor.IsPrimaryKey = false;
				colvarColor.IsForeignKey = false;
				colvarColor.IsReadOnly = false;
				colvarColor.DefaultSetting = @"";
				colvarColor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarColor);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("tblEngravingTobacco",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("EngravingID")]
		[Bindable(true)]
		public int EngravingID 
		{
			get { return GetColumnValue<int>(Columns.EngravingID); }
			set { SetColumnValue(Columns.EngravingID, value); }
		}
		  
		[XmlAttribute("CylinderID")]
		[Bindable(true)]
		public int CylinderID 
		{
			get { return GetColumnValue<int>(Columns.CylinderID); }
			set { SetColumnValue(Columns.CylinderID, value); }
		}
		  
		[XmlAttribute("Sequence")]
		[Bindable(true)]
		public int Sequence 
		{
			get { return GetColumnValue<int>(Columns.Sequence); }
			set { SetColumnValue(Columns.Sequence, value); }
		}
		  
		[XmlAttribute("JobID")]
		[Bindable(true)]
		public int JobID 
		{
			get { return GetColumnValue<int>(Columns.JobID); }
			set { SetColumnValue(Columns.JobID, value); }
		}
		  
		[XmlAttribute("Stylus")]
		[Bindable(true)]
		public int? Stylus 
		{
			get { return GetColumnValue<int?>(Columns.Stylus); }
			set { SetColumnValue(Columns.Stylus, value); }
		}
		  
		[XmlAttribute("Screen")]
		[Bindable(true)]
		public string Screen 
		{
			get { return GetColumnValue<string>(Columns.Screen); }
			set { SetColumnValue(Columns.Screen, value); }
		}
		  
		[XmlAttribute("MasterScreen")]
		[Bindable(true)]
		public byte? MasterScreen 
		{
			get { return GetColumnValue<byte?>(Columns.MasterScreen); }
			set { SetColumnValue(Columns.MasterScreen, value); }
		}
		  
		[XmlAttribute("Angle")]
		[Bindable(true)]
		public string Angle 
		{
			get { return GetColumnValue<string>(Columns.Angle); }
			set { SetColumnValue(Columns.Angle, value); }
		}
		  
		[XmlAttribute("Elongation")]
		[Bindable(true)]
		public string Elongation 
		{
			get { return GetColumnValue<string>(Columns.Elongation); }
			set { SetColumnValue(Columns.Elongation, value); }
		}
		  
		[XmlAttribute("Distotion")]
		[Bindable(true)]
		public string Distotion 
		{
			get { return GetColumnValue<string>(Columns.Distotion); }
			set { SetColumnValue(Columns.Distotion, value); }
		}
		  
		[XmlAttribute("Resolution")]
		[Bindable(true)]
		public string Resolution 
		{
			get { return GetColumnValue<string>(Columns.Resolution); }
			set { SetColumnValue(Columns.Resolution, value); }
		}
		  
		[XmlAttribute("Hexagonal")]
		[Bindable(true)]
		public int? Hexagonal 
		{
			get { return GetColumnValue<int?>(Columns.Hexagonal); }
			set { SetColumnValue(Columns.Hexagonal, value); }
		}
		  
		[XmlAttribute("ImageSmoothness")]
		[Bindable(true)]
		public byte? ImageSmoothness 
		{
			get { return GetColumnValue<byte?>(Columns.ImageSmoothness); }
			set { SetColumnValue(Columns.ImageSmoothness, value); }
		}
		  
		[XmlAttribute("UnsharpMasking")]
		[Bindable(true)]
		public string UnsharpMasking 
		{
			get { return GetColumnValue<string>(Columns.UnsharpMasking); }
			set { SetColumnValue(Columns.UnsharpMasking, value); }
		}
		  
		[XmlAttribute("Antialiasing")]
		[Bindable(true)]
		public string Antialiasing 
		{
			get { return GetColumnValue<string>(Columns.Antialiasing); }
			set { SetColumnValue(Columns.Antialiasing, value); }
		}
		  
		[XmlAttribute("LineworkWidening")]
		[Bindable(true)]
		public string LineworkWidening 
		{
			get { return GetColumnValue<string>(Columns.LineworkWidening); }
			set { SetColumnValue(Columns.LineworkWidening, value); }
		}
		  
		[XmlAttribute("EngravingStart")]
		[Bindable(true)]
		public string EngravingStart 
		{
			get { return GetColumnValue<string>(Columns.EngravingStart); }
			set { SetColumnValue(Columns.EngravingStart, value); }
		}
		  
		[XmlAttribute("EngravingWidth")]
		[Bindable(true)]
		public string EngravingWidth 
		{
			get { return GetColumnValue<string>(Columns.EngravingWidth); }
			set { SetColumnValue(Columns.EngravingWidth, value); }
		}
		  
		[XmlAttribute("CellShape")]
		[Bindable(true)]
		public int? CellShape 
		{
			get { return GetColumnValue<int?>(Columns.CellShape); }
			set { SetColumnValue(Columns.CellShape, value); }
		}
		  
		[XmlAttribute("Gradation")]
		[Bindable(true)]
		public int? Gradation 
		{
			get { return GetColumnValue<int?>(Columns.Gradation); }
			set { SetColumnValue(Columns.Gradation, value); }
		}
		  
		[XmlAttribute("Gamma")]
		[Bindable(true)]
		public string Gamma 
		{
			get { return GetColumnValue<string>(Columns.Gamma); }
			set { SetColumnValue(Columns.Gamma, value); }
		}
		  
		[XmlAttribute("LaserA")]
		[Bindable(true)]
		public byte? LaserA 
		{
			get { return GetColumnValue<byte?>(Columns.LaserA); }
			set { SetColumnValue(Columns.LaserA, value); }
		}
		  
		[XmlAttribute("LaserB")]
		[Bindable(true)]
		public byte? LaserB 
		{
			get { return GetColumnValue<byte?>(Columns.LaserB); }
			set { SetColumnValue(Columns.LaserB, value); }
		}
		  
		[XmlAttribute("CellWidth")]
		[Bindable(true)]
		public string CellWidth 
		{
			get { return GetColumnValue<string>(Columns.CellWidth); }
			set { SetColumnValue(Columns.CellWidth, value); }
		}
		  
		[XmlAttribute("ChannelWidth")]
		[Bindable(true)]
		public string ChannelWidth 
		{
			get { return GetColumnValue<string>(Columns.ChannelWidth); }
			set { SetColumnValue(Columns.ChannelWidth, value); }
		}
		  
		[XmlAttribute("CellDepth")]
		[Bindable(true)]
		public string CellDepth 
		{
			get { return GetColumnValue<string>(Columns.CellDepth); }
			set { SetColumnValue(Columns.CellDepth, value); }
		}
		  
		[XmlAttribute("EngravingTime")]
		[Bindable(true)]
		public string EngravingTime 
		{
			get { return GetColumnValue<string>(Columns.EngravingTime); }
			set { SetColumnValue(Columns.EngravingTime, value); }
		}
		  
		[XmlAttribute("Beam")]
		[Bindable(true)]
		public string Beam 
		{
			get { return GetColumnValue<string>(Columns.Beam); }
			set { SetColumnValue(Columns.Beam, value); }
		}
		  
		[XmlAttribute("Threshold")]
		[Bindable(true)]
		public string Threshold 
		{
			get { return GetColumnValue<string>(Columns.Threshold); }
			set { SetColumnValue(Columns.Threshold, value); }
		}
		  
		[XmlAttribute("CheckedBy")]
		[Bindable(true)]
		public string CheckedBy 
		{
			get { return GetColumnValue<string>(Columns.CheckedBy); }
			set { SetColumnValue(Columns.CheckedBy, value); }
		}
		  
		[XmlAttribute("CheckedOn")]
		[Bindable(true)]
		public DateTime? CheckedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CheckedOn); }
			set { SetColumnValue(Columns.CheckedOn, value); }
		}
		  
		[XmlAttribute("IsCopy")]
		[Bindable(true)]
		public byte IsCopy 
		{
			get { return GetColumnValue<byte>(Columns.IsCopy); }
			set { SetColumnValue(Columns.IsCopy, value); }
		}
		  
		[XmlAttribute("Color")]
		[Bindable(true)]
		public string Color 
		{
			get { return GetColumnValue<string>(Columns.Color); }
			set { SetColumnValue(Columns.Color, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varCylinderID,int varSequence,int varJobID,int? varStylus,string varScreen,byte? varMasterScreen,string varAngle,string varElongation,string varDistotion,string varResolution,int? varHexagonal,byte? varImageSmoothness,string varUnsharpMasking,string varAntialiasing,string varLineworkWidening,string varEngravingStart,string varEngravingWidth,int? varCellShape,int? varGradation,string varGamma,byte? varLaserA,byte? varLaserB,string varCellWidth,string varChannelWidth,string varCellDepth,string varEngravingTime,string varBeam,string varThreshold,string varCheckedBy,DateTime? varCheckedOn,byte varIsCopy,string varColor)
		{
			TblEngravingTobacco item = new TblEngravingTobacco();
			
			item.CylinderID = varCylinderID;
			
			item.Sequence = varSequence;
			
			item.JobID = varJobID;
			
			item.Stylus = varStylus;
			
			item.Screen = varScreen;
			
			item.MasterScreen = varMasterScreen;
			
			item.Angle = varAngle;
			
			item.Elongation = varElongation;
			
			item.Distotion = varDistotion;
			
			item.Resolution = varResolution;
			
			item.Hexagonal = varHexagonal;
			
			item.ImageSmoothness = varImageSmoothness;
			
			item.UnsharpMasking = varUnsharpMasking;
			
			item.Antialiasing = varAntialiasing;
			
			item.LineworkWidening = varLineworkWidening;
			
			item.EngravingStart = varEngravingStart;
			
			item.EngravingWidth = varEngravingWidth;
			
			item.CellShape = varCellShape;
			
			item.Gradation = varGradation;
			
			item.Gamma = varGamma;
			
			item.LaserA = varLaserA;
			
			item.LaserB = varLaserB;
			
			item.CellWidth = varCellWidth;
			
			item.ChannelWidth = varChannelWidth;
			
			item.CellDepth = varCellDepth;
			
			item.EngravingTime = varEngravingTime;
			
			item.Beam = varBeam;
			
			item.Threshold = varThreshold;
			
			item.CheckedBy = varCheckedBy;
			
			item.CheckedOn = varCheckedOn;
			
			item.IsCopy = varIsCopy;
			
			item.Color = varColor;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varEngravingID,int varCylinderID,int varSequence,int varJobID,int? varStylus,string varScreen,byte? varMasterScreen,string varAngle,string varElongation,string varDistotion,string varResolution,int? varHexagonal,byte? varImageSmoothness,string varUnsharpMasking,string varAntialiasing,string varLineworkWidening,string varEngravingStart,string varEngravingWidth,int? varCellShape,int? varGradation,string varGamma,byte? varLaserA,byte? varLaserB,string varCellWidth,string varChannelWidth,string varCellDepth,string varEngravingTime,string varBeam,string varThreshold,string varCheckedBy,DateTime? varCheckedOn,byte varIsCopy,string varColor)
		{
			TblEngravingTobacco item = new TblEngravingTobacco();
			
				item.EngravingID = varEngravingID;
			
				item.CylinderID = varCylinderID;
			
				item.Sequence = varSequence;
			
				item.JobID = varJobID;
			
				item.Stylus = varStylus;
			
				item.Screen = varScreen;
			
				item.MasterScreen = varMasterScreen;
			
				item.Angle = varAngle;
			
				item.Elongation = varElongation;
			
				item.Distotion = varDistotion;
			
				item.Resolution = varResolution;
			
				item.Hexagonal = varHexagonal;
			
				item.ImageSmoothness = varImageSmoothness;
			
				item.UnsharpMasking = varUnsharpMasking;
			
				item.Antialiasing = varAntialiasing;
			
				item.LineworkWidening = varLineworkWidening;
			
				item.EngravingStart = varEngravingStart;
			
				item.EngravingWidth = varEngravingWidth;
			
				item.CellShape = varCellShape;
			
				item.Gradation = varGradation;
			
				item.Gamma = varGamma;
			
				item.LaserA = varLaserA;
			
				item.LaserB = varLaserB;
			
				item.CellWidth = varCellWidth;
			
				item.ChannelWidth = varChannelWidth;
			
				item.CellDepth = varCellDepth;
			
				item.EngravingTime = varEngravingTime;
			
				item.Beam = varBeam;
			
				item.Threshold = varThreshold;
			
				item.CheckedBy = varCheckedBy;
			
				item.CheckedOn = varCheckedOn;
			
				item.IsCopy = varIsCopy;
			
				item.Color = varColor;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn EngravingIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CylinderIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn SequenceColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn JobIDColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn StylusColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ScreenColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn MasterScreenColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn AngleColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ElongationColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn DistotionColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ResolutionColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn HexagonalColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ImageSmoothnessColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn UnsharpMaskingColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn AntialiasingColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn LineworkWideningColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn EngravingStartColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn EngravingWidthColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn CellShapeColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn GradationColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn GammaColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn LaserAColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn LaserBColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn CellWidthColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn ChannelWidthColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn CellDepthColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn EngravingTimeColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn BeamColumn
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        public static TableSchema.TableColumn ThresholdColumn
        {
            get { return Schema.Columns[28]; }
        }
        
        
        
        public static TableSchema.TableColumn CheckedByColumn
        {
            get { return Schema.Columns[29]; }
        }
        
        
        
        public static TableSchema.TableColumn CheckedOnColumn
        {
            get { return Schema.Columns[30]; }
        }
        
        
        
        public static TableSchema.TableColumn IsCopyColumn
        {
            get { return Schema.Columns[31]; }
        }
        
        
        
        public static TableSchema.TableColumn ColorColumn
        {
            get { return Schema.Columns[32]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string EngravingID = @"EngravingID";
			 public static string CylinderID = @"CylinderID";
			 public static string Sequence = @"Sequence";
			 public static string JobID = @"JobID";
			 public static string Stylus = @"Stylus";
			 public static string Screen = @"Screen";
			 public static string MasterScreen = @"MasterScreen";
			 public static string Angle = @"Angle";
			 public static string Elongation = @"Elongation";
			 public static string Distotion = @"Distotion";
			 public static string Resolution = @"Resolution";
			 public static string Hexagonal = @"Hexagonal";
			 public static string ImageSmoothness = @"ImageSmoothness";
			 public static string UnsharpMasking = @"UnsharpMasking";
			 public static string Antialiasing = @"Antialiasing";
			 public static string LineworkWidening = @"LineworkWidening";
			 public static string EngravingStart = @"EngravingStart";
			 public static string EngravingWidth = @"EngravingWidth";
			 public static string CellShape = @"CellShape";
			 public static string Gradation = @"Gradation";
			 public static string Gamma = @"Gamma";
			 public static string LaserA = @"LaserA";
			 public static string LaserB = @"LaserB";
			 public static string CellWidth = @"CellWidth";
			 public static string ChannelWidth = @"ChannelWidth";
			 public static string CellDepth = @"CellDepth";
			 public static string EngravingTime = @"EngravingTime";
			 public static string Beam = @"Beam";
			 public static string Threshold = @"Threshold";
			 public static string CheckedBy = @"CheckedBy";
			 public static string CheckedOn = @"CheckedOn";
			 public static string IsCopy = @"IsCopy";
			 public static string Color = @"Color";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
