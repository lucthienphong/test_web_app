using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblStaff class.
	/// </summary>
    [Serializable]
	public partial class TblStaffCollection : ActiveList<TblStaff, TblStaffCollection>
	{	   
		public TblStaffCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblStaffCollection</returns>
		public TblStaffCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblStaff o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblStaff table.
	/// </summary>
	[Serializable]
	public partial class TblStaff : ActiveRecord<TblStaff>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblStaff()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblStaff(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblStaff(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblStaff(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblStaff", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarStaffID = new TableSchema.TableColumn(schema);
				colvarStaffID.ColumnName = "StaffID";
				colvarStaffID.DataType = DbType.Int32;
				colvarStaffID.MaxLength = 0;
				colvarStaffID.AutoIncrement = true;
				colvarStaffID.IsNullable = false;
				colvarStaffID.IsPrimaryKey = true;
				colvarStaffID.IsForeignKey = false;
				colvarStaffID.IsReadOnly = false;
				colvarStaffID.DefaultSetting = @"";
				colvarStaffID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStaffID);
				
				TableSchema.TableColumn colvarStaffNo = new TableSchema.TableColumn(schema);
				colvarStaffNo.ColumnName = "StaffNo";
				colvarStaffNo.DataType = DbType.String;
				colvarStaffNo.MaxLength = 50;
				colvarStaffNo.AutoIncrement = false;
				colvarStaffNo.IsNullable = false;
				colvarStaffNo.IsPrimaryKey = false;
				colvarStaffNo.IsForeignKey = false;
				colvarStaffNo.IsReadOnly = false;
				colvarStaffNo.DefaultSetting = @"";
				colvarStaffNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStaffNo);
				
				TableSchema.TableColumn colvarFirstName = new TableSchema.TableColumn(schema);
				colvarFirstName.ColumnName = "FirstName";
				colvarFirstName.DataType = DbType.String;
				colvarFirstName.MaxLength = 50;
				colvarFirstName.AutoIncrement = false;
				colvarFirstName.IsNullable = false;
				colvarFirstName.IsPrimaryKey = false;
				colvarFirstName.IsForeignKey = false;
				colvarFirstName.IsReadOnly = false;
				colvarFirstName.DefaultSetting = @"";
				colvarFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstName);
				
				TableSchema.TableColumn colvarLastName = new TableSchema.TableColumn(schema);
				colvarLastName.ColumnName = "LastName";
				colvarLastName.DataType = DbType.String;
				colvarLastName.MaxLength = 100;
				colvarLastName.AutoIncrement = false;
				colvarLastName.IsNullable = false;
				colvarLastName.IsPrimaryKey = false;
				colvarLastName.IsForeignKey = false;
				colvarLastName.IsReadOnly = false;
				colvarLastName.DefaultSetting = @"";
				colvarLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastName);
				
				TableSchema.TableColumn colvarTelNumber = new TableSchema.TableColumn(schema);
				colvarTelNumber.ColumnName = "TelNumber";
				colvarTelNumber.DataType = DbType.AnsiString;
				colvarTelNumber.MaxLength = 20;
				colvarTelNumber.AutoIncrement = false;
				colvarTelNumber.IsNullable = false;
				colvarTelNumber.IsPrimaryKey = false;
				colvarTelNumber.IsForeignKey = false;
				colvarTelNumber.IsReadOnly = false;
				colvarTelNumber.DefaultSetting = @"";
				colvarTelNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTelNumber);
				
				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.String;
				colvarEmail.MaxLength = 200;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = false;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);
				
				TableSchema.TableColumn colvarAddress = new TableSchema.TableColumn(schema);
				colvarAddress.ColumnName = "Address";
				colvarAddress.DataType = DbType.String;
				colvarAddress.MaxLength = 200;
				colvarAddress.AutoIncrement = false;
				colvarAddress.IsNullable = false;
				colvarAddress.IsPrimaryKey = false;
				colvarAddress.IsForeignKey = false;
				colvarAddress.IsReadOnly = false;
				colvarAddress.DefaultSetting = @"";
				colvarAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddress);
				
				TableSchema.TableColumn colvarDepartmentID = new TableSchema.TableColumn(schema);
				colvarDepartmentID.ColumnName = "DepartmentID";
				colvarDepartmentID.DataType = DbType.Int16;
				colvarDepartmentID.MaxLength = 0;
				colvarDepartmentID.AutoIncrement = false;
				colvarDepartmentID.IsNullable = true;
				colvarDepartmentID.IsPrimaryKey = false;
				colvarDepartmentID.IsForeignKey = true;
				colvarDepartmentID.IsReadOnly = false;
				colvarDepartmentID.DefaultSetting = @"";
				
					colvarDepartmentID.ForeignKeyTableName = "tblDepartment";
				schema.Columns.Add(colvarDepartmentID);
				
				TableSchema.TableColumn colvarHasAccount = new TableSchema.TableColumn(schema);
				colvarHasAccount.ColumnName = "HasAccount";
				colvarHasAccount.DataType = DbType.Boolean;
				colvarHasAccount.MaxLength = 0;
				colvarHasAccount.AutoIncrement = false;
				colvarHasAccount.IsNullable = false;
				colvarHasAccount.IsPrimaryKey = false;
				colvarHasAccount.IsForeignKey = false;
				colvarHasAccount.IsReadOnly = false;
				colvarHasAccount.DefaultSetting = @"";
				colvarHasAccount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasAccount);
				
				TableSchema.TableColumn colvarIsObsolete = new TableSchema.TableColumn(schema);
				colvarIsObsolete.ColumnName = "IsObsolete";
				colvarIsObsolete.DataType = DbType.Boolean;
				colvarIsObsolete.MaxLength = 0;
				colvarIsObsolete.AutoIncrement = false;
				colvarIsObsolete.IsNullable = false;
				colvarIsObsolete.IsPrimaryKey = false;
				colvarIsObsolete.IsForeignKey = false;
				colvarIsObsolete.IsReadOnly = false;
				colvarIsObsolete.DefaultSetting = @"";
				colvarIsObsolete.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsObsolete);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("tblStaff",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("StaffID")]
		[Bindable(true)]
		public int StaffID 
		{
			get { return GetColumnValue<int>(Columns.StaffID); }
			set { SetColumnValue(Columns.StaffID, value); }
		}
		  
		[XmlAttribute("StaffNo")]
		[Bindable(true)]
		public string StaffNo 
		{
			get { return GetColumnValue<string>(Columns.StaffNo); }
			set { SetColumnValue(Columns.StaffNo, value); }
		}
		  
		[XmlAttribute("FirstName")]
		[Bindable(true)]
		public string FirstName 
		{
			get { return GetColumnValue<string>(Columns.FirstName); }
			set { SetColumnValue(Columns.FirstName, value); }
		}
		  
		[XmlAttribute("LastName")]
		[Bindable(true)]
		public string LastName 
		{
			get { return GetColumnValue<string>(Columns.LastName); }
			set { SetColumnValue(Columns.LastName, value); }
		}
		  
		[XmlAttribute("TelNumber")]
		[Bindable(true)]
		public string TelNumber 
		{
			get { return GetColumnValue<string>(Columns.TelNumber); }
			set { SetColumnValue(Columns.TelNumber, value); }
		}
		  
		[XmlAttribute("Email")]
		[Bindable(true)]
		public string Email 
		{
			get { return GetColumnValue<string>(Columns.Email); }
			set { SetColumnValue(Columns.Email, value); }
		}
		  
		[XmlAttribute("Address")]
		[Bindable(true)]
		public string Address 
		{
			get { return GetColumnValue<string>(Columns.Address); }
			set { SetColumnValue(Columns.Address, value); }
		}
		  
		[XmlAttribute("DepartmentID")]
		[Bindable(true)]
		public short? DepartmentID 
		{
			get { return GetColumnValue<short?>(Columns.DepartmentID); }
			set { SetColumnValue(Columns.DepartmentID, value); }
		}
		  
		[XmlAttribute("HasAccount")]
		[Bindable(true)]
		public bool HasAccount 
		{
			get { return GetColumnValue<bool>(Columns.HasAccount); }
			set { SetColumnValue(Columns.HasAccount, value); }
		}
		  
		[XmlAttribute("IsObsolete")]
		[Bindable(true)]
		public bool IsObsolete 
		{
			get { return GetColumnValue<bool>(Columns.IsObsolete); }
			set { SetColumnValue(Columns.IsObsolete, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		private SweetSoft.APEM.DataAccess.TblJobCollection colTblJobRecords;
		public SweetSoft.APEM.DataAccess.TblJobCollection TblJobRecords()
		{
			if(colTblJobRecords == null)
			{
				colTblJobRecords = new SweetSoft.APEM.DataAccess.TblJobCollection().Where(TblJob.Columns.SalesRepID, StaffID).Load();
				colTblJobRecords.ListChanged += new ListChangedEventHandler(colTblJobRecords_ListChanged);
			}
			return colTblJobRecords;
		}
				
		void colTblJobRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colTblJobRecords[e.NewIndex].SalesRepID = StaffID;
            }
		}
		private SweetSoft.APEM.DataAccess.TblJobCollection colTblJobRecordsFromTblStaff;
		public SweetSoft.APEM.DataAccess.TblJobCollection TblJobRecordsFromTblStaff()
		{
			if(colTblJobRecordsFromTblStaff == null)
			{
				colTblJobRecordsFromTblStaff = new SweetSoft.APEM.DataAccess.TblJobCollection().Where(TblJob.Columns.CoordinatorID, StaffID).Load();
				colTblJobRecordsFromTblStaff.ListChanged += new ListChangedEventHandler(colTblJobRecordsFromTblStaff_ListChanged);
			}
			return colTblJobRecordsFromTblStaff;
		}
				
		void colTblJobRecordsFromTblStaff_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colTblJobRecordsFromTblStaff[e.NewIndex].CoordinatorID = StaffID;
            }
		}
		private SweetSoft.APEM.DataAccess.TblUserCollection colTblUserRecords;
		public SweetSoft.APEM.DataAccess.TblUserCollection TblUserRecords()
		{
			if(colTblUserRecords == null)
			{
				colTblUserRecords = new SweetSoft.APEM.DataAccess.TblUserCollection().Where(TblUser.Columns.UserID, StaffID).Load();
				colTblUserRecords.ListChanged += new ListChangedEventHandler(colTblUserRecords_ListChanged);
			}
			return colTblUserRecords;
		}
				
		void colTblUserRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colTblUserRecords[e.NewIndex].UserID = StaffID;
            }
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblDepartment ActiveRecord object related to this TblStaff
		/// 
		/// </summary>
		public SweetSoft.APEM.DataAccess.TblDepartment TblDepartment
		{
			get { return SweetSoft.APEM.DataAccess.TblDepartment.FetchByID(this.DepartmentID); }
			set { SetColumnValue("DepartmentID", value.DepartmentID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varStaffNo,string varFirstName,string varLastName,string varTelNumber,string varEmail,string varAddress,short? varDepartmentID,bool varHasAccount,bool varIsObsolete)
		{
			TblStaff item = new TblStaff();
			
			item.StaffNo = varStaffNo;
			
			item.FirstName = varFirstName;
			
			item.LastName = varLastName;
			
			item.TelNumber = varTelNumber;
			
			item.Email = varEmail;
			
			item.Address = varAddress;
			
			item.DepartmentID = varDepartmentID;
			
			item.HasAccount = varHasAccount;
			
			item.IsObsolete = varIsObsolete;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varStaffID,string varStaffNo,string varFirstName,string varLastName,string varTelNumber,string varEmail,string varAddress,short? varDepartmentID,bool varHasAccount,bool varIsObsolete)
		{
			TblStaff item = new TblStaff();
			
				item.StaffID = varStaffID;
			
				item.StaffNo = varStaffNo;
			
				item.FirstName = varFirstName;
			
				item.LastName = varLastName;
			
				item.TelNumber = varTelNumber;
			
				item.Email = varEmail;
			
				item.Address = varAddress;
			
				item.DepartmentID = varDepartmentID;
			
				item.HasAccount = varHasAccount;
			
				item.IsObsolete = varIsObsolete;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn StaffIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn StaffNoColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn FirstNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn LastNameColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn TelNumberColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn EmailColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn AddressColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DepartmentIDColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn HasAccountColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn IsObsoleteColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string StaffID = @"StaffID";
			 public static string StaffNo = @"StaffNo";
			 public static string FirstName = @"FirstName";
			 public static string LastName = @"LastName";
			 public static string TelNumber = @"TelNumber";
			 public static string Email = @"Email";
			 public static string Address = @"Address";
			 public static string DepartmentID = @"DepartmentID";
			 public static string HasAccount = @"HasAccount";
			 public static string IsObsolete = @"IsObsolete";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
                if (colTblJobRecords != null)
                {
                    foreach (SweetSoft.APEM.DataAccess.TblJob item in colTblJobRecords)
                    {
                        if (item.SalesRepID != StaffID)
                        {
                            item.SalesRepID = StaffID;
                        }
                    }
               }
		
                if (colTblJobRecordsFromTblStaff != null)
                {
                    foreach (SweetSoft.APEM.DataAccess.TblJob item in colTblJobRecordsFromTblStaff)
                    {
                        if (item.CoordinatorID != StaffID)
                        {
                            item.CoordinatorID = StaffID;
                        }
                    }
               }
		
                if (colTblUserRecords != null)
                {
                    foreach (SweetSoft.APEM.DataAccess.TblUser item in colTblUserRecords)
                    {
                        if (item.UserID != StaffID)
                        {
                            item.UserID = StaffID;
                        }
                    }
               }
		}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
                if (colTblJobRecords != null)
                {
                    colTblJobRecords.SaveAll();
               }
		
                if (colTblJobRecordsFromTblStaff != null)
                {
                    colTblJobRecordsFromTblStaff.SaveAll();
               }
		
                if (colTblUserRecords != null)
                {
                    colTblUserRecords.SaveAll();
               }
		}
        #endregion
	}
}
