using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblCurrencyChangedLog class.
	/// </summary>
    [Serializable]
	public partial class TblCurrencyChangedLogCollection : ActiveList<TblCurrencyChangedLog, TblCurrencyChangedLogCollection>
	{	   
		public TblCurrencyChangedLogCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblCurrencyChangedLogCollection</returns>
		public TblCurrencyChangedLogCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblCurrencyChangedLog o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblCurrencyChangedLog table.
	/// </summary>
	[Serializable]
	public partial class TblCurrencyChangedLog : ActiveRecord<TblCurrencyChangedLog>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblCurrencyChangedLog()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblCurrencyChangedLog(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblCurrencyChangedLog(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblCurrencyChangedLog(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblCurrencyChangedLog", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int64;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarDateChanged = new TableSchema.TableColumn(schema);
				colvarDateChanged.ColumnName = "DateChanged";
				colvarDateChanged.DataType = DbType.DateTime;
				colvarDateChanged.MaxLength = 0;
				colvarDateChanged.AutoIncrement = false;
				colvarDateChanged.IsNullable = true;
				colvarDateChanged.IsPrimaryKey = false;
				colvarDateChanged.IsForeignKey = false;
				colvarDateChanged.IsReadOnly = false;
				colvarDateChanged.DefaultSetting = @"";
				colvarDateChanged.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateChanged);
				
				TableSchema.TableColumn colvarNewName = new TableSchema.TableColumn(schema);
				colvarNewName.ColumnName = "NewName";
				colvarNewName.DataType = DbType.String;
				colvarNewName.MaxLength = 10;
				colvarNewName.AutoIncrement = false;
				colvarNewName.IsNullable = true;
				colvarNewName.IsPrimaryKey = false;
				colvarNewName.IsForeignKey = false;
				colvarNewName.IsReadOnly = false;
				colvarNewName.DefaultSetting = @"";
				colvarNewName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNewName);
				
				TableSchema.TableColumn colvarNewValue = new TableSchema.TableColumn(schema);
				colvarNewValue.ColumnName = "NewValue";
				colvarNewValue.DataType = DbType.String;
				colvarNewValue.MaxLength = 100;
				colvarNewValue.AutoIncrement = false;
				colvarNewValue.IsNullable = true;
				colvarNewValue.IsPrimaryKey = false;
				colvarNewValue.IsForeignKey = false;
				colvarNewValue.IsReadOnly = false;
				colvarNewValue.DefaultSetting = @"";
				colvarNewValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNewValue);
				
				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 100;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = true;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);
				
				TableSchema.TableColumn colvarCurrencyID = new TableSchema.TableColumn(schema);
				colvarCurrencyID.ColumnName = "CurrencyID";
				colvarCurrencyID.DataType = DbType.Int32;
				colvarCurrencyID.MaxLength = 0;
				colvarCurrencyID.AutoIncrement = false;
				colvarCurrencyID.IsNullable = true;
				colvarCurrencyID.IsPrimaryKey = false;
				colvarCurrencyID.IsForeignKey = false;
				colvarCurrencyID.IsReadOnly = false;
				colvarCurrencyID.DefaultSetting = @"";
				colvarCurrencyID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrencyID);
				
				TableSchema.TableColumn colvarStatus = new TableSchema.TableColumn(schema);
				colvarStatus.ColumnName = "Status";
				colvarStatus.DataType = DbType.String;
				colvarStatus.MaxLength = 50;
				colvarStatus.AutoIncrement = false;
				colvarStatus.IsNullable = true;
				colvarStatus.IsPrimaryKey = false;
				colvarStatus.IsForeignKey = false;
				colvarStatus.IsReadOnly = false;
				colvarStatus.DefaultSetting = @"";
				colvarStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatus);
				
				TableSchema.TableColumn colvarNewRMValue = new TableSchema.TableColumn(schema);
				colvarNewRMValue.ColumnName = "NewRMValue";
				colvarNewRMValue.DataType = DbType.String;
				colvarNewRMValue.MaxLength = 50;
				colvarNewRMValue.AutoIncrement = false;
				colvarNewRMValue.IsNullable = true;
				colvarNewRMValue.IsPrimaryKey = false;
				colvarNewRMValue.IsForeignKey = false;
				colvarNewRMValue.IsReadOnly = false;
				colvarNewRMValue.DefaultSetting = @"";
				colvarNewRMValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNewRMValue);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("TblCurrencyChangedLog",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public long Id 
		{
			get { return GetColumnValue<long>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("DateChanged")]
		[Bindable(true)]
		public DateTime? DateChanged 
		{
			get { return GetColumnValue<DateTime?>(Columns.DateChanged); }
			set { SetColumnValue(Columns.DateChanged, value); }
		}
		  
		[XmlAttribute("NewName")]
		[Bindable(true)]
		public string NewName 
		{
			get { return GetColumnValue<string>(Columns.NewName); }
			set { SetColumnValue(Columns.NewName, value); }
		}
		  
		[XmlAttribute("NewValue")]
		[Bindable(true)]
		public string NewValue 
		{
			get { return GetColumnValue<string>(Columns.NewValue); }
			set { SetColumnValue(Columns.NewValue, value); }
		}
		  
		[XmlAttribute("ModifiedBy")]
		[Bindable(true)]
		public string ModifiedBy 
		{
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		  
		[XmlAttribute("CurrencyID")]
		[Bindable(true)]
		public int? CurrencyID 
		{
			get { return GetColumnValue<int?>(Columns.CurrencyID); }
			set { SetColumnValue(Columns.CurrencyID, value); }
		}
		  
		[XmlAttribute("Status")]
		[Bindable(true)]
		public string Status 
		{
			get { return GetColumnValue<string>(Columns.Status); }
			set { SetColumnValue(Columns.Status, value); }
		}
		  
		[XmlAttribute("NewRMValue")]
		[Bindable(true)]
		public string NewRMValue 
		{
			get { return GetColumnValue<string>(Columns.NewRMValue); }
			set { SetColumnValue(Columns.NewRMValue, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(DateTime? varDateChanged,string varNewName,string varNewValue,string varModifiedBy,int? varCurrencyID,string varStatus,string varNewRMValue)
		{
			TblCurrencyChangedLog item = new TblCurrencyChangedLog();
			
			item.DateChanged = varDateChanged;
			
			item.NewName = varNewName;
			
			item.NewValue = varNewValue;
			
			item.ModifiedBy = varModifiedBy;
			
			item.CurrencyID = varCurrencyID;
			
			item.Status = varStatus;
			
			item.NewRMValue = varNewRMValue;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varId,DateTime? varDateChanged,string varNewName,string varNewValue,string varModifiedBy,int? varCurrencyID,string varStatus,string varNewRMValue)
		{
			TblCurrencyChangedLog item = new TblCurrencyChangedLog();
			
				item.Id = varId;
			
				item.DateChanged = varDateChanged;
			
				item.NewName = varNewName;
			
				item.NewValue = varNewValue;
			
				item.ModifiedBy = varModifiedBy;
			
				item.CurrencyID = varCurrencyID;
			
				item.Status = varStatus;
			
				item.NewRMValue = varNewRMValue;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn DateChangedColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn NewNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn NewValueColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedByColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CurrencyIDColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn StatusColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn NewRMValueColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string DateChanged = @"DateChanged";
			 public static string NewName = @"NewName";
			 public static string NewValue = @"NewValue";
			 public static string ModifiedBy = @"ModifiedBy";
			 public static string CurrencyID = @"CurrencyID";
			 public static string Status = @"Status";
			 public static string NewRMValue = @"NewRMValue";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
