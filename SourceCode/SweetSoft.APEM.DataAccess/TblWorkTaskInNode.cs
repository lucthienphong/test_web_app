using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblWorkTaskInNode class.
	/// </summary>
    [Serializable]
	public partial class TblWorkTaskInNodeCollection : ActiveList<TblWorkTaskInNode, TblWorkTaskInNodeCollection>
	{	   
		public TblWorkTaskInNodeCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblWorkTaskInNodeCollection</returns>
		public TblWorkTaskInNodeCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblWorkTaskInNode o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblWorkTaskInNode table.
	/// </summary>
	[Serializable]
	public partial class TblWorkTaskInNode : ActiveRecord<TblWorkTaskInNode>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblWorkTaskInNode()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblWorkTaskInNode(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblWorkTaskInNode(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblWorkTaskInNode(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblWorkTaskInNode", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarWorkTaskID = new TableSchema.TableColumn(schema);
				colvarWorkTaskID.ColumnName = "WorkTaskID";
				colvarWorkTaskID.DataType = DbType.Int32;
				colvarWorkTaskID.MaxLength = 0;
				colvarWorkTaskID.AutoIncrement = false;
				colvarWorkTaskID.IsNullable = false;
				colvarWorkTaskID.IsPrimaryKey = false;
				colvarWorkTaskID.IsForeignKey = false;
				colvarWorkTaskID.IsReadOnly = false;
				colvarWorkTaskID.DefaultSetting = @"";
				colvarWorkTaskID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWorkTaskID);
				
				TableSchema.TableColumn colvarNodeID = new TableSchema.TableColumn(schema);
				colvarNodeID.ColumnName = "NodeID";
				colvarNodeID.DataType = DbType.Int32;
				colvarNodeID.MaxLength = 0;
				colvarNodeID.AutoIncrement = false;
				colvarNodeID.IsNullable = false;
				colvarNodeID.IsPrimaryKey = false;
				colvarNodeID.IsForeignKey = false;
				colvarNodeID.IsReadOnly = false;
				colvarNodeID.DefaultSetting = @"";
				colvarNodeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNodeID);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("tblWorkTaskInNode",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("WorkTaskID")]
		[Bindable(true)]
		public int WorkTaskID 
		{
			get { return GetColumnValue<int>(Columns.WorkTaskID); }
			set { SetColumnValue(Columns.WorkTaskID, value); }
		}
		  
		[XmlAttribute("NodeID")]
		[Bindable(true)]
		public int NodeID 
		{
			get { return GetColumnValue<int>(Columns.NodeID); }
			set { SetColumnValue(Columns.NodeID, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		private SweetSoft.APEM.DataAccess.TblWorkFlowNodeCollection colTblWorkFlowNodeRecords;
		public SweetSoft.APEM.DataAccess.TblWorkFlowNodeCollection TblWorkFlowNodeRecords()
		{
			if(colTblWorkFlowNodeRecords == null)
			{
				colTblWorkFlowNodeRecords = new SweetSoft.APEM.DataAccess.TblWorkFlowNodeCollection().Where(TblWorkFlowNode.Columns.WorkTaskID, Id).Load();
				colTblWorkFlowNodeRecords.ListChanged += new ListChangedEventHandler(colTblWorkFlowNodeRecords_ListChanged);
			}
			return colTblWorkFlowNodeRecords;
		}
				
		void colTblWorkFlowNodeRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colTblWorkFlowNodeRecords[e.NewIndex].WorkTaskID = Id;
            }
		}
		#endregion
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varWorkTaskID,int varNodeID)
		{
			TblWorkTaskInNode item = new TblWorkTaskInNode();
			
			item.WorkTaskID = varWorkTaskID;
			
			item.NodeID = varNodeID;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,int varWorkTaskID,int varNodeID)
		{
			TblWorkTaskInNode item = new TblWorkTaskInNode();
			
				item.Id = varId;
			
				item.WorkTaskID = varWorkTaskID;
			
				item.NodeID = varNodeID;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn WorkTaskIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn NodeIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string WorkTaskID = @"WorkTaskID";
			 public static string NodeID = @"NodeID";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
                if (colTblWorkFlowNodeRecords != null)
                {
                    foreach (SweetSoft.APEM.DataAccess.TblWorkFlowNode item in colTblWorkFlowNodeRecords)
                    {
                        if (item.WorkTaskID == null ||item.WorkTaskID != Id)
                        {
                            item.WorkTaskID = Id;
                        }
                    }
               }
		}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
                if (colTblWorkFlowNodeRecords != null)
                {
                    colTblWorkFlowNodeRecords.SaveAll();
               }
		}
        #endregion
	}
}
