using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
    /// <summary>
    /// Controller class for tblCylinder
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TblCylinderController
    {
        // Preload our schema..
        TblCylinder thisSchemaLoad = new TblCylinder();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TblCylinderCollection FetchAll()
        {
            TblCylinderCollection coll = new TblCylinderCollection();
            Query qry = new Query(TblCylinder.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblCylinderCollection FetchByID(object CylinderID)
        {
            TblCylinderCollection coll = new TblCylinderCollection().Where("CylinderID", CylinderID).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblCylinderCollection FetchByQuery(Query qry)
        {
            TblCylinderCollection coll = new TblCylinderCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object CylinderID)
        {
            return (TblCylinder.Delete(CylinderID) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object CylinderID)
        {
            return (TblCylinder.Destroy(CylinderID) == 1);
        }



        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public TblCylinder Insert(TblCylinder obj)
        {
            obj.Save(UserName);
            return obj;
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public TblCylinder Update(TblCylinder obj)
        {
            if (obj.IsNew)
            {
                TblCylinder item = new TblCylinder();
                item.MarkOld();
                item.IsLoaded = true;

                item.CylinderID = obj.CylinderID;

                item.Sequence = obj.Sequence;

                item.CylinderNo = obj.CylinderNo;

                item.CusCylinderID = obj.CusCylinderID;

                item.CusSteelBaseID = obj.CusSteelBaseID;

                item.CylinderBarcode = obj.CylinderBarcode;

                item.SteelBase = obj.SteelBase;

                item.Color = obj.Color;

                item.Protocol = obj.Protocol;

                item.ProductTypeID = obj.ProductTypeID;

                item.ProcessTypeID = obj.ProcessTypeID;

                item.PricingID = obj.PricingID;

                item.CylinderStatusID = obj.CylinderStatusID;

                item.Circumference = obj.Circumference;

                item.FaceWidth = obj.FaceWidth;

                item.Dirameter = obj.Dirameter;

                item.Dept = obj.Dept;

                item.IsPivotCylinder = obj.IsPivotCylinder;

                item.POUnitPrice = obj.POUnitPrice;

                item.POQuantity = obj.POQuantity;

                item.UnitPrice = obj.UnitPrice;

                item.Quantity = obj.Quantity;

                item.TaxID = obj.TaxID;

                item.TaxPercentage = obj.TaxPercentage;

                item.JobID = obj.JobID;

                item.Save(UserName);

                return item;
            }
            else 
            {
                obj.MarkOld();
                obj.IsLoaded = true;
                obj.Save(UserName);

                return obj;
            }
        }
    }
}
