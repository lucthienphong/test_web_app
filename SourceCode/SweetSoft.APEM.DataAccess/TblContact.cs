using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblContact class.
	/// </summary>
    [Serializable]
	public partial class TblContactCollection : ActiveList<TblContact, TblContactCollection>
	{	   
		public TblContactCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblContactCollection</returns>
		public TblContactCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblContact o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblContact table.
	/// </summary>
	[Serializable]
	public partial class TblContact : ActiveRecord<TblContact>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblContact()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblContact(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblContact(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblContact(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblContact", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarContactID = new TableSchema.TableColumn(schema);
				colvarContactID.ColumnName = "ContactID";
				colvarContactID.DataType = DbType.Int32;
				colvarContactID.MaxLength = 0;
				colvarContactID.AutoIncrement = true;
				colvarContactID.IsNullable = false;
				colvarContactID.IsPrimaryKey = true;
				colvarContactID.IsForeignKey = false;
				colvarContactID.IsReadOnly = false;
				colvarContactID.DefaultSetting = @"";
				colvarContactID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContactID);
				
				TableSchema.TableColumn colvarContactName = new TableSchema.TableColumn(schema);
				colvarContactName.ColumnName = "ContactName";
				colvarContactName.DataType = DbType.String;
				colvarContactName.MaxLength = 100;
				colvarContactName.AutoIncrement = false;
				colvarContactName.IsNullable = false;
				colvarContactName.IsPrimaryKey = false;
				colvarContactName.IsForeignKey = false;
				colvarContactName.IsReadOnly = false;
				colvarContactName.DefaultSetting = @"";
				colvarContactName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContactName);
				
				TableSchema.TableColumn colvarHonorific = new TableSchema.TableColumn(schema);
				colvarHonorific.ColumnName = "Honorific";
				colvarHonorific.DataType = DbType.String;
				colvarHonorific.MaxLength = 10;
				colvarHonorific.AutoIncrement = false;
				colvarHonorific.IsNullable = false;
				colvarHonorific.IsPrimaryKey = false;
				colvarHonorific.IsForeignKey = false;
				colvarHonorific.IsReadOnly = false;
				colvarHonorific.DefaultSetting = @"";
				colvarHonorific.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHonorific);
				
				TableSchema.TableColumn colvarDesignation = new TableSchema.TableColumn(schema);
				colvarDesignation.ColumnName = "Designation";
				colvarDesignation.DataType = DbType.String;
				colvarDesignation.MaxLength = 50;
				colvarDesignation.AutoIncrement = false;
				colvarDesignation.IsNullable = false;
				colvarDesignation.IsPrimaryKey = false;
				colvarDesignation.IsForeignKey = false;
				colvarDesignation.IsReadOnly = false;
				colvarDesignation.DefaultSetting = @"";
				colvarDesignation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDesignation);
				
				TableSchema.TableColumn colvarCustomerID = new TableSchema.TableColumn(schema);
				colvarCustomerID.ColumnName = "CustomerID";
				colvarCustomerID.DataType = DbType.Int32;
				colvarCustomerID.MaxLength = 0;
				colvarCustomerID.AutoIncrement = false;
				colvarCustomerID.IsNullable = false;
				colvarCustomerID.IsPrimaryKey = false;
				colvarCustomerID.IsForeignKey = true;
				colvarCustomerID.IsReadOnly = false;
				colvarCustomerID.DefaultSetting = @"";
				
					colvarCustomerID.ForeignKeyTableName = "tblCustomer";
				schema.Columns.Add(colvarCustomerID);
				
				TableSchema.TableColumn colvarTel = new TableSchema.TableColumn(schema);
				colvarTel.ColumnName = "Tel";
				colvarTel.DataType = DbType.String;
				colvarTel.MaxLength = 20;
				colvarTel.AutoIncrement = false;
				colvarTel.IsNullable = true;
				colvarTel.IsPrimaryKey = false;
				colvarTel.IsForeignKey = false;
				colvarTel.IsReadOnly = false;
				colvarTel.DefaultSetting = @"";
				colvarTel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTel);
				
				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.String;
				colvarEmail.MaxLength = 200;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("tblContact",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ContactID")]
		[Bindable(true)]
		public int ContactID 
		{
			get { return GetColumnValue<int>(Columns.ContactID); }
			set { SetColumnValue(Columns.ContactID, value); }
		}
		  
		[XmlAttribute("ContactName")]
		[Bindable(true)]
		public string ContactName 
		{
			get { return GetColumnValue<string>(Columns.ContactName); }
			set { SetColumnValue(Columns.ContactName, value); }
		}
		  
		[XmlAttribute("Honorific")]
		[Bindable(true)]
		public string Honorific 
		{
			get { return GetColumnValue<string>(Columns.Honorific); }
			set { SetColumnValue(Columns.Honorific, value); }
		}
		  
		[XmlAttribute("Designation")]
		[Bindable(true)]
		public string Designation 
		{
			get { return GetColumnValue<string>(Columns.Designation); }
			set { SetColumnValue(Columns.Designation, value); }
		}
		  
		[XmlAttribute("CustomerID")]
		[Bindable(true)]
		public int CustomerID 
		{
			get { return GetColumnValue<int>(Columns.CustomerID); }
			set { SetColumnValue(Columns.CustomerID, value); }
		}
		  
		[XmlAttribute("Tel")]
		[Bindable(true)]
		public string Tel 
		{
			get { return GetColumnValue<string>(Columns.Tel); }
			set { SetColumnValue(Columns.Tel, value); }
		}
		  
		[XmlAttribute("Email")]
		[Bindable(true)]
		public string Email 
		{
			get { return GetColumnValue<string>(Columns.Email); }
			set { SetColumnValue(Columns.Email, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		private SweetSoft.APEM.DataAccess.TblJobCollection colTblJobRecords;
		public SweetSoft.APEM.DataAccess.TblJobCollection TblJobRecords()
		{
			if(colTblJobRecords == null)
			{
				colTblJobRecords = new SweetSoft.APEM.DataAccess.TblJobCollection().Where(TblJob.Columns.ContactPersonID, ContactID).Load();
				colTblJobRecords.ListChanged += new ListChangedEventHandler(colTblJobRecords_ListChanged);
			}
			return colTblJobRecords;
		}
				
		void colTblJobRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colTblJobRecords[e.NewIndex].ContactPersonID = ContactID;
            }
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblCustomer ActiveRecord object related to this TblContact
		/// 
		/// </summary>
		public SweetSoft.APEM.DataAccess.TblCustomer TblCustomer
		{
			get { return SweetSoft.APEM.DataAccess.TblCustomer.FetchByID(this.CustomerID); }
			set { SetColumnValue("CustomerID", value.CustomerID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varContactName,string varHonorific,string varDesignation,int varCustomerID,string varTel,string varEmail)
		{
			TblContact item = new TblContact();
			
			item.ContactName = varContactName;
			
			item.Honorific = varHonorific;
			
			item.Designation = varDesignation;
			
			item.CustomerID = varCustomerID;
			
			item.Tel = varTel;
			
			item.Email = varEmail;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varContactID,string varContactName,string varHonorific,string varDesignation,int varCustomerID,string varTel,string varEmail)
		{
			TblContact item = new TblContact();
			
				item.ContactID = varContactID;
			
				item.ContactName = varContactName;
			
				item.Honorific = varHonorific;
			
				item.Designation = varDesignation;
			
				item.CustomerID = varCustomerID;
			
				item.Tel = varTel;
			
				item.Email = varEmail;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ContactIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ContactNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn HonorificColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DesignationColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomerIDColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn TelColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn EmailColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ContactID = @"ContactID";
			 public static string ContactName = @"ContactName";
			 public static string Honorific = @"Honorific";
			 public static string Designation = @"Designation";
			 public static string CustomerID = @"CustomerID";
			 public static string Tel = @"Tel";
			 public static string Email = @"Email";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
                if (colTblJobRecords != null)
                {
                    foreach (SweetSoft.APEM.DataAccess.TblJob item in colTblJobRecords)
                    {
                        if (item.ContactPersonID != ContactID)
                        {
                            item.ContactPersonID = ContactID;
                        }
                    }
               }
		}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
                if (colTblJobRecords != null)
                {
                    colTblJobRecords.SaveAll();
               }
		}
        #endregion
	}
}
