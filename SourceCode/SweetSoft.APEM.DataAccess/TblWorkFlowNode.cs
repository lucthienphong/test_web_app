using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblWorkFlowNode class.
	/// </summary>
    [Serializable]
	public partial class TblWorkFlowNodeCollection : ActiveList<TblWorkFlowNode, TblWorkFlowNodeCollection>
	{	   
		public TblWorkFlowNodeCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblWorkFlowNodeCollection</returns>
		public TblWorkFlowNodeCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblWorkFlowNode o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblWorkFlowNode table.
	/// </summary>
	[Serializable]
	public partial class TblWorkFlowNode : ActiveRecord<TblWorkFlowNode>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblWorkFlowNode()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblWorkFlowNode(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblWorkFlowNode(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblWorkFlowNode(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblWorkFlowNode", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarDepartmentID = new TableSchema.TableColumn(schema);
				colvarDepartmentID.ColumnName = "DepartmentID";
				colvarDepartmentID.DataType = DbType.Int16;
				colvarDepartmentID.MaxLength = 0;
				colvarDepartmentID.AutoIncrement = false;
				colvarDepartmentID.IsNullable = false;
				colvarDepartmentID.IsPrimaryKey = false;
				colvarDepartmentID.IsForeignKey = true;
				colvarDepartmentID.IsReadOnly = false;
				colvarDepartmentID.DefaultSetting = @"";
				
					colvarDepartmentID.ForeignKeyTableName = "tblDepartment";
				schema.Columns.Add(colvarDepartmentID);
				
				TableSchema.TableColumn colvarWorkTaskID = new TableSchema.TableColumn(schema);
				colvarWorkTaskID.ColumnName = "WorkTaskID";
				colvarWorkTaskID.DataType = DbType.Int32;
				colvarWorkTaskID.MaxLength = 0;
				colvarWorkTaskID.AutoIncrement = false;
				colvarWorkTaskID.IsNullable = true;
				colvarWorkTaskID.IsPrimaryKey = false;
				colvarWorkTaskID.IsForeignKey = true;
				colvarWorkTaskID.IsReadOnly = false;
				colvarWorkTaskID.DefaultSetting = @"";
				
					colvarWorkTaskID.ForeignKeyTableName = "tblWorkTaskInNode";
				schema.Columns.Add(colvarWorkTaskID);
				
				TableSchema.TableColumn colvarWorkFlowID = new TableSchema.TableColumn(schema);
				colvarWorkFlowID.ColumnName = "WorkFlowID";
				colvarWorkFlowID.DataType = DbType.Int32;
				colvarWorkFlowID.MaxLength = 0;
				colvarWorkFlowID.AutoIncrement = false;
				colvarWorkFlowID.IsNullable = true;
				colvarWorkFlowID.IsPrimaryKey = false;
				colvarWorkFlowID.IsForeignKey = true;
				colvarWorkFlowID.IsReadOnly = false;
				colvarWorkFlowID.DefaultSetting = @"";
				
					colvarWorkFlowID.ForeignKeyTableName = "tblWorkFlow";
				schema.Columns.Add(colvarWorkFlowID);
				
				TableSchema.TableColumn colvarNodeType = new TableSchema.TableColumn(schema);
				colvarNodeType.ColumnName = "NodeType";
				colvarNodeType.DataType = DbType.AnsiString;
				colvarNodeType.MaxLength = 50;
				colvarNodeType.AutoIncrement = false;
				colvarNodeType.IsNullable = true;
				colvarNodeType.IsPrimaryKey = false;
				colvarNodeType.IsForeignKey = false;
				colvarNodeType.IsReadOnly = false;
				colvarNodeType.DefaultSetting = @"";
				colvarNodeType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNodeType);
				
				TableSchema.TableColumn colvarWorkFlowListFromConnection = new TableSchema.TableColumn(schema);
				colvarWorkFlowListFromConnection.ColumnName = "WorkFlowListFromConnection";
				colvarWorkFlowListFromConnection.DataType = DbType.AnsiString;
				colvarWorkFlowListFromConnection.MaxLength = 255;
				colvarWorkFlowListFromConnection.AutoIncrement = false;
				colvarWorkFlowListFromConnection.IsNullable = true;
				colvarWorkFlowListFromConnection.IsPrimaryKey = false;
				colvarWorkFlowListFromConnection.IsForeignKey = false;
				colvarWorkFlowListFromConnection.IsReadOnly = false;
				colvarWorkFlowListFromConnection.DefaultSetting = @"";
				colvarWorkFlowListFromConnection.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWorkFlowListFromConnection);
				
				TableSchema.TableColumn colvarWorkFlowListToConnection = new TableSchema.TableColumn(schema);
				colvarWorkFlowListToConnection.ColumnName = "WorkFlowListToConnection";
				colvarWorkFlowListToConnection.DataType = DbType.AnsiString;
				colvarWorkFlowListToConnection.MaxLength = 255;
				colvarWorkFlowListToConnection.AutoIncrement = false;
				colvarWorkFlowListToConnection.IsNullable = true;
				colvarWorkFlowListToConnection.IsPrimaryKey = false;
				colvarWorkFlowListToConnection.IsForeignKey = false;
				colvarWorkFlowListToConnection.IsReadOnly = false;
				colvarWorkFlowListToConnection.DefaultSetting = @"";
				colvarWorkFlowListToConnection.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWorkFlowListToConnection);
				
				TableSchema.TableColumn colvarWorkFlowIsSend = new TableSchema.TableColumn(schema);
				colvarWorkFlowIsSend.ColumnName = "WorkFlowIsSend";
				colvarWorkFlowIsSend.DataType = DbType.Boolean;
				colvarWorkFlowIsSend.MaxLength = 0;
				colvarWorkFlowIsSend.AutoIncrement = false;
				colvarWorkFlowIsSend.IsNullable = true;
				colvarWorkFlowIsSend.IsPrimaryKey = false;
				colvarWorkFlowIsSend.IsForeignKey = false;
				colvarWorkFlowIsSend.IsReadOnly = false;
				colvarWorkFlowIsSend.DefaultSetting = @"";
				colvarWorkFlowIsSend.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWorkFlowIsSend);
				
				TableSchema.TableColumn colvarWorkFlowIsRoot = new TableSchema.TableColumn(schema);
				colvarWorkFlowIsRoot.ColumnName = "WorkFlowIsRoot";
				colvarWorkFlowIsRoot.DataType = DbType.Boolean;
				colvarWorkFlowIsRoot.MaxLength = 0;
				colvarWorkFlowIsRoot.AutoIncrement = false;
				colvarWorkFlowIsRoot.IsNullable = true;
				colvarWorkFlowIsRoot.IsPrimaryKey = false;
				colvarWorkFlowIsRoot.IsForeignKey = false;
				colvarWorkFlowIsRoot.IsReadOnly = false;
				colvarWorkFlowIsRoot.DefaultSetting = @"";
				colvarWorkFlowIsRoot.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWorkFlowIsRoot);
				
				TableSchema.TableColumn colvarWorkFlowIsConnectItseft = new TableSchema.TableColumn(schema);
				colvarWorkFlowIsConnectItseft.ColumnName = "WorkFlowIsConnectItseft";
				colvarWorkFlowIsConnectItseft.DataType = DbType.Boolean;
				colvarWorkFlowIsConnectItseft.MaxLength = 0;
				colvarWorkFlowIsConnectItseft.AutoIncrement = false;
				colvarWorkFlowIsConnectItseft.IsNullable = true;
				colvarWorkFlowIsConnectItseft.IsPrimaryKey = false;
				colvarWorkFlowIsConnectItseft.IsForeignKey = false;
				colvarWorkFlowIsConnectItseft.IsReadOnly = false;
				colvarWorkFlowIsConnectItseft.DefaultSetting = @"";
				colvarWorkFlowIsConnectItseft.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWorkFlowIsConnectItseft);
				
				TableSchema.TableColumn colvarWorkFlowDataGraphID = new TableSchema.TableColumn(schema);
				colvarWorkFlowDataGraphID.ColumnName = "WorkFlowDataGraphID";
				colvarWorkFlowDataGraphID.DataType = DbType.AnsiString;
				colvarWorkFlowDataGraphID.MaxLength = 50;
				colvarWorkFlowDataGraphID.AutoIncrement = false;
				colvarWorkFlowDataGraphID.IsNullable = true;
				colvarWorkFlowDataGraphID.IsPrimaryKey = false;
				colvarWorkFlowDataGraphID.IsForeignKey = false;
				colvarWorkFlowDataGraphID.IsReadOnly = false;
				colvarWorkFlowDataGraphID.DefaultSetting = @"";
				colvarWorkFlowDataGraphID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWorkFlowDataGraphID);
				
				TableSchema.TableColumn colvarWorkFlowCode = new TableSchema.TableColumn(schema);
				colvarWorkFlowCode.ColumnName = "WorkFlowCode";
				colvarWorkFlowCode.DataType = DbType.AnsiString;
				colvarWorkFlowCode.MaxLength = 50;
				colvarWorkFlowCode.AutoIncrement = false;
				colvarWorkFlowCode.IsNullable = true;
				colvarWorkFlowCode.IsPrimaryKey = false;
				colvarWorkFlowCode.IsForeignKey = false;
				colvarWorkFlowCode.IsReadOnly = false;
				colvarWorkFlowCode.DefaultSetting = @"";
				colvarWorkFlowCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWorkFlowCode);
				
				TableSchema.TableColumn colvarMachineryProduceTypeID = new TableSchema.TableColumn(schema);
				colvarMachineryProduceTypeID.ColumnName = "MachineryProduceTypeID";
				colvarMachineryProduceTypeID.DataType = DbType.Int32;
				colvarMachineryProduceTypeID.MaxLength = 0;
				colvarMachineryProduceTypeID.AutoIncrement = false;
				colvarMachineryProduceTypeID.IsNullable = true;
				colvarMachineryProduceTypeID.IsPrimaryKey = false;
				colvarMachineryProduceTypeID.IsForeignKey = true;
				colvarMachineryProduceTypeID.IsReadOnly = false;
				colvarMachineryProduceTypeID.DefaultSetting = @"";
				
					colvarMachineryProduceTypeID.ForeignKeyTableName = "tblMachinaryProduceType";
				schema.Columns.Add(colvarMachineryProduceTypeID);
				
				TableSchema.TableColumn colvarWorkFlowIDInXML = new TableSchema.TableColumn(schema);
				colvarWorkFlowIDInXML.ColumnName = "WorkFlowIDInXML";
				colvarWorkFlowIDInXML.DataType = DbType.Int32;
				colvarWorkFlowIDInXML.MaxLength = 0;
				colvarWorkFlowIDInXML.AutoIncrement = false;
				colvarWorkFlowIDInXML.IsNullable = true;
				colvarWorkFlowIDInXML.IsPrimaryKey = false;
				colvarWorkFlowIDInXML.IsForeignKey = false;
				colvarWorkFlowIDInXML.IsReadOnly = false;
				colvarWorkFlowIDInXML.DefaultSetting = @"";
				colvarWorkFlowIDInXML.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWorkFlowIDInXML);
				
				TableSchema.TableColumn colvarTitle = new TableSchema.TableColumn(schema);
				colvarTitle.ColumnName = "Title";
				colvarTitle.DataType = DbType.String;
				colvarTitle.MaxLength = 255;
				colvarTitle.AutoIncrement = false;
				colvarTitle.IsNullable = true;
				colvarTitle.IsPrimaryKey = false;
				colvarTitle.IsForeignKey = false;
				colvarTitle.IsReadOnly = false;
				colvarTitle.DefaultSetting = @"";
				colvarTitle.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTitle);
				
				TableSchema.TableColumn colvarUpdatePropertiesValues = new TableSchema.TableColumn(schema);
				colvarUpdatePropertiesValues.ColumnName = "UpdatePropertiesValues";
				colvarUpdatePropertiesValues.DataType = DbType.Boolean;
				colvarUpdatePropertiesValues.MaxLength = 0;
				colvarUpdatePropertiesValues.AutoIncrement = false;
				colvarUpdatePropertiesValues.IsNullable = true;
				colvarUpdatePropertiesValues.IsPrimaryKey = false;
				colvarUpdatePropertiesValues.IsForeignKey = false;
				colvarUpdatePropertiesValues.IsReadOnly = false;
				colvarUpdatePropertiesValues.DefaultSetting = @"";
				colvarUpdatePropertiesValues.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpdatePropertiesValues);
				
				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 100;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 100;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = true;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("tblWorkFlowNode",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("DepartmentID")]
		[Bindable(true)]
		public short DepartmentID 
		{
			get { return GetColumnValue<short>(Columns.DepartmentID); }
			set { SetColumnValue(Columns.DepartmentID, value); }
		}
		  
		[XmlAttribute("WorkTaskID")]
		[Bindable(true)]
		public int? WorkTaskID 
		{
			get { return GetColumnValue<int?>(Columns.WorkTaskID); }
			set { SetColumnValue(Columns.WorkTaskID, value); }
		}
		  
		[XmlAttribute("WorkFlowID")]
		[Bindable(true)]
		public int? WorkFlowID 
		{
			get { return GetColumnValue<int?>(Columns.WorkFlowID); }
			set { SetColumnValue(Columns.WorkFlowID, value); }
		}
		  
		[XmlAttribute("NodeType")]
		[Bindable(true)]
		public string NodeType 
		{
			get { return GetColumnValue<string>(Columns.NodeType); }
			set { SetColumnValue(Columns.NodeType, value); }
		}
		  
		[XmlAttribute("WorkFlowListFromConnection")]
		[Bindable(true)]
		public string WorkFlowListFromConnection 
		{
			get { return GetColumnValue<string>(Columns.WorkFlowListFromConnection); }
			set { SetColumnValue(Columns.WorkFlowListFromConnection, value); }
		}
		  
		[XmlAttribute("WorkFlowListToConnection")]
		[Bindable(true)]
		public string WorkFlowListToConnection 
		{
			get { return GetColumnValue<string>(Columns.WorkFlowListToConnection); }
			set { SetColumnValue(Columns.WorkFlowListToConnection, value); }
		}
		  
		[XmlAttribute("WorkFlowIsSend")]
		[Bindable(true)]
		public bool? WorkFlowIsSend 
		{
			get { return GetColumnValue<bool?>(Columns.WorkFlowIsSend); }
			set { SetColumnValue(Columns.WorkFlowIsSend, value); }
		}
		  
		[XmlAttribute("WorkFlowIsRoot")]
		[Bindable(true)]
		public bool? WorkFlowIsRoot 
		{
			get { return GetColumnValue<bool?>(Columns.WorkFlowIsRoot); }
			set { SetColumnValue(Columns.WorkFlowIsRoot, value); }
		}
		  
		[XmlAttribute("WorkFlowIsConnectItseft")]
		[Bindable(true)]
		public bool? WorkFlowIsConnectItseft 
		{
			get { return GetColumnValue<bool?>(Columns.WorkFlowIsConnectItseft); }
			set { SetColumnValue(Columns.WorkFlowIsConnectItseft, value); }
		}
		  
		[XmlAttribute("WorkFlowDataGraphID")]
		[Bindable(true)]
		public string WorkFlowDataGraphID 
		{
			get { return GetColumnValue<string>(Columns.WorkFlowDataGraphID); }
			set { SetColumnValue(Columns.WorkFlowDataGraphID, value); }
		}
		  
		[XmlAttribute("WorkFlowCode")]
		[Bindable(true)]
		public string WorkFlowCode 
		{
			get { return GetColumnValue<string>(Columns.WorkFlowCode); }
			set { SetColumnValue(Columns.WorkFlowCode, value); }
		}
		  
		[XmlAttribute("MachineryProduceTypeID")]
		[Bindable(true)]
		public int? MachineryProduceTypeID 
		{
			get { return GetColumnValue<int?>(Columns.MachineryProduceTypeID); }
			set { SetColumnValue(Columns.MachineryProduceTypeID, value); }
		}
		  
		[XmlAttribute("WorkFlowIDInXML")]
		[Bindable(true)]
		public int? WorkFlowIDInXML 
		{
			get { return GetColumnValue<int?>(Columns.WorkFlowIDInXML); }
			set { SetColumnValue(Columns.WorkFlowIDInXML, value); }
		}
		  
		[XmlAttribute("Title")]
		[Bindable(true)]
		public string Title 
		{
			get { return GetColumnValue<string>(Columns.Title); }
			set { SetColumnValue(Columns.Title, value); }
		}
		  
		[XmlAttribute("UpdatePropertiesValues")]
		[Bindable(true)]
		public bool? UpdatePropertiesValues 
		{
			get { return GetColumnValue<bool?>(Columns.UpdatePropertiesValues); }
			set { SetColumnValue(Columns.UpdatePropertiesValues, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public string CreatedBy 
		{
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedBy")]
		[Bindable(true)]
		public string ModifiedBy 
		{
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		private SweetSoft.APEM.DataAccess.TblWorkFlowLineCollection colTblWorkFlowLineRecords;
		public SweetSoft.APEM.DataAccess.TblWorkFlowLineCollection TblWorkFlowLineRecords()
		{
			if(colTblWorkFlowLineRecords == null)
			{
				colTblWorkFlowLineRecords = new SweetSoft.APEM.DataAccess.TblWorkFlowLineCollection().Where(TblWorkFlowLine.Columns.Node1ID, Id).Load();
				colTblWorkFlowLineRecords.ListChanged += new ListChangedEventHandler(colTblWorkFlowLineRecords_ListChanged);
			}
			return colTblWorkFlowLineRecords;
		}
				
		void colTblWorkFlowLineRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colTblWorkFlowLineRecords[e.NewIndex].Node1ID = Id;
            }
		}
		private SweetSoft.APEM.DataAccess.TblWorkFlowLineCollection colTblWorkFlowLineRecordsFromTblWorkFlowNode;
		public SweetSoft.APEM.DataAccess.TblWorkFlowLineCollection TblWorkFlowLineRecordsFromTblWorkFlowNode()
		{
			if(colTblWorkFlowLineRecordsFromTblWorkFlowNode == null)
			{
				colTblWorkFlowLineRecordsFromTblWorkFlowNode = new SweetSoft.APEM.DataAccess.TblWorkFlowLineCollection().Where(TblWorkFlowLine.Columns.Node2ID, Id).Load();
				colTblWorkFlowLineRecordsFromTblWorkFlowNode.ListChanged += new ListChangedEventHandler(colTblWorkFlowLineRecordsFromTblWorkFlowNode_ListChanged);
			}
			return colTblWorkFlowLineRecordsFromTblWorkFlowNode;
		}
				
		void colTblWorkFlowLineRecordsFromTblWorkFlowNode_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colTblWorkFlowLineRecordsFromTblWorkFlowNode[e.NewIndex].Node2ID = Id;
            }
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblDepartment ActiveRecord object related to this TblWorkFlowNode
		/// 
		/// </summary>
		public SweetSoft.APEM.DataAccess.TblDepartment TblDepartment
		{
			get { return SweetSoft.APEM.DataAccess.TblDepartment.FetchByID(this.DepartmentID); }
			set { SetColumnValue("DepartmentID", value.DepartmentID); }
		}
		
		
		/// <summary>
		/// Returns a TblWorkFlow ActiveRecord object related to this TblWorkFlowNode
		/// 
		/// </summary>
		public SweetSoft.APEM.DataAccess.TblWorkFlow TblWorkFlow
		{
			get { return SweetSoft.APEM.DataAccess.TblWorkFlow.FetchByID(this.WorkFlowID); }
			set { SetColumnValue("WorkFlowID", value.Id); }
		}
		
		
		/// <summary>
		/// Returns a TblWorkTask ActiveRecord object related to this TblWorkFlowNode
		/// 
		/// </summary>
		public SweetSoft.APEM.DataAccess.TblWorkTask TblWorkTask
		{
			get { return SweetSoft.APEM.DataAccess.TblWorkTask.FetchByID(this.WorkTaskID); }
			set { SetColumnValue("WorkTaskID", value.Id); }
		}
		
		
		/// <summary>
		/// Returns a TblWorkTaskInNode ActiveRecord object related to this TblWorkFlowNode
		/// 
		/// </summary>
		public SweetSoft.APEM.DataAccess.TblWorkTaskInNode TblWorkTaskInNode
		{
			get { return SweetSoft.APEM.DataAccess.TblWorkTaskInNode.FetchByID(this.WorkTaskID); }
			set { SetColumnValue("WorkTaskID", value.Id); }
		}
		
		
		/// <summary>
		/// Returns a TblMachinaryProduceType ActiveRecord object related to this TblWorkFlowNode
		/// 
		/// </summary>
		public SweetSoft.APEM.DataAccess.TblMachinaryProduceType TblMachinaryProduceType
		{
			get { return SweetSoft.APEM.DataAccess.TblMachinaryProduceType.FetchByID(this.MachineryProduceTypeID); }
			set { SetColumnValue("MachineryProduceTypeID", value.Id); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(short varDepartmentID,int? varWorkTaskID,int? varWorkFlowID,string varNodeType,string varWorkFlowListFromConnection,string varWorkFlowListToConnection,bool? varWorkFlowIsSend,bool? varWorkFlowIsRoot,bool? varWorkFlowIsConnectItseft,string varWorkFlowDataGraphID,string varWorkFlowCode,int? varMachineryProduceTypeID,int? varWorkFlowIDInXML,string varTitle,bool? varUpdatePropertiesValues,string varCreatedBy,DateTime? varCreatedOn,string varModifiedBy,DateTime? varModifiedOn)
		{
			TblWorkFlowNode item = new TblWorkFlowNode();
			
			item.DepartmentID = varDepartmentID;
			
			item.WorkTaskID = varWorkTaskID;
			
			item.WorkFlowID = varWorkFlowID;
			
			item.NodeType = varNodeType;
			
			item.WorkFlowListFromConnection = varWorkFlowListFromConnection;
			
			item.WorkFlowListToConnection = varWorkFlowListToConnection;
			
			item.WorkFlowIsSend = varWorkFlowIsSend;
			
			item.WorkFlowIsRoot = varWorkFlowIsRoot;
			
			item.WorkFlowIsConnectItseft = varWorkFlowIsConnectItseft;
			
			item.WorkFlowDataGraphID = varWorkFlowDataGraphID;
			
			item.WorkFlowCode = varWorkFlowCode;
			
			item.MachineryProduceTypeID = varMachineryProduceTypeID;
			
			item.WorkFlowIDInXML = varWorkFlowIDInXML;
			
			item.Title = varTitle;
			
			item.UpdatePropertiesValues = varUpdatePropertiesValues;
			
			item.CreatedBy = varCreatedBy;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedBy = varModifiedBy;
			
			item.ModifiedOn = varModifiedOn;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,short varDepartmentID,int? varWorkTaskID,int? varWorkFlowID,string varNodeType,string varWorkFlowListFromConnection,string varWorkFlowListToConnection,bool? varWorkFlowIsSend,bool? varWorkFlowIsRoot,bool? varWorkFlowIsConnectItseft,string varWorkFlowDataGraphID,string varWorkFlowCode,int? varMachineryProduceTypeID,int? varWorkFlowIDInXML,string varTitle,bool? varUpdatePropertiesValues,string varCreatedBy,DateTime? varCreatedOn,string varModifiedBy,DateTime? varModifiedOn)
		{
			TblWorkFlowNode item = new TblWorkFlowNode();
			
				item.Id = varId;
			
				item.DepartmentID = varDepartmentID;
			
				item.WorkTaskID = varWorkTaskID;
			
				item.WorkFlowID = varWorkFlowID;
			
				item.NodeType = varNodeType;
			
				item.WorkFlowListFromConnection = varWorkFlowListFromConnection;
			
				item.WorkFlowListToConnection = varWorkFlowListToConnection;
			
				item.WorkFlowIsSend = varWorkFlowIsSend;
			
				item.WorkFlowIsRoot = varWorkFlowIsRoot;
			
				item.WorkFlowIsConnectItseft = varWorkFlowIsConnectItseft;
			
				item.WorkFlowDataGraphID = varWorkFlowDataGraphID;
			
				item.WorkFlowCode = varWorkFlowCode;
			
				item.MachineryProduceTypeID = varMachineryProduceTypeID;
			
				item.WorkFlowIDInXML = varWorkFlowIDInXML;
			
				item.Title = varTitle;
			
				item.UpdatePropertiesValues = varUpdatePropertiesValues;
			
				item.CreatedBy = varCreatedBy;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedBy = varModifiedBy;
			
				item.ModifiedOn = varModifiedOn;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn DepartmentIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn WorkTaskIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn WorkFlowIDColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn NodeTypeColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn WorkFlowListFromConnectionColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn WorkFlowListToConnectionColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn WorkFlowIsSendColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn WorkFlowIsRootColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn WorkFlowIsConnectItseftColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn WorkFlowDataGraphIDColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn WorkFlowCodeColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn MachineryProduceTypeIDColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn WorkFlowIDInXMLColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn TitleColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn UpdatePropertiesValuesColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedByColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string DepartmentID = @"DepartmentID";
			 public static string WorkTaskID = @"WorkTaskID";
			 public static string WorkFlowID = @"WorkFlowID";
			 public static string NodeType = @"NodeType";
			 public static string WorkFlowListFromConnection = @"WorkFlowListFromConnection";
			 public static string WorkFlowListToConnection = @"WorkFlowListToConnection";
			 public static string WorkFlowIsSend = @"WorkFlowIsSend";
			 public static string WorkFlowIsRoot = @"WorkFlowIsRoot";
			 public static string WorkFlowIsConnectItseft = @"WorkFlowIsConnectItseft";
			 public static string WorkFlowDataGraphID = @"WorkFlowDataGraphID";
			 public static string WorkFlowCode = @"WorkFlowCode";
			 public static string MachineryProduceTypeID = @"MachineryProduceTypeID";
			 public static string WorkFlowIDInXML = @"WorkFlowIDInXML";
			 public static string Title = @"Title";
			 public static string UpdatePropertiesValues = @"UpdatePropertiesValues";
			 public static string CreatedBy = @"CreatedBy";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedBy = @"ModifiedBy";
			 public static string ModifiedOn = @"ModifiedOn";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
                if (colTblWorkFlowLineRecords != null)
                {
                    foreach (SweetSoft.APEM.DataAccess.TblWorkFlowLine item in colTblWorkFlowLineRecords)
                    {
                        if (item.Node1ID == null ||item.Node1ID != Id)
                        {
                            item.Node1ID = Id;
                        }
                    }
               }
		
                if (colTblWorkFlowLineRecordsFromTblWorkFlowNode != null)
                {
                    foreach (SweetSoft.APEM.DataAccess.TblWorkFlowLine item in colTblWorkFlowLineRecordsFromTblWorkFlowNode)
                    {
                        if (item.Node2ID == null ||item.Node2ID != Id)
                        {
                            item.Node2ID = Id;
                        }
                    }
               }
		}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
                if (colTblWorkFlowLineRecords != null)
                {
                    colTblWorkFlowLineRecords.SaveAll();
               }
		
                if (colTblWorkFlowLineRecordsFromTblWorkFlowNode != null)
                {
                    colTblWorkFlowLineRecordsFromTblWorkFlowNode.SaveAll();
               }
		}
        #endregion
	}
}
