using System;
using System.Text;
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Xml;
using System.Xml.Serialization;
using SubSonic;
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
    /// <summary>
    /// Strongly-typed collection for the TblJobProcess class.
    /// </summary>
    [Serializable]
    public partial class TblJobProcessCollection : ActiveList<TblJobProcess, TblJobProcessCollection>
    {
        public TblJobProcessCollection() { }

        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblJobProcessCollection</returns>
        public TblJobProcessCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblJobProcess o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }


    }
    /// <summary>
    /// This is an ActiveRecord class which wraps the tblPurchaseOrder_Cylinder table.
    /// </summary>
    [Serializable]
    public partial class TblJobProcess : ActiveRecord<TblJobProcess>, IActiveRecord
    {
        #region .ctors and Default Settings

        public TblJobProcess()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        private void InitSetDefaults() { SetDefaults(); }

        public TblJobProcess(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public TblJobProcess(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public TblJobProcess(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        protected static void SetSQLProps() { GetTableSchema(); }

        #endregion

        #region Schema and Query Accessor
        public static Query CreateQuery() { return new Query(Schema); }
        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("tblJobProcess", TableType.Table, DataService.GetInstance("DataAcessProvider"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                TableSchema.TableColumn colvarJobID = new TableSchema.TableColumn(schema);
                colvarJobID.ColumnName = "JobID";
                colvarJobID.DataType = DbType.Int32;
                colvarJobID.MaxLength = 0;
                colvarJobID.AutoIncrement = false;
                colvarJobID.IsNullable = false;
                colvarJobID.IsPrimaryKey = true;
                colvarJobID.IsForeignKey = true;
                colvarJobID.IsReadOnly = false;
                colvarJobID.DefaultSetting = @"";

                colvarJobID.ForeignKeyTableName = "tblJob";
                schema.Columns.Add(colvarJobID);


                TableSchema.TableColumn colvarStartedOn = new TableSchema.TableColumn(schema);
                colvarStartedOn.ColumnName = "StartedOn";
                colvarStartedOn.DataType = DbType.DateTime;
                colvarStartedOn.MaxLength = 0;
                colvarStartedOn.AutoIncrement = false;
                colvarStartedOn.IsNullable = true;
                colvarStartedOn.IsPrimaryKey = false;
                colvarStartedOn.IsForeignKey = false;
                colvarStartedOn.IsReadOnly = false;
                colvarStartedOn.DefaultSetting = @"";
                colvarStartedOn.ForeignKeyTableName = "";
                schema.Columns.Add(colvarStartedOn);

                TableSchema.TableColumn colvarStartedBy = new TableSchema.TableColumn(schema);
                colvarStartedBy.ColumnName = "StartedBy";
                colvarStartedBy.DataType = DbType.String;
                colvarStartedBy.MaxLength = 100;
                colvarStartedBy.AutoIncrement = false;
                colvarStartedBy.IsNullable = true;
                colvarStartedBy.IsPrimaryKey = false;
                colvarStartedBy.IsForeignKey = false;
                colvarStartedBy.IsReadOnly = false;
                colvarStartedBy.DefaultSetting = @"";
                colvarStartedBy.ForeignKeyTableName = "";
                schema.Columns.Add(colvarStartedBy);

                TableSchema.TableColumn colvarFinishedOn = new TableSchema.TableColumn(schema);
                colvarFinishedOn.ColumnName = "FinishedOn";
                colvarFinishedOn.DataType = DbType.DateTime;
                colvarFinishedOn.MaxLength = 0;
                colvarFinishedOn.AutoIncrement = false;
                colvarFinishedOn.IsNullable = true;
                colvarFinishedOn.IsPrimaryKey = false;
                colvarFinishedOn.IsForeignKey = false;
                colvarFinishedOn.IsReadOnly = false;
                colvarFinishedOn.DefaultSetting = @"";
                colvarFinishedOn.ForeignKeyTableName = "";
                schema.Columns.Add(colvarFinishedOn);

                TableSchema.TableColumn colvarFinishedBy = new TableSchema.TableColumn(schema);
                colvarFinishedBy.ColumnName = "FinishedBy";
                colvarFinishedBy.DataType = DbType.String;
                colvarFinishedBy.MaxLength = 100;
                colvarFinishedBy.AutoIncrement = false;
                colvarFinishedBy.IsNullable = true;
                colvarFinishedBy.IsPrimaryKey = false;
                colvarFinishedBy.IsForeignKey = false;
                colvarFinishedBy.IsReadOnly = false;
                colvarFinishedBy.DefaultSetting = @"";
                colvarFinishedBy.ForeignKeyTableName = "";
                schema.Columns.Add(colvarFinishedBy);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["DataAcessProvider"].AddSchema("tblJobProcess", schema);
            }
        }
        #endregion

        #region Props

        [XmlAttribute("JobID")]
        [Bindable(true)]
        public int JobID
        {
            get { return GetColumnValue<int>(Columns.JobID); }
            set { SetColumnValue(Columns.JobID, value); }
        }

        [XmlAttribute("StartedOn")]
        [Bindable(true)]
        public DateTime? StartedOn
        {
            get { return GetColumnValue<DateTime?>(Columns.StartedOn); }
            set { SetColumnValue(Columns.StartedOn, value); }
        }

        [XmlAttribute("StartedBy")]
        [Bindable(true)]
        public string StartedBy
        {
            get { return GetColumnValue<string>(Columns.StartedBy); }
            set { SetColumnValue(Columns.StartedBy, value); }
        }

        [XmlAttribute("FinishdOn")]
        [Bindable(true)]
        public DateTime? FinishedOn
        {
            get { return GetColumnValue<DateTime?>(Columns.FinishedOn); }
            set { SetColumnValue(Columns.FinishedOn, value); }
        }

        [XmlAttribute("FinishedBy")]
        [Bindable(true)]
        public string FinishedBy
        {
            get { return GetColumnValue<string>(Columns.FinishedBy); }
            set { SetColumnValue(Columns.FinishedBy, value); }
        }

        #endregion




        #region ForeignKey Properties

        /// <summary>
        /// Returns a TblCylinder ActiveRecord object related to this TblJobProcess
        /// 
        /// </summary>
        public SweetSoft.APEM.DataAccess.TblJob TblJob
        {
            get { return SweetSoft.APEM.DataAccess.TblJob.FetchByID(this.JobID); }
            set { SetColumnValue("JobID", value.JobID); }
        }


        #endregion



        //no ManyToMany tables defined (0)



        #region ObjectDataSource support


        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(int varJobID, string varStartedBy, DateTime? varStartedOn,
            string varFinishedBy, DateTime? varFinishedOn)
        {
            TblJobProcess item = new TblJobProcess();

            item.JobID = varJobID;

            item.StartedBy = varStartedBy;

            item.StartedOn = varStartedOn;

            item.FinishedBy = varFinishedBy;

            item.FinishedOn = varFinishedOn;


            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(int varJobID, string varStartedBy, DateTime? varStartedOn,
            string varFinishedBy, DateTime? varFinishedOn)
        {
            TblJobProcess item = new TblJobProcess();

            item.JobID = varJobID;

            item.StartedBy = varStartedBy;

            item.StartedOn = varStartedOn;

            item.FinishedBy = varFinishedBy;

            item.FinishedOn = varFinishedOn;

            item.IsNew = false;
            
            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }
        #endregion



        #region Typed Columns


        public static TableSchema.TableColumn JobIDColumn
        {
            get { return Schema.Columns[0]; }
        }



        public static TableSchema.TableColumn StartedOnColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn StartedByColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn FinishedOnColumn
        {
            get { return Schema.Columns[3]; }
        }



        public static TableSchema.TableColumn FinishedByColumn
        {
            get { return Schema.Columns[4]; }
        }


        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string JobID = @"JobID";
            public static string StartedOn = @"StartedOn";
            public static string StartedBy = @"StartedBy";
            public static string FinishedOn = @"FinishedOn";
            public static string FinishedBy = @"FinishedBy";

        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion
    }
}
