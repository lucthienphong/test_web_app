using System;
using System.Text;
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Xml;
using System.Xml.Serialization;
using SubSonic;
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
    /// <summary>
    /// Controller class for tblPurchaseOrder_Cylinder
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TblJobProcessController
    {
        // Preload our schema..
        TblJobProcess thisSchemaLoad = new TblJobProcess();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
                if (userName.Length == 0)
                {
                    if (System.Web.HttpContext.Current != null)
                    {
                        userName = System.Web.HttpContext.Current.User.Identity.Name;
                    }
                    else
                    {
                        userName = System.Threading.Thread.CurrentPrincipal.Identity.Name;
                    }
                }
                return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TblJobProcessCollection FetchAll()
        {
            TblJobProcessCollection coll = new TblJobProcessCollection();
            Query qry = new Query(TblJobProcess.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblJobProcessCollection FetchByID(object JobID)
        {
            TblJobProcessCollection coll = new TblJobProcessCollection().Where("JobID", JobID).Load();
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblJobProcessCollection FetchByQuery(Query qry)
        {
            TblJobProcessCollection coll = new TblJobProcessCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object JobID)
        {
            return (TblJobProcess.Delete(JobID) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object JobID)
        {
            return (TblJobProcess.Destroy(JobID) == 1);
        }


        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public TblJobProcess Insert(TblJobProcess item)
        {
            item.Save(UserName);
            return item;
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public TblJobProcess Update(TblJobProcess item)
        {
            item.Save(UserName);
            return item;
        }


        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public TblJobProcess Insert(int JobID,
            string StartedBy, DateTime? StartedOn,
            string FinishedBy, DateTime? FinishedOn)
        {
            TblJobProcess item = new TblJobProcess();

            item.JobID = JobID;

            item.StartedBy = StartedBy;

            item.StartedOn = StartedOn;

            item.FinishedBy = FinishedBy;

            item.FinishedOn = FinishedOn;

            item.Save(UserName);

            return item;
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public TblJobProcess Update(int JobID,
            string StartedBy, DateTime? StartedOn,
            string FinishedBy, DateTime? FinishedOn)
        {
            TblJobProcess item = new TblJobProcess();

            item.MarkOld();
            item.IsLoaded = true;

            item.JobID = JobID;

            item.StartedBy = StartedBy;

            item.StartedOn = StartedOn;

            item.FinishedBy = FinishedBy;

            item.FinishedOn = FinishedOn;

            item.Save(UserName);

            return item;
        }
    }
}
