using System;
using System.Text;
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Xml;
using System.Xml.Serialization;
using SubSonic;
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
    /// <summary>
    /// Strongly-typed collection for the TblCylinderProcessing class.
    /// </summary>
    [Serializable]
    public partial class TblCylinderProcessingCollection : ActiveList<TblCylinderProcessing, TblCylinderProcessingCollection>
    {
        public TblCylinderProcessingCollection() { }

        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblCylinderProcessingCollection</returns>
        public TblCylinderProcessingCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblCylinderProcessing o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }


    }
    /// <summary>
    /// This is an ActiveRecord class which wraps the TblCylinderProcessing table.
    /// </summary>
    [Serializable]
    public partial class TblCylinderProcessing : ActiveRecord<TblCylinderProcessing>, IActiveRecord
    {
        #region .ctors and Default Settings

        public TblCylinderProcessing()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        private void InitSetDefaults() { SetDefaults(); }

        public TblCylinderProcessing(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public TblCylinderProcessing(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public TblCylinderProcessing(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        protected static void SetSQLProps() { GetTableSchema(); }

        #endregion

        #region Schema and Query Accessor
        public static Query CreateQuery() { return new Query(Schema); }
        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("tblCylinderProcessing", TableType.Table, DataService.GetInstance("DataAcessProvider"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
                colvarId.ColumnName = "Id";
                colvarId.DataType = DbType.Int32;
                colvarId.MaxLength = 0;
                colvarId.AutoIncrement = true;
                colvarId.IsNullable = false;
                colvarId.IsPrimaryKey = true;
                colvarId.IsForeignKey = false;
                colvarId.IsReadOnly = false;
                colvarId.DefaultSetting = @"";
                colvarId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarId);

                TableSchema.TableColumn colvarCylinderID = new TableSchema.TableColumn(schema);
                colvarCylinderID.ColumnName = "CylinderID";
                colvarCylinderID.DataType = DbType.Int32;
                colvarCylinderID.MaxLength = 0;
                colvarCylinderID.AutoIncrement = false;
                colvarCylinderID.IsNullable = false;
                colvarCylinderID.IsPrimaryKey = false;
                colvarCylinderID.IsForeignKey = true;
                colvarCylinderID.IsReadOnly = false;
                colvarCylinderID.DefaultSetting = @"";
                colvarCylinderID.ForeignKeyTableName = "tblCylinder";
                schema.Columns.Add(colvarCylinderID);

                TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
                colvarDescription.ColumnName = "Description";
                colvarDescription.DataType = DbType.String;
                colvarDescription.MaxLength = 1000;
                colvarDescription.AutoIncrement = false;
                colvarDescription.IsNullable = true;
                colvarDescription.IsPrimaryKey = false;
                colvarDescription.IsForeignKey = false;
                colvarDescription.IsReadOnly = false;
                colvarDescription.DefaultSetting = @"";
                colvarDescription.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDescription);

                TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
                colvarCreatedBy.ColumnName = "CreatedBy";
                colvarCreatedBy.DataType = DbType.String;
                colvarCreatedBy.MaxLength = 100;
                colvarCreatedBy.AutoIncrement = false;
                colvarCreatedBy.IsNullable = true;
                colvarCreatedBy.IsPrimaryKey = false;
                colvarCreatedBy.IsForeignKey = false;
                colvarCreatedBy.IsReadOnly = false;
                colvarCreatedBy.DefaultSetting = @"";
                colvarCreatedBy.ForeignKeyTableName = "";
                schema.Columns.Add(colvarCreatedBy);

                TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
                colvarCreatedOn.ColumnName = "CreatedOn";
                colvarCreatedOn.DataType = DbType.DateTime;
                colvarCreatedOn.MaxLength = 0;
                colvarCreatedOn.AutoIncrement = false;
                colvarCreatedOn.IsNullable = true;
                colvarCreatedOn.IsPrimaryKey = false;
                colvarCreatedOn.IsForeignKey = false;
                colvarCreatedOn.IsReadOnly = false;
                colvarCreatedOn.DefaultSetting = @"";
                colvarCreatedOn.ForeignKeyTableName = "";
                schema.Columns.Add(colvarCreatedOn);

                TableSchema.TableColumn colvarFinishedBy = new TableSchema.TableColumn(schema);
                colvarFinishedBy.ColumnName = "FinishedBy";
                colvarFinishedBy.DataType = DbType.String;
                colvarFinishedBy.MaxLength = 100;
                colvarFinishedBy.AutoIncrement = false;
                colvarFinishedBy.IsNullable = true;
                colvarFinishedBy.IsPrimaryKey = false;
                colvarFinishedBy.IsForeignKey = false;
                colvarFinishedBy.IsReadOnly = false;
                colvarFinishedBy.DefaultSetting = @"";
                colvarFinishedBy.ForeignKeyTableName = "";
                schema.Columns.Add(colvarFinishedBy);

                TableSchema.TableColumn colvarFinishedOn = new TableSchema.TableColumn(schema);
                colvarFinishedOn.ColumnName = "FinishedOn";
                colvarFinishedOn.DataType = DbType.DateTime;
                colvarFinishedOn.MaxLength = 0;
                colvarFinishedOn.AutoIncrement = false;
                colvarFinishedOn.IsNullable = true;
                colvarFinishedOn.IsPrimaryKey = false;
                colvarFinishedOn.IsForeignKey = false;
                colvarFinishedOn.IsReadOnly = false;
                colvarFinishedOn.DefaultSetting = @"";
                colvarFinishedOn.ForeignKeyTableName = "";
                schema.Columns.Add(colvarFinishedOn);

                TableSchema.TableColumn colvarDepartmentID = new TableSchema.TableColumn(schema);
                colvarDepartmentID.ColumnName = "DepartmentID";
                colvarDepartmentID.DataType = DbType.Int16;
                colvarDepartmentID.MaxLength = 0;
                colvarDepartmentID.AutoIncrement = false;
                colvarDepartmentID.IsNullable = false;
                colvarDepartmentID.IsPrimaryKey = false;
                colvarDepartmentID.IsForeignKey = false;
                colvarDepartmentID.IsReadOnly = false;
                colvarDepartmentID.DefaultSetting = @"";
                colvarDepartmentID.ForeignKeyTableName = "tblDepartment";
                schema.Columns.Add(colvarDepartmentID);

                TableSchema.TableColumn colvarCylinderStatus = new TableSchema.TableColumn(schema);
                colvarCylinderStatus.ColumnName = "CylinderStatus";
                colvarCylinderStatus.DataType = DbType.String;
                colvarCylinderStatus.MaxLength = 50;
                colvarCylinderStatus.AutoIncrement = false;
                colvarCylinderStatus.IsNullable = true;
                colvarCylinderStatus.IsPrimaryKey = false;
                colvarCylinderStatus.IsForeignKey = false;
                colvarCylinderStatus.IsReadOnly = false;
                colvarCylinderStatus.DefaultSetting = @"";
                colvarCylinderStatus.ForeignKeyTableName = "";
                schema.Columns.Add(colvarCylinderStatus);

                TableSchema.TableColumn colvarMachineID = new TableSchema.TableColumn(schema);
                colvarMachineID.ColumnName = "MachineID";
                colvarMachineID.DataType = DbType.Int32;
                colvarMachineID.MaxLength = 0;
                colvarMachineID.AutoIncrement = false;
                colvarMachineID.IsNullable = true;
                colvarMachineID.IsPrimaryKey = false;
                colvarMachineID.IsForeignKey = false;
                colvarMachineID.IsReadOnly = false;
                colvarMachineID.DefaultSetting = @"";
                colvarMachineID.ForeignKeyTableName = "tblMachine";
                schema.Columns.Add(colvarMachineID);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["DataAcessProvider"].AddSchema("tblCylinderProcessing", schema);
            }
        }
        #endregion

        #region Props

        [XmlAttribute("Id")]
        [Bindable(true)]
        public int Id
        {
            get { return GetColumnValue<int>(Columns.Id); }
            set { SetColumnValue(Columns.Id, value); }
        }

        [XmlAttribute("CylinderID")]
        [Bindable(true)]
        public int CylinderID
        {
            get { return GetColumnValue<int>(Columns.CylinderID); }
            set { SetColumnValue(Columns.CylinderID, value); }
        }

        [XmlAttribute("Description")]
        [Bindable(true)]
        public string Description
        {
            get { return GetColumnValue<string>(Columns.Description); }
            set { SetColumnValue(Columns.Description, value); }
        }

        [XmlAttribute("CreatedBy")]
        [Bindable(true)]
        public string CreatedBy
        {
            get { return GetColumnValue<string>(Columns.CreatedBy); }
            set { SetColumnValue(Columns.CreatedBy, value); }
        }

        [XmlAttribute("CreatedOn")]
        [Bindable(true)]
        public DateTime? CreatedOn
        {
            get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
            set { SetColumnValue(Columns.CreatedOn, value); }
        }

        [XmlAttribute("FinishedBy")]
        [Bindable(true)]
        public string FinishedBy
        {
            get { return GetColumnValue<string>(Columns.FinishedBy); }
            set { SetColumnValue(Columns.FinishedBy, value); }
        }

        [XmlAttribute("FinishdOn")]
        [Bindable(true)]
        public DateTime? FinishedOn
        {
            get { return GetColumnValue<DateTime?>(Columns.FinishedOn); }
            set { SetColumnValue(Columns.FinishedOn, value); }
        }

        [XmlAttribute("DepartmentID")]
        [Bindable(true)]
        public short? DepartmentID
        {
            get { return GetColumnValue<short?>(Columns.DepartmentID); }
            set { SetColumnValue(Columns.DepartmentID, value); }
        }

        [XmlAttribute("CylinderStatus")]
        [Bindable(true)]
        public string CylinderStatus
        {
            get { return GetColumnValue<string>(Columns.CylinderStatus); }
            set { SetColumnValue(Columns.CylinderStatus, value); }
        }


        [XmlAttribute("MachineID")]
        [Bindable(true)]
        public int? MachineID
        {
            get { return GetColumnValue<int?>(Columns.MachineID); }
            set { SetColumnValue(Columns.MachineID, value); }
        }
        #endregion

        #region ForeignKey Properties

        /// <summary>
        /// Returns a TblCylinder ActiveRecord object related to this TblCylinderProcessing
        /// 
        /// </summary>
        public SweetSoft.APEM.DataAccess.TblCylinder TblCylinder
        {
            get { return SweetSoft.APEM.DataAccess.TblCylinder.FetchByID(this.CylinderID); }
            set { SetColumnValue("CylinderID", value.CylinderID); }
        }

        /// <summary>
        /// Returns a TblCustomerQuotation ActiveRecord object related to this TblCustomerQuotationPricing
        /// 
        /// </summary>
        public SweetSoft.APEM.DataAccess.TblDepartment TblDepartment
        {
            get { return SweetSoft.APEM.DataAccess.TblDepartment.FetchByID(this.DepartmentID); }
            set { SetColumnValue("DepartmentID", value.DepartmentID); }
        }

        /// <summary>
        /// Returns a TblMachine ActiveRecord object related to this TblMachine
        /// 
        /// </summary>
        public SweetSoft.APEM.DataAccess.TblMachine TblMachine
        {
            get { return SweetSoft.APEM.DataAccess.TblMachine.FetchByID(this.MachineID); }
            set { SetColumnValue("MachineID", value.Id); }
        }


        #endregion

        #region ObjectDataSource support


        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static TblCylinderProcessing Insert(int varCylinderID, string varDescription,
            string varCreatedBy, DateTime? varCreatedOn,
            string varFinishedBy, DateTime? varFinishedOn, short? varDepartmentID,
            string varCylinderStatus, int varMachineID)
        {
            TblCylinderProcessing item = new TblCylinderProcessing();

            item.Description = varDescription;

            item.CylinderID = varCylinderID;

            item.CreatedBy = varCreatedBy;

            item.CreatedOn = varCreatedOn;

            item.FinishedBy = varFinishedBy;

            item.FinishedOn = varFinishedOn;

            item.DepartmentID = varDepartmentID;

            item.CylinderStatus = varCylinderStatus;

            item.MachineID = varMachineID;


            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);

            return item;
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static TblCylinderProcessing Update(int varId, int varCylinderID,
            string varDescription,
            string varCreatedBy, DateTime? varCreatedOn,
            string varFinishedBy, DateTime? varFinishedOn, short? varDepartmentID,
            string varCylinderStatus, int varMachineID)
        {
            TblCylinderProcessing item = new TblCylinderProcessing();

            item.Id = varId;

            item.Description = varDescription;

            item.CylinderID = varCylinderID;

            item.CreatedBy = varCreatedBy;

            item.CreatedOn = varCreatedOn;

            item.FinishedBy = varFinishedBy;

            item.FinishedOn = varFinishedOn;

            item.DepartmentID = varDepartmentID;

            item.CylinderStatus = varCylinderStatus;

            item.MachineID = varMachineID;

            item.IsNew = false;
            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);

            return item;
        }

        #endregion

        #region Typed Columns


        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }



        public static TableSchema.TableColumn CylinderIDColumn
        {
            get { return Schema.Columns[1]; }
        }



        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[2]; }
        }



        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[3]; }
        }



        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[4]; }
        }




        public static TableSchema.TableColumn FinishedByColumn
        {
            get { return Schema.Columns[5]; }
        }



        public static TableSchema.TableColumn FinishedOnColumn
        {
            get { return Schema.Columns[6]; }
        }

        

        public static TableSchema.TableColumn DepartmentIDColumn
        {
            get { return Schema.Columns[7]; }
        }


        public static TableSchema.TableColumn CylinderStatusColumn
        {
            get { return Schema.Columns[8]; }
        }



        public static TableSchema.TableColumn MachineIDColumn
        {
            get { return Schema.Columns[9]; }
        }


        #endregion

        #region Columns Struct
        public struct Columns
        {
            public static string Id = @"Id";
            public static string CylinderID = @"CylinderID";
            public static string Description = @"Description";
            public static string CreatedBy = @"CreatedBy";
            public static string CreatedOn = @"CreatedOn";
            public static string FinishedBy = @"FinishedBy";
            public static string FinishedOn = @"FinishedOn";
            public static string DepartmentID = @"DepartmentID";
            public static string CylinderStatus = @"CylinderStatus";
            public static string MachineID = @"MachineID";
        }
        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion
    }
}
