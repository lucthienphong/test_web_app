using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
    /// <summary>
    /// Controller class for tblEngravingTobacco
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TblEngravingTobaccoController
    {
        // Preload our schema..
        TblEngravingTobacco thisSchemaLoad = new TblEngravingTobacco();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TblEngravingTobaccoCollection FetchAll()
        {
            TblEngravingTobaccoCollection coll = new TblEngravingTobaccoCollection();
            Query qry = new Query(TblEngravingTobacco.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblEngravingTobaccoCollection FetchByID(object EngravingID)
        {
            TblEngravingTobaccoCollection coll = new TblEngravingTobaccoCollection().Where("EngravingID", EngravingID).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblEngravingTobaccoCollection FetchByQuery(Query qry)
        {
            TblEngravingTobaccoCollection coll = new TblEngravingTobaccoCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object EngravingID)
        {
            return (TblEngravingTobacco.Delete(EngravingID) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object EngravingID)
        {
            return (TblEngravingTobacco.Destroy(EngravingID) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public TblEngravingTobacco Insert(TblEngravingTobacco obj)
	    {
            obj.Save(UserName);
            return obj;
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public TblEngravingTobacco Update(TblEngravingTobacco obj)
	    {
		    TblEngravingTobacco item = new TblEngravingTobacco();
	        item.MarkOld();
	        item.IsLoaded = true;

            item.EngravingID = obj.EngravingID;

            item.CylinderID = obj.CylinderID;

            item.Sequence = obj.Sequence;

            item.JobID = obj.JobID;

            item.Stylus = obj.Stylus;

            item.Screen = obj.Screen;

            item.MasterScreen = obj.MasterScreen;

            item.Angle = obj.Angle;

            item.Elongation = obj.Elongation;

            item.Distotion = obj.Distotion;

            item.Resolution = obj.Resolution;

            item.Hexagonal = obj.Hexagonal;

            item.ImageSmoothness = obj.ImageSmoothness;

            item.UnsharpMasking = obj.UnsharpMasking;

            item.Antialiasing = obj.Antialiasing;

            item.LineworkWidening = obj.LineworkWidening;

            item.EngravingStart = obj.EngravingStart;

            item.EngravingWidth = obj.EngravingWidth;

            item.CellShape = obj.CellShape;

            item.Gradation = obj.Gradation;

            item.Gamma = obj.Gamma;

            item.LaserA = obj.LaserA;

            item.LaserB = obj.LaserB;

            item.CellWidth = obj.CellWidth;

            item.ChannelWidth = obj.ChannelWidth;

            item.CellDepth = obj.CellDepth;

            item.EngravingTime = obj.EngravingTime;

            item.Beam = obj.Beam;

            item.Threshold = obj.Threshold;

            item.CheckedBy = obj.CheckedBy;

            item.CheckedOn = obj.CheckedOn;

            item.IsCopy = obj.IsCopy;
				
			item.Color = obj.Color;
				
	        item.Save(UserName);

            return item;

	    }
    }
}
