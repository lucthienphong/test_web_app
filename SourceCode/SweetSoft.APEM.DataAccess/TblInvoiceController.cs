using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
    /// <summary>
    /// Controller class for tblInvoice
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TblInvoiceController
    {
        // Preload our schema..
        TblInvoice thisSchemaLoad = new TblInvoice();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TblInvoiceCollection FetchAll()
        {
            TblInvoiceCollection coll = new TblInvoiceCollection();
            Query qry = new Query(TblInvoice.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblInvoiceCollection FetchByID(object InvoiceID)
        {
            TblInvoiceCollection coll = new TblInvoiceCollection().Where("InvoiceID", InvoiceID).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblInvoiceCollection FetchByQuery(Query qry)
        {
            TblInvoiceCollection coll = new TblInvoiceCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object InvoiceID)
        {
            return (TblInvoice.Delete(InvoiceID) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object InvoiceID)
        {
            return (TblInvoice.Destroy(InvoiceID) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public TblInvoice Insert(TblInvoice obj)
	    {
		    obj.Save(UserName);
            return obj;
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public TblInvoice Update(TblInvoice obj)
	    {
		    TblInvoice item = new TblInvoice();
	        item.MarkOld();
	        item.IsLoaded = true;

            item.InvoiceID = obj.InvoiceID;

            item.InvoiceNo = obj.InvoiceNo;

            item.InvoiceDate = obj.InvoiceDate;

            item.CustomerID = obj.CustomerID;

            item.ContactID = obj.ContactID;

            item.PONumber = obj.PONumber;

            item.CurrencyID = obj.CurrencyID;

            item.RMValue = obj.RMValue;

            item.CurrencyValue = obj.CurrencyValue;

            item.TaxID = obj.TaxID;

            item.IrisQty = obj.IrisQty;

            item.IrisPrice = obj.IrisPrice;

            item.Remark = obj.Remark;

            item.RemarkScreen = obj.RemarkScreen;

            item.PaymentTern = obj.PaymentTern;

            item.TotalPrice = obj.TotalPrice;

            item.NetTotal = obj.NetTotal;

            item.CreatedBy = obj.CreatedBy;

            item.CreatedOn = obj.CreatedOn;

            item.ModifiedBy = obj.ModifiedBy;

            item.ModifiedOn = obj.ModifiedOn;
				
	        item.Save(UserName);

            return item;
	    }
    }
}
