using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblWorkFlowLine class.
	/// </summary>
    [Serializable]
	public partial class TblWorkFlowLineCollection : ActiveList<TblWorkFlowLine, TblWorkFlowLineCollection>
	{	   
		public TblWorkFlowLineCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblWorkFlowLineCollection</returns>
		public TblWorkFlowLineCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblWorkFlowLine o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblWorkFlowLine table.
	/// </summary>
	[Serializable]
	public partial class TblWorkFlowLine : ActiveRecord<TblWorkFlowLine>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblWorkFlowLine()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblWorkFlowLine(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblWorkFlowLine(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblWorkFlowLine(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblWorkFlowLine", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarNode1ID = new TableSchema.TableColumn(schema);
				colvarNode1ID.ColumnName = "Node1ID";
				colvarNode1ID.DataType = DbType.Int32;
				colvarNode1ID.MaxLength = 0;
				colvarNode1ID.AutoIncrement = false;
				colvarNode1ID.IsNullable = true;
				colvarNode1ID.IsPrimaryKey = false;
				colvarNode1ID.IsForeignKey = true;
				colvarNode1ID.IsReadOnly = false;
				colvarNode1ID.DefaultSetting = @"";
				
					colvarNode1ID.ForeignKeyTableName = "tblWorkFlowNode";
				schema.Columns.Add(colvarNode1ID);
				
				TableSchema.TableColumn colvarNode2ID = new TableSchema.TableColumn(schema);
				colvarNode2ID.ColumnName = "Node2ID";
				colvarNode2ID.DataType = DbType.Int32;
				colvarNode2ID.MaxLength = 0;
				colvarNode2ID.AutoIncrement = false;
				colvarNode2ID.IsNullable = true;
				colvarNode2ID.IsPrimaryKey = false;
				colvarNode2ID.IsForeignKey = true;
				colvarNode2ID.IsReadOnly = false;
				colvarNode2ID.DefaultSetting = @"";
				
					colvarNode2ID.ForeignKeyTableName = "tblWorkFlowNode";
				schema.Columns.Add(colvarNode2ID);
				
				TableSchema.TableColumn colvarWorkFlowID = new TableSchema.TableColumn(schema);
				colvarWorkFlowID.ColumnName = "WorkFlowID";
				colvarWorkFlowID.DataType = DbType.Int32;
				colvarWorkFlowID.MaxLength = 0;
				colvarWorkFlowID.AutoIncrement = false;
				colvarWorkFlowID.IsNullable = true;
				colvarWorkFlowID.IsPrimaryKey = false;
				colvarWorkFlowID.IsForeignKey = true;
				colvarWorkFlowID.IsReadOnly = false;
				colvarWorkFlowID.DefaultSetting = @"";
				
					colvarWorkFlowID.ForeignKeyTableName = "tblWorkFlow";
				schema.Columns.Add(colvarWorkFlowID);
				
				TableSchema.TableColumn colvarLineType = new TableSchema.TableColumn(schema);
				colvarLineType.ColumnName = "LineType";
				colvarLineType.DataType = DbType.AnsiString;
				colvarLineType.MaxLength = 50;
				colvarLineType.AutoIncrement = false;
				colvarLineType.IsNullable = true;
				colvarLineType.IsPrimaryKey = false;
				colvarLineType.IsForeignKey = false;
				colvarLineType.IsReadOnly = false;
				colvarLineType.DefaultSetting = @"";
				colvarLineType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLineType);
				
				TableSchema.TableColumn colvarMachineryProduceTypeID = new TableSchema.TableColumn(schema);
				colvarMachineryProduceTypeID.ColumnName = "MachineryProduceTypeID";
				colvarMachineryProduceTypeID.DataType = DbType.Int32;
				colvarMachineryProduceTypeID.MaxLength = 0;
				colvarMachineryProduceTypeID.AutoIncrement = false;
				colvarMachineryProduceTypeID.IsNullable = true;
				colvarMachineryProduceTypeID.IsPrimaryKey = false;
				colvarMachineryProduceTypeID.IsForeignKey = true;
				colvarMachineryProduceTypeID.IsReadOnly = false;
				colvarMachineryProduceTypeID.DefaultSetting = @"";
				
					colvarMachineryProduceTypeID.ForeignKeyTableName = "tblMachinaryProduceType";
				schema.Columns.Add(colvarMachineryProduceTypeID);
				
				TableSchema.TableColumn colvarWorkFlowCode = new TableSchema.TableColumn(schema);
				colvarWorkFlowCode.ColumnName = "WorkFlowCode";
				colvarWorkFlowCode.DataType = DbType.AnsiString;
				colvarWorkFlowCode.MaxLength = 50;
				colvarWorkFlowCode.AutoIncrement = false;
				colvarWorkFlowCode.IsNullable = true;
				colvarWorkFlowCode.IsPrimaryKey = false;
				colvarWorkFlowCode.IsForeignKey = false;
				colvarWorkFlowCode.IsReadOnly = false;
				colvarWorkFlowCode.DefaultSetting = @"";
				colvarWorkFlowCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWorkFlowCode);
				
				TableSchema.TableColumn colvarWorkFlowIDInXML = new TableSchema.TableColumn(schema);
				colvarWorkFlowIDInXML.ColumnName = "WorkFlowIDInXML";
				colvarWorkFlowIDInXML.DataType = DbType.Int32;
				colvarWorkFlowIDInXML.MaxLength = 0;
				colvarWorkFlowIDInXML.AutoIncrement = false;
				colvarWorkFlowIDInXML.IsNullable = true;
				colvarWorkFlowIDInXML.IsPrimaryKey = false;
				colvarWorkFlowIDInXML.IsForeignKey = false;
				colvarWorkFlowIDInXML.IsReadOnly = false;
				colvarWorkFlowIDInXML.DefaultSetting = @"";
				colvarWorkFlowIDInXML.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWorkFlowIDInXML);
				
				TableSchema.TableColumn colvarWorkFlowToID = new TableSchema.TableColumn(schema);
				colvarWorkFlowToID.ColumnName = "WorkFlowToID";
				colvarWorkFlowToID.DataType = DbType.Int32;
				colvarWorkFlowToID.MaxLength = 0;
				colvarWorkFlowToID.AutoIncrement = false;
				colvarWorkFlowToID.IsNullable = true;
				colvarWorkFlowToID.IsPrimaryKey = false;
				colvarWorkFlowToID.IsForeignKey = false;
				colvarWorkFlowToID.IsReadOnly = false;
				colvarWorkFlowToID.DefaultSetting = @"";
				colvarWorkFlowToID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWorkFlowToID);
				
				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 100;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 100;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = true;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("tblWorkFlowLine",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("Node1ID")]
		[Bindable(true)]
		public int? Node1ID 
		{
			get { return GetColumnValue<int?>(Columns.Node1ID); }
			set { SetColumnValue(Columns.Node1ID, value); }
		}
		  
		[XmlAttribute("Node2ID")]
		[Bindable(true)]
		public int? Node2ID 
		{
			get { return GetColumnValue<int?>(Columns.Node2ID); }
			set { SetColumnValue(Columns.Node2ID, value); }
		}
		  
		[XmlAttribute("WorkFlowID")]
		[Bindable(true)]
		public int? WorkFlowID 
		{
			get { return GetColumnValue<int?>(Columns.WorkFlowID); }
			set { SetColumnValue(Columns.WorkFlowID, value); }
		}
		  
		[XmlAttribute("LineType")]
		[Bindable(true)]
		public string LineType 
		{
			get { return GetColumnValue<string>(Columns.LineType); }
			set { SetColumnValue(Columns.LineType, value); }
		}
		  
		[XmlAttribute("MachineryProduceTypeID")]
		[Bindable(true)]
		public int? MachineryProduceTypeID 
		{
			get { return GetColumnValue<int?>(Columns.MachineryProduceTypeID); }
			set { SetColumnValue(Columns.MachineryProduceTypeID, value); }
		}
		  
		[XmlAttribute("WorkFlowCode")]
		[Bindable(true)]
		public string WorkFlowCode 
		{
			get { return GetColumnValue<string>(Columns.WorkFlowCode); }
			set { SetColumnValue(Columns.WorkFlowCode, value); }
		}
		  
		[XmlAttribute("WorkFlowIDInXML")]
		[Bindable(true)]
		public int? WorkFlowIDInXML 
		{
			get { return GetColumnValue<int?>(Columns.WorkFlowIDInXML); }
			set { SetColumnValue(Columns.WorkFlowIDInXML, value); }
		}
		  
		[XmlAttribute("WorkFlowToID")]
		[Bindable(true)]
		public int? WorkFlowToID 
		{
			get { return GetColumnValue<int?>(Columns.WorkFlowToID); }
			set { SetColumnValue(Columns.WorkFlowToID, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public string CreatedBy 
		{
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedBy")]
		[Bindable(true)]
		public string ModifiedBy 
		{
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblWorkFlow ActiveRecord object related to this TblWorkFlowLine
		/// 
		/// </summary>
		public SweetSoft.APEM.DataAccess.TblWorkFlow TblWorkFlow
		{
			get { return SweetSoft.APEM.DataAccess.TblWorkFlow.FetchByID(this.WorkFlowID); }
			set { SetColumnValue("WorkFlowID", value.Id); }
		}
		
		
		/// <summary>
		/// Returns a TblWorkFlowNode ActiveRecord object related to this TblWorkFlowLine
		/// 
		/// </summary>
		public SweetSoft.APEM.DataAccess.TblWorkFlowNode TblWorkFlowNode
		{
			get { return SweetSoft.APEM.DataAccess.TblWorkFlowNode.FetchByID(this.Node1ID); }
			set { SetColumnValue("Node1ID", value.Id); }
		}
		
		
		/// <summary>
		/// Returns a TblWorkFlowNode ActiveRecord object related to this TblWorkFlowLine
		/// 
		/// </summary>
		public SweetSoft.APEM.DataAccess.TblWorkFlowNode TblWorkFlowNodeToNode2ID
		{
			get { return SweetSoft.APEM.DataAccess.TblWorkFlowNode.FetchByID(this.Node2ID); }
			set { SetColumnValue("Node2ID", value.Id); }
		}
		
		
		/// <summary>
		/// Returns a TblMachinaryProduceType ActiveRecord object related to this TblWorkFlowLine
		/// 
		/// </summary>
		public SweetSoft.APEM.DataAccess.TblMachinaryProduceType TblMachinaryProduceType
		{
			get { return SweetSoft.APEM.DataAccess.TblMachinaryProduceType.FetchByID(this.MachineryProduceTypeID); }
			set { SetColumnValue("MachineryProduceTypeID", value.Id); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varNode1ID,int? varNode2ID,int? varWorkFlowID,string varLineType,int? varMachineryProduceTypeID,string varWorkFlowCode,int? varWorkFlowIDInXML,int? varWorkFlowToID,string varCreatedBy,DateTime? varCreatedOn,string varModifiedBy,DateTime? varModifiedOn)
		{
			TblWorkFlowLine item = new TblWorkFlowLine();
			
			item.Node1ID = varNode1ID;
			
			item.Node2ID = varNode2ID;
			
			item.WorkFlowID = varWorkFlowID;
			
			item.LineType = varLineType;
			
			item.MachineryProduceTypeID = varMachineryProduceTypeID;
			
			item.WorkFlowCode = varWorkFlowCode;
			
			item.WorkFlowIDInXML = varWorkFlowIDInXML;
			
			item.WorkFlowToID = varWorkFlowToID;
			
			item.CreatedBy = varCreatedBy;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedBy = varModifiedBy;
			
			item.ModifiedOn = varModifiedOn;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,int? varNode1ID,int? varNode2ID,int? varWorkFlowID,string varLineType,int? varMachineryProduceTypeID,string varWorkFlowCode,int? varWorkFlowIDInXML,int? varWorkFlowToID,string varCreatedBy,DateTime? varCreatedOn,string varModifiedBy,DateTime? varModifiedOn)
		{
			TblWorkFlowLine item = new TblWorkFlowLine();
			
				item.Id = varId;
			
				item.Node1ID = varNode1ID;
			
				item.Node2ID = varNode2ID;
			
				item.WorkFlowID = varWorkFlowID;
			
				item.LineType = varLineType;
			
				item.MachineryProduceTypeID = varMachineryProduceTypeID;
			
				item.WorkFlowCode = varWorkFlowCode;
			
				item.WorkFlowIDInXML = varWorkFlowIDInXML;
			
				item.WorkFlowToID = varWorkFlowToID;
			
				item.CreatedBy = varCreatedBy;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedBy = varModifiedBy;
			
				item.ModifiedOn = varModifiedOn;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn Node1IDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn Node2IDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn WorkFlowIDColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn LineTypeColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn MachineryProduceTypeIDColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn WorkFlowCodeColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn WorkFlowIDInXMLColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn WorkFlowToIDColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedByColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string Node1ID = @"Node1ID";
			 public static string Node2ID = @"Node2ID";
			 public static string WorkFlowID = @"WorkFlowID";
			 public static string LineType = @"LineType";
			 public static string MachineryProduceTypeID = @"MachineryProduceTypeID";
			 public static string WorkFlowCode = @"WorkFlowCode";
			 public static string WorkFlowIDInXML = @"WorkFlowIDInXML";
			 public static string WorkFlowToID = @"WorkFlowToID";
			 public static string CreatedBy = @"CreatedBy";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedBy = @"ModifiedBy";
			 public static string ModifiedOn = @"ModifiedOn";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
