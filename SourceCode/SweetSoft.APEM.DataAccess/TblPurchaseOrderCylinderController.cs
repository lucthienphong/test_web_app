using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
    /// <summary>
    /// Controller class for tblPurchaseOrder_Cylinder
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TblPurchaseOrderCylinderController
    {
        // Preload our schema..
        TblPurchaseOrderCylinder thisSchemaLoad = new TblPurchaseOrderCylinder();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TblPurchaseOrderCylinderCollection FetchAll()
        {
            TblPurchaseOrderCylinderCollection coll = new TblPurchaseOrderCylinderCollection();
            Query qry = new Query(TblPurchaseOrderCylinder.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblPurchaseOrderCylinderCollection FetchByID(object Id)
        {
            TblPurchaseOrderCylinderCollection coll = new TblPurchaseOrderCylinderCollection().Where("ID", Id).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblPurchaseOrderCylinderCollection FetchByQuery(Query qry)
        {
            TblPurchaseOrderCylinderCollection coll = new TblPurchaseOrderCylinderCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object Id)
        {
            return (TblPurchaseOrderCylinder.Delete(Id) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object Id)
        {
            return (TblPurchaseOrderCylinder.Destroy(Id) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public TblPurchaseOrderCylinder Insert(TblPurchaseOrderCylinder obj)
	    {
            obj.Save(UserName);
            return obj;
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public TblPurchaseOrderCylinder Update(TblPurchaseOrderCylinder obj)
	    {
		    TblPurchaseOrderCylinder item = new TblPurchaseOrderCylinder();
	        item.MarkOld();
	        item.IsLoaded = true;

            item.PurchaseOrderID = obj.PurchaseOrderID;

            item.CylinderID = obj.CylinderID;

            item.UnitPrice = obj.UnitPrice;

            item.Quantity = obj.Quantity;

            item.Id = obj.Id;

            item.CylinderNo = obj.CylinderNo;

            item.Circumference = obj.Circumference;

            item.FaceWidth = obj.FaceWidth;

            item.JobID = obj.JobID;

            item.Unit = obj.Unit;

            item.Status = obj.Status;

            item.DONumber = obj.DONumber;

            item.DeliveryDate = obj.DeliveryDate;
				
	        item.Save(UserName);

            return item;
	    }
    }
}
