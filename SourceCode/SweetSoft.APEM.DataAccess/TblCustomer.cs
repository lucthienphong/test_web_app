using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblCustomer class.
	/// </summary>
    [Serializable]
	public partial class TblCustomerCollection : ActiveList<TblCustomer, TblCustomerCollection>
	{	   
		public TblCustomerCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblCustomerCollection</returns>
		public TblCustomerCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblCustomer o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblCustomer table.
	/// </summary>
	[Serializable]
	public partial class TblCustomer : ActiveRecord<TblCustomer>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblCustomer()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblCustomer(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblCustomer(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblCustomer(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblCustomer", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarCustomerID = new TableSchema.TableColumn(schema);
				colvarCustomerID.ColumnName = "CustomerID";
				colvarCustomerID.DataType = DbType.Int32;
				colvarCustomerID.MaxLength = 0;
				colvarCustomerID.AutoIncrement = true;
				colvarCustomerID.IsNullable = false;
				colvarCustomerID.IsPrimaryKey = true;
				colvarCustomerID.IsForeignKey = false;
				colvarCustomerID.IsReadOnly = false;
				colvarCustomerID.DefaultSetting = @"";
				colvarCustomerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerID);
				
				TableSchema.TableColumn colvarCode = new TableSchema.TableColumn(schema);
				colvarCode.ColumnName = "Code";
				colvarCode.DataType = DbType.AnsiString;
				colvarCode.MaxLength = 5;
				colvarCode.AutoIncrement = false;
				colvarCode.IsNullable = false;
				colvarCode.IsPrimaryKey = false;
				colvarCode.IsForeignKey = false;
				colvarCode.IsReadOnly = false;
				colvarCode.DefaultSetting = @"";
				colvarCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCode);
				
				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.String;
				colvarName.MaxLength = 200;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = false;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);
				
				TableSchema.TableColumn colvarAddress = new TableSchema.TableColumn(schema);
				colvarAddress.ColumnName = "Address";
				colvarAddress.DataType = DbType.String;
				colvarAddress.MaxLength = 300;
				colvarAddress.AutoIncrement = false;
				colvarAddress.IsNullable = false;
				colvarAddress.IsPrimaryKey = false;
				colvarAddress.IsForeignKey = false;
				colvarAddress.IsReadOnly = false;
				colvarAddress.DefaultSetting = @"";
				colvarAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddress);
				
				TableSchema.TableColumn colvarCity = new TableSchema.TableColumn(schema);
				colvarCity.ColumnName = "City";
				colvarCity.DataType = DbType.String;
				colvarCity.MaxLength = 50;
				colvarCity.AutoIncrement = false;
				colvarCity.IsNullable = false;
				colvarCity.IsPrimaryKey = false;
				colvarCity.IsForeignKey = false;
				colvarCity.IsReadOnly = false;
				colvarCity.DefaultSetting = @"";
				colvarCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCity);
				
				TableSchema.TableColumn colvarTel = new TableSchema.TableColumn(schema);
				colvarTel.ColumnName = "Tel";
				colvarTel.DataType = DbType.AnsiString;
				colvarTel.MaxLength = 50;
				colvarTel.AutoIncrement = false;
				colvarTel.IsNullable = false;
				colvarTel.IsPrimaryKey = false;
				colvarTel.IsForeignKey = false;
				colvarTel.IsReadOnly = false;
				colvarTel.DefaultSetting = @"";
				colvarTel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTel);
				
				TableSchema.TableColumn colvarFax = new TableSchema.TableColumn(schema);
				colvarFax.ColumnName = "Fax";
				colvarFax.DataType = DbType.AnsiString;
				colvarFax.MaxLength = 50;
				colvarFax.AutoIncrement = false;
				colvarFax.IsNullable = false;
				colvarFax.IsPrimaryKey = false;
				colvarFax.IsForeignKey = false;
				colvarFax.IsReadOnly = false;
				colvarFax.DefaultSetting = @"";
				colvarFax.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFax);
				
				TableSchema.TableColumn colvarPostCode = new TableSchema.TableColumn(schema);
				colvarPostCode.ColumnName = "PostCode";
				colvarPostCode.DataType = DbType.AnsiString;
				colvarPostCode.MaxLength = 10;
				colvarPostCode.AutoIncrement = false;
				colvarPostCode.IsNullable = false;
				colvarPostCode.IsPrimaryKey = false;
				colvarPostCode.IsForeignKey = false;
				colvarPostCode.IsReadOnly = false;
				colvarPostCode.DefaultSetting = @"";
				colvarPostCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostCode);
				
				TableSchema.TableColumn colvarDeliveryNote = new TableSchema.TableColumn(schema);
				colvarDeliveryNote.ColumnName = "DeliveryNote";
				colvarDeliveryNote.DataType = DbType.String;
				colvarDeliveryNote.MaxLength = 100;
				colvarDeliveryNote.AutoIncrement = false;
				colvarDeliveryNote.IsNullable = false;
				colvarDeliveryNote.IsPrimaryKey = false;
				colvarDeliveryNote.IsForeignKey = false;
				colvarDeliveryNote.IsReadOnly = false;
				colvarDeliveryNote.DefaultSetting = @"";
				colvarDeliveryNote.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeliveryNote);
				
				TableSchema.TableColumn colvarDeliveryID = new TableSchema.TableColumn(schema);
				colvarDeliveryID.ColumnName = "DeliveryID";
				colvarDeliveryID.DataType = DbType.Int32;
				colvarDeliveryID.MaxLength = 0;
				colvarDeliveryID.AutoIncrement = false;
				colvarDeliveryID.IsNullable = true;
				colvarDeliveryID.IsPrimaryKey = false;
				colvarDeliveryID.IsForeignKey = false;
				colvarDeliveryID.IsReadOnly = false;
				colvarDeliveryID.DefaultSetting = @"";
				colvarDeliveryID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeliveryID);
				
				TableSchema.TableColumn colvarPaymentNote = new TableSchema.TableColumn(schema);
				colvarPaymentNote.ColumnName = "PaymentNote";
				colvarPaymentNote.DataType = DbType.String;
				colvarPaymentNote.MaxLength = 100;
				colvarPaymentNote.AutoIncrement = false;
				colvarPaymentNote.IsNullable = false;
				colvarPaymentNote.IsPrimaryKey = false;
				colvarPaymentNote.IsForeignKey = false;
				colvarPaymentNote.IsReadOnly = false;
				colvarPaymentNote.DefaultSetting = @"";
				colvarPaymentNote.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentNote);
				
				TableSchema.TableColumn colvarPaymentID = new TableSchema.TableColumn(schema);
				colvarPaymentID.ColumnName = "PaymentID";
				colvarPaymentID.DataType = DbType.Int32;
				colvarPaymentID.MaxLength = 0;
				colvarPaymentID.AutoIncrement = false;
				colvarPaymentID.IsNullable = true;
				colvarPaymentID.IsPrimaryKey = false;
				colvarPaymentID.IsForeignKey = false;
				colvarPaymentID.IsReadOnly = false;
				colvarPaymentID.DefaultSetting = @"";
				colvarPaymentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentID);
				
				TableSchema.TableColumn colvarSaleRepID = new TableSchema.TableColumn(schema);
				colvarSaleRepID.ColumnName = "SaleRepID";
				colvarSaleRepID.DataType = DbType.Int32;
				colvarSaleRepID.MaxLength = 0;
				colvarSaleRepID.AutoIncrement = false;
				colvarSaleRepID.IsNullable = true;
				colvarSaleRepID.IsPrimaryKey = false;
				colvarSaleRepID.IsForeignKey = false;
				colvarSaleRepID.IsReadOnly = false;
				colvarSaleRepID.DefaultSetting = @"";
				colvarSaleRepID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSaleRepID);
				
				TableSchema.TableColumn colvarSaleRecords = new TableSchema.TableColumn(schema);
				colvarSaleRecords.ColumnName = "SaleRecords";
				colvarSaleRecords.DataType = DbType.String;
				colvarSaleRecords.MaxLength = 1000;
				colvarSaleRecords.AutoIncrement = false;
				colvarSaleRecords.IsNullable = false;
				colvarSaleRecords.IsPrimaryKey = false;
				colvarSaleRecords.IsForeignKey = false;
				colvarSaleRecords.IsReadOnly = false;
				colvarSaleRecords.DefaultSetting = @"";
				colvarSaleRecords.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSaleRecords);
				
				TableSchema.TableColumn colvarPackagingRequirement = new TableSchema.TableColumn(schema);
				colvarPackagingRequirement.ColumnName = "PackagingRequirement";
				colvarPackagingRequirement.DataType = DbType.String;
				colvarPackagingRequirement.MaxLength = 1000;
				colvarPackagingRequirement.AutoIncrement = false;
				colvarPackagingRequirement.IsNullable = false;
				colvarPackagingRequirement.IsPrimaryKey = false;
				colvarPackagingRequirement.IsForeignKey = false;
				colvarPackagingRequirement.IsReadOnly = false;
				colvarPackagingRequirement.DefaultSetting = @"";
				colvarPackagingRequirement.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPackagingRequirement);
				
				TableSchema.TableColumn colvarTechData = new TableSchema.TableColumn(schema);
				colvarTechData.ColumnName = "TechData";
				colvarTechData.DataType = DbType.String;
				colvarTechData.MaxLength = 1000;
				colvarTechData.AutoIncrement = false;
				colvarTechData.IsNullable = false;
				colvarTechData.IsPrimaryKey = false;
				colvarTechData.IsForeignKey = false;
				colvarTechData.IsReadOnly = false;
				colvarTechData.DefaultSetting = @"";
				colvarTechData.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechData);
				
				TableSchema.TableColumn colvarForwarderName = new TableSchema.TableColumn(schema);
				colvarForwarderName.ColumnName = "ForwarderName";
				colvarForwarderName.DataType = DbType.String;
				colvarForwarderName.MaxLength = 1000;
				colvarForwarderName.AutoIncrement = false;
				colvarForwarderName.IsNullable = false;
				colvarForwarderName.IsPrimaryKey = false;
				colvarForwarderName.IsForeignKey = false;
				colvarForwarderName.IsReadOnly = false;
				colvarForwarderName.DefaultSetting = @"";
				colvarForwarderName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarForwarderName);
				
				TableSchema.TableColumn colvarForwarderAddress = new TableSchema.TableColumn(schema);
				colvarForwarderAddress.ColumnName = "ForwarderAddress";
				colvarForwarderAddress.DataType = DbType.String;
				colvarForwarderAddress.MaxLength = 1000;
				colvarForwarderAddress.AutoIncrement = false;
				colvarForwarderAddress.IsNullable = false;
				colvarForwarderAddress.IsPrimaryKey = false;
				colvarForwarderAddress.IsForeignKey = false;
				colvarForwarderAddress.IsReadOnly = false;
				colvarForwarderAddress.DefaultSetting = @"";
				colvarForwarderAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarForwarderAddress);
				
				TableSchema.TableColumn colvarIsObsolete = new TableSchema.TableColumn(schema);
				colvarIsObsolete.ColumnName = "IsObsolete";
				colvarIsObsolete.DataType = DbType.Boolean;
				colvarIsObsolete.MaxLength = 0;
				colvarIsObsolete.AutoIncrement = false;
				colvarIsObsolete.IsNullable = false;
				colvarIsObsolete.IsPrimaryKey = false;
				colvarIsObsolete.IsForeignKey = false;
				colvarIsObsolete.IsReadOnly = false;
				colvarIsObsolete.DefaultSetting = @"";
				colvarIsObsolete.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsObsolete);
				
				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 100;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 100;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = true;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				TableSchema.TableColumn colvarCountryID = new TableSchema.TableColumn(schema);
				colvarCountryID.ColumnName = "CountryID";
				colvarCountryID.DataType = DbType.Int32;
				colvarCountryID.MaxLength = 0;
				colvarCountryID.AutoIncrement = false;
				colvarCountryID.IsNullable = false;
				colvarCountryID.IsPrimaryKey = false;
				colvarCountryID.IsForeignKey = false;
				colvarCountryID.IsReadOnly = false;
				
						colvarCountryID.DefaultSetting = @"((1))";
				colvarCountryID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountryID);
				
				TableSchema.TableColumn colvarTaxCode = new TableSchema.TableColumn(schema);
				colvarTaxCode.ColumnName = "TaxCode";
				colvarTaxCode.DataType = DbType.String;
				colvarTaxCode.MaxLength = 15;
				colvarTaxCode.AutoIncrement = false;
				colvarTaxCode.IsNullable = true;
				colvarTaxCode.IsPrimaryKey = false;
				colvarTaxCode.IsForeignKey = false;
				colvarTaxCode.IsReadOnly = false;
				colvarTaxCode.DefaultSetting = @"";
				colvarTaxCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTaxCode);
				
				TableSchema.TableColumn colvarTin = new TableSchema.TableColumn(schema);
				colvarTin.ColumnName = "TIN";
				colvarTin.DataType = DbType.String;
				colvarTin.MaxLength = 25;
				colvarTin.AutoIncrement = false;
				colvarTin.IsNullable = true;
				colvarTin.IsPrimaryKey = false;
				colvarTin.IsForeignKey = false;
				colvarTin.IsReadOnly = false;
				colvarTin.DefaultSetting = @"";
				colvarTin.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTin);
				
				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.String;
				colvarEmail.MaxLength = 200;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);
				
				TableSchema.TableColumn colvarShortName = new TableSchema.TableColumn(schema);
				colvarShortName.ColumnName = "ShortName";
				colvarShortName.DataType = DbType.String;
				colvarShortName.MaxLength = 65;
				colvarShortName.AutoIncrement = false;
				colvarShortName.IsNullable = true;
				colvarShortName.IsPrimaryKey = false;
				colvarShortName.IsForeignKey = false;
				colvarShortName.IsReadOnly = false;
				colvarShortName.DefaultSetting = @"";
				colvarShortName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShortName);
				
				TableSchema.TableColumn colvarGroupID = new TableSchema.TableColumn(schema);
				colvarGroupID.ColumnName = "GroupID";
				colvarGroupID.DataType = DbType.Int32;
				colvarGroupID.MaxLength = 0;
				colvarGroupID.AutoIncrement = false;
				colvarGroupID.IsNullable = true;
				colvarGroupID.IsPrimaryKey = false;
				colvarGroupID.IsForeignKey = false;
				colvarGroupID.IsReadOnly = false;
				colvarGroupID.DefaultSetting = @"";
				colvarGroupID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGroupID);
				
				TableSchema.TableColumn colvarSAPCode = new TableSchema.TableColumn(schema);
				colvarSAPCode.ColumnName = "SAPCode";
				colvarSAPCode.DataType = DbType.String;
				colvarSAPCode.MaxLength = 20;
				colvarSAPCode.AutoIncrement = false;
				colvarSAPCode.IsNullable = true;
				colvarSAPCode.IsPrimaryKey = false;
				colvarSAPCode.IsForeignKey = false;
				colvarSAPCode.IsReadOnly = false;
				colvarSAPCode.DefaultSetting = @"";
				colvarSAPCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSAPCode);
				
				TableSchema.TableColumn colvarInternalOrderNo = new TableSchema.TableColumn(schema);
				colvarInternalOrderNo.ColumnName = "InternalOrderNo";
				colvarInternalOrderNo.DataType = DbType.String;
				colvarInternalOrderNo.MaxLength = 10;
				colvarInternalOrderNo.AutoIncrement = false;
				colvarInternalOrderNo.IsNullable = true;
				colvarInternalOrderNo.IsPrimaryKey = false;
				colvarInternalOrderNo.IsForeignKey = false;
				colvarInternalOrderNo.IsReadOnly = false;
				colvarInternalOrderNo.DefaultSetting = @"";
				colvarInternalOrderNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInternalOrderNo);
				
				TableSchema.TableColumn colvarIsBrand = new TableSchema.TableColumn(schema);
				colvarIsBrand.ColumnName = "IsBrand";
				colvarIsBrand.DataType = DbType.Byte;
				colvarIsBrand.MaxLength = 0;
				colvarIsBrand.AutoIncrement = false;
				colvarIsBrand.IsNullable = false;
				colvarIsBrand.IsPrimaryKey = false;
				colvarIsBrand.IsForeignKey = false;
				colvarIsBrand.IsReadOnly = false;
				
						colvarIsBrand.DefaultSetting = @"((0))";
				colvarIsBrand.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsBrand);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("tblCustomer",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("CustomerID")]
		[Bindable(true)]
		public int CustomerID 
		{
			get { return GetColumnValue<int>(Columns.CustomerID); }
			set { SetColumnValue(Columns.CustomerID, value); }
		}
		  
		[XmlAttribute("Code")]
		[Bindable(true)]
		public string Code 
		{
			get { return GetColumnValue<string>(Columns.Code); }
			set { SetColumnValue(Columns.Code, value); }
		}
		  
		[XmlAttribute("Name")]
		[Bindable(true)]
		public string Name 
		{
			get { return GetColumnValue<string>(Columns.Name); }
			set { SetColumnValue(Columns.Name, value); }
		}
		  
		[XmlAttribute("Address")]
		[Bindable(true)]
		public string Address 
		{
			get { return GetColumnValue<string>(Columns.Address); }
			set { SetColumnValue(Columns.Address, value); }
		}
		  
		[XmlAttribute("City")]
		[Bindable(true)]
		public string City 
		{
			get { return GetColumnValue<string>(Columns.City); }
			set { SetColumnValue(Columns.City, value); }
		}
		  
		[XmlAttribute("Tel")]
		[Bindable(true)]
		public string Tel 
		{
			get { return GetColumnValue<string>(Columns.Tel); }
			set { SetColumnValue(Columns.Tel, value); }
		}
		  
		[XmlAttribute("Fax")]
		[Bindable(true)]
		public string Fax 
		{
			get { return GetColumnValue<string>(Columns.Fax); }
			set { SetColumnValue(Columns.Fax, value); }
		}
		  
		[XmlAttribute("PostCode")]
		[Bindable(true)]
		public string PostCode 
		{
			get { return GetColumnValue<string>(Columns.PostCode); }
			set { SetColumnValue(Columns.PostCode, value); }
		}
		  
		[XmlAttribute("DeliveryNote")]
		[Bindable(true)]
		public string DeliveryNote 
		{
			get { return GetColumnValue<string>(Columns.DeliveryNote); }
			set { SetColumnValue(Columns.DeliveryNote, value); }
		}
		  
		[XmlAttribute("DeliveryID")]
		[Bindable(true)]
		public int? DeliveryID 
		{
			get { return GetColumnValue<int?>(Columns.DeliveryID); }
			set { SetColumnValue(Columns.DeliveryID, value); }
		}
		  
		[XmlAttribute("PaymentNote")]
		[Bindable(true)]
		public string PaymentNote 
		{
			get { return GetColumnValue<string>(Columns.PaymentNote); }
			set { SetColumnValue(Columns.PaymentNote, value); }
		}
		  
		[XmlAttribute("PaymentID")]
		[Bindable(true)]
		public int? PaymentID 
		{
			get { return GetColumnValue<int?>(Columns.PaymentID); }
			set { SetColumnValue(Columns.PaymentID, value); }
		}
		  
		[XmlAttribute("SaleRepID")]
		[Bindable(true)]
		public int? SaleRepID 
		{
			get { return GetColumnValue<int?>(Columns.SaleRepID); }
			set { SetColumnValue(Columns.SaleRepID, value); }
		}
		  
		[XmlAttribute("SaleRecords")]
		[Bindable(true)]
		public string SaleRecords 
		{
			get { return GetColumnValue<string>(Columns.SaleRecords); }
			set { SetColumnValue(Columns.SaleRecords, value); }
		}
		  
		[XmlAttribute("PackagingRequirement")]
		[Bindable(true)]
		public string PackagingRequirement 
		{
			get { return GetColumnValue<string>(Columns.PackagingRequirement); }
			set { SetColumnValue(Columns.PackagingRequirement, value); }
		}
		  
		[XmlAttribute("TechData")]
		[Bindable(true)]
		public string TechData 
		{
			get { return GetColumnValue<string>(Columns.TechData); }
			set { SetColumnValue(Columns.TechData, value); }
		}
		  
		[XmlAttribute("ForwarderName")]
		[Bindable(true)]
		public string ForwarderName 
		{
			get { return GetColumnValue<string>(Columns.ForwarderName); }
			set { SetColumnValue(Columns.ForwarderName, value); }
		}
		  
		[XmlAttribute("ForwarderAddress")]
		[Bindable(true)]
		public string ForwarderAddress 
		{
			get { return GetColumnValue<string>(Columns.ForwarderAddress); }
			set { SetColumnValue(Columns.ForwarderAddress, value); }
		}
		  
		[XmlAttribute("IsObsolete")]
		[Bindable(true)]
		public bool IsObsolete 
		{
			get { return GetColumnValue<bool>(Columns.IsObsolete); }
			set { SetColumnValue(Columns.IsObsolete, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public string CreatedBy 
		{
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedBy")]
		[Bindable(true)]
		public string ModifiedBy 
		{
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("CountryID")]
		[Bindable(true)]
		public int CountryID 
		{
			get { return GetColumnValue<int>(Columns.CountryID); }
			set { SetColumnValue(Columns.CountryID, value); }
		}
		  
		[XmlAttribute("TaxCode")]
		[Bindable(true)]
		public string TaxCode 
		{
			get { return GetColumnValue<string>(Columns.TaxCode); }
			set { SetColumnValue(Columns.TaxCode, value); }
		}
		  
		[XmlAttribute("Tin")]
		[Bindable(true)]
		public string Tin 
		{
			get { return GetColumnValue<string>(Columns.Tin); }
			set { SetColumnValue(Columns.Tin, value); }
		}
		  
		[XmlAttribute("Email")]
		[Bindable(true)]
		public string Email 
		{
			get { return GetColumnValue<string>(Columns.Email); }
			set { SetColumnValue(Columns.Email, value); }
		}
		  
		[XmlAttribute("ShortName")]
		[Bindable(true)]
		public string ShortName 
		{
			get { return GetColumnValue<string>(Columns.ShortName); }
			set { SetColumnValue(Columns.ShortName, value); }
		}
		  
		[XmlAttribute("GroupID")]
		[Bindable(true)]
		public int? GroupID 
		{
			get { return GetColumnValue<int?>(Columns.GroupID); }
			set { SetColumnValue(Columns.GroupID, value); }
		}
		  
		[XmlAttribute("SAPCode")]
		[Bindable(true)]
		public string SAPCode 
		{
			get { return GetColumnValue<string>(Columns.SAPCode); }
			set { SetColumnValue(Columns.SAPCode, value); }
		}
		  
		[XmlAttribute("InternalOrderNo")]
		[Bindable(true)]
		public string InternalOrderNo 
		{
			get { return GetColumnValue<string>(Columns.InternalOrderNo); }
			set { SetColumnValue(Columns.InternalOrderNo, value); }
		}
		  
		[XmlAttribute("IsBrand")]
		[Bindable(true)]
		public byte IsBrand 
		{
			get { return GetColumnValue<byte>(Columns.IsBrand); }
			set { SetColumnValue(Columns.IsBrand, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		private SweetSoft.APEM.DataAccess.TblContactCollection colTblContactRecords;
		public SweetSoft.APEM.DataAccess.TblContactCollection TblContactRecords()
		{
			if(colTblContactRecords == null)
			{
				colTblContactRecords = new SweetSoft.APEM.DataAccess.TblContactCollection().Where(TblContact.Columns.CustomerID, CustomerID).Load();
				colTblContactRecords.ListChanged += new ListChangedEventHandler(colTblContactRecords_ListChanged);
			}
			return colTblContactRecords;
		}
				
		void colTblContactRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colTblContactRecords[e.NewIndex].CustomerID = CustomerID;
            }
		}
		private SweetSoft.APEM.DataAccess.TblCustomerQuotationCollection colTblCustomerQuotationRecords;
		public SweetSoft.APEM.DataAccess.TblCustomerQuotationCollection TblCustomerQuotationRecords()
		{
			if(colTblCustomerQuotationRecords == null)
			{
				colTblCustomerQuotationRecords = new SweetSoft.APEM.DataAccess.TblCustomerQuotationCollection().Where(TblCustomerQuotation.Columns.CustomerID, CustomerID).Load();
				colTblCustomerQuotationRecords.ListChanged += new ListChangedEventHandler(colTblCustomerQuotationRecords_ListChanged);
			}
			return colTblCustomerQuotationRecords;
		}
				
		void colTblCustomerQuotationRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colTblCustomerQuotationRecords[e.NewIndex].CustomerID = CustomerID;
            }
		}
		private SweetSoft.APEM.DataAccess.TblJobCollection colTblJobRecords;
		public SweetSoft.APEM.DataAccess.TblJobCollection TblJobRecords()
		{
			if(colTblJobRecords == null)
			{
				colTblJobRecords = new SweetSoft.APEM.DataAccess.TblJobCollection().Where(TblJob.Columns.CustomerID, CustomerID).Load();
				colTblJobRecords.ListChanged += new ListChangedEventHandler(colTblJobRecords_ListChanged);
			}
			return colTblJobRecords;
		}
				
		void colTblJobRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colTblJobRecords[e.NewIndex].CustomerID = CustomerID;
            }
		}
		#endregion
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varCode,string varName,string varAddress,string varCity,string varTel,string varFax,string varPostCode,string varDeliveryNote,int? varDeliveryID,string varPaymentNote,int? varPaymentID,int? varSaleRepID,string varSaleRecords,string varPackagingRequirement,string varTechData,string varForwarderName,string varForwarderAddress,bool varIsObsolete,string varCreatedBy,DateTime? varCreatedOn,string varModifiedBy,DateTime? varModifiedOn,int varCountryID,string varTaxCode,string varTin,string varEmail,string varShortName,int? varGroupID,string varSAPCode,string varInternalOrderNo,byte varIsBrand)
		{
			TblCustomer item = new TblCustomer();
			
			item.Code = varCode;
			
			item.Name = varName;
			
			item.Address = varAddress;
			
			item.City = varCity;
			
			item.Tel = varTel;
			
			item.Fax = varFax;
			
			item.PostCode = varPostCode;
			
			item.DeliveryNote = varDeliveryNote;
			
			item.DeliveryID = varDeliveryID;
			
			item.PaymentNote = varPaymentNote;
			
			item.PaymentID = varPaymentID;
			
			item.SaleRepID = varSaleRepID;
			
			item.SaleRecords = varSaleRecords;
			
			item.PackagingRequirement = varPackagingRequirement;
			
			item.TechData = varTechData;
			
			item.ForwarderName = varForwarderName;
			
			item.ForwarderAddress = varForwarderAddress;
			
			item.IsObsolete = varIsObsolete;
			
			item.CreatedBy = varCreatedBy;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedBy = varModifiedBy;
			
			item.ModifiedOn = varModifiedOn;
			
			item.CountryID = varCountryID;
			
			item.TaxCode = varTaxCode;
			
			item.Tin = varTin;
			
			item.Email = varEmail;
			
			item.ShortName = varShortName;
			
			item.GroupID = varGroupID;
			
			item.SAPCode = varSAPCode;
			
			item.InternalOrderNo = varInternalOrderNo;
			
			item.IsBrand = varIsBrand;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varCustomerID,string varCode,string varName,string varAddress,string varCity,string varTel,string varFax,string varPostCode,string varDeliveryNote,int? varDeliveryID,string varPaymentNote,int? varPaymentID,int? varSaleRepID,string varSaleRecords,string varPackagingRequirement,string varTechData,string varForwarderName,string varForwarderAddress,bool varIsObsolete,string varCreatedBy,DateTime? varCreatedOn,string varModifiedBy,DateTime? varModifiedOn,int varCountryID,string varTaxCode,string varTin,string varEmail,string varShortName,int? varGroupID,string varSAPCode,string varInternalOrderNo,byte varIsBrand)
		{
			TblCustomer item = new TblCustomer();
			
				item.CustomerID = varCustomerID;
			
				item.Code = varCode;
			
				item.Name = varName;
			
				item.Address = varAddress;
			
				item.City = varCity;
			
				item.Tel = varTel;
			
				item.Fax = varFax;
			
				item.PostCode = varPostCode;
			
				item.DeliveryNote = varDeliveryNote;
			
				item.DeliveryID = varDeliveryID;
			
				item.PaymentNote = varPaymentNote;
			
				item.PaymentID = varPaymentID;
			
				item.SaleRepID = varSaleRepID;
			
				item.SaleRecords = varSaleRecords;
			
				item.PackagingRequirement = varPackagingRequirement;
			
				item.TechData = varTechData;
			
				item.ForwarderName = varForwarderName;
			
				item.ForwarderAddress = varForwarderAddress;
			
				item.IsObsolete = varIsObsolete;
			
				item.CreatedBy = varCreatedBy;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedBy = varModifiedBy;
			
				item.ModifiedOn = varModifiedOn;
			
				item.CountryID = varCountryID;
			
				item.TaxCode = varTaxCode;
			
				item.Tin = varTin;
			
				item.Email = varEmail;
			
				item.ShortName = varShortName;
			
				item.GroupID = varGroupID;
			
				item.SAPCode = varSAPCode;
			
				item.InternalOrderNo = varInternalOrderNo;
			
				item.IsBrand = varIsBrand;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn CustomerIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn NameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn AddressColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CityColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn TelColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn FaxColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn PostCodeColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn DeliveryNoteColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn DeliveryIDColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentNoteColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentIDColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn SaleRepIDColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn SaleRecordsColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn PackagingRequirementColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn TechDataColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn ForwarderNameColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn ForwarderAddressColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn IsObsoleteColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedByColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn CountryIDColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn TaxCodeColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn TinColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn EmailColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn ShortNameColumn
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        public static TableSchema.TableColumn GroupIDColumn
        {
            get { return Schema.Columns[28]; }
        }
        
        
        
        public static TableSchema.TableColumn SAPCodeColumn
        {
            get { return Schema.Columns[29]; }
        }
        
        
        
        public static TableSchema.TableColumn InternalOrderNoColumn
        {
            get { return Schema.Columns[30]; }
        }
        
        
        
        public static TableSchema.TableColumn IsBrandColumn
        {
            get { return Schema.Columns[31]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string CustomerID = @"CustomerID";
			 public static string Code = @"Code";
			 public static string Name = @"Name";
			 public static string Address = @"Address";
			 public static string City = @"City";
			 public static string Tel = @"Tel";
			 public static string Fax = @"Fax";
			 public static string PostCode = @"PostCode";
			 public static string DeliveryNote = @"DeliveryNote";
			 public static string DeliveryID = @"DeliveryID";
			 public static string PaymentNote = @"PaymentNote";
			 public static string PaymentID = @"PaymentID";
			 public static string SaleRepID = @"SaleRepID";
			 public static string SaleRecords = @"SaleRecords";
			 public static string PackagingRequirement = @"PackagingRequirement";
			 public static string TechData = @"TechData";
			 public static string ForwarderName = @"ForwarderName";
			 public static string ForwarderAddress = @"ForwarderAddress";
			 public static string IsObsolete = @"IsObsolete";
			 public static string CreatedBy = @"CreatedBy";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedBy = @"ModifiedBy";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string CountryID = @"CountryID";
			 public static string TaxCode = @"TaxCode";
			 public static string Tin = @"TIN";
			 public static string Email = @"Email";
			 public static string ShortName = @"ShortName";
			 public static string GroupID = @"GroupID";
			 public static string SAPCode = @"SAPCode";
			 public static string InternalOrderNo = @"InternalOrderNo";
			 public static string IsBrand = @"IsBrand";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
                if (colTblContactRecords != null)
                {
                    foreach (SweetSoft.APEM.DataAccess.TblContact item in colTblContactRecords)
                    {
                        if (item.CustomerID != CustomerID)
                        {
                            item.CustomerID = CustomerID;
                        }
                    }
               }
		
                if (colTblCustomerQuotationRecords != null)
                {
                    foreach (SweetSoft.APEM.DataAccess.TblCustomerQuotation item in colTblCustomerQuotationRecords)
                    {
                        if (item.CustomerID != CustomerID)
                        {
                            item.CustomerID = CustomerID;
                        }
                    }
               }
		
                if (colTblJobRecords != null)
                {
                    foreach (SweetSoft.APEM.DataAccess.TblJob item in colTblJobRecords)
                    {
                        if (item.CustomerID != CustomerID)
                        {
                            item.CustomerID = CustomerID;
                        }
                    }
               }
		}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
                if (colTblContactRecords != null)
                {
                    colTblContactRecords.SaveAll();
               }
		
                if (colTblCustomerQuotationRecords != null)
                {
                    colTblCustomerQuotationRecords.SaveAll();
               }
		
                if (colTblJobRecords != null)
                {
                    colTblJobRecords.SaveAll();
               }
		}
        #endregion
	}
}
