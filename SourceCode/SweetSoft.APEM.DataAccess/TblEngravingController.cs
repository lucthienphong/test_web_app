using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
    /// <summary>
    /// Controller class for tblEngraving
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TblEngravingController
    {
        // Preload our schema..
        TblEngraving thisSchemaLoad = new TblEngraving();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TblEngravingCollection FetchAll()
        {
            TblEngravingCollection coll = new TblEngravingCollection();
            Query qry = new Query(TblEngraving.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblEngravingCollection FetchByID(object JobID)
        {
            TblEngravingCollection coll = new TblEngravingCollection().Where("JobID", JobID).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblEngravingCollection FetchByQuery(Query qry)
        {
            TblEngravingCollection coll = new TblEngravingCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object JobID)
        {
            return (TblEngraving.Delete(JobID) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object JobID)
        {
            return (TblEngraving.Destroy(JobID) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public TblEngraving Insert(TblEngraving obj)
	    {
		    obj.Save(UserName);
            return obj;
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public TblEngraving Update(TblEngraving obj)
	    {
		    TblEngraving item = new TblEngraving();
	        item.MarkOld();
	        item.IsLoaded = true;

            item.JobID = obj.JobID;

            item.EngravingStart = obj.EngravingStart;

            item.JobCoOrd = obj.JobCoOrd;

            item.EngravingOnNut = obj.EngravingOnNut;

            item.EngravingOnBoader = obj.EngravingOnBoader;

            item.ChromeThickness = obj.ChromeThickness;

            item.Roughness = obj.Roughness;

            item.LaserStart = obj.LaserStart;

            item.LaserOperator = obj.LaserOperator;

            item.FinalControl = obj.FinalControl;

            item.CreatedBy = obj.CreatedBy;

            item.CreatedOn = obj.CreatedOn;

            item.ModifiedBy = obj.ModifiedBy;

            item.ModifiedOn = obj.ModifiedOn;

            item.FileSizeHEMG = obj.FileSizeHEMG;

            item.FileSizeVEMG = obj.FileSizeVEMG;

            item.FileSizeHDLS = obj.FileSizeHDLS;

            item.FileSizeVDLS = obj.FileSizeVDLS;

            item.FileSizeHEtching = obj.FileSizeHEtching;

            item.FileSizeVEtching = obj.FileSizeVEtching;

            item.SRRemarkEMG = obj.SRRemarkEMG;

            item.SRRemarkDLS = obj.SRRemarkDLS;

            item.SRRemarkEtching = obj.SRRemarkEtching;

            item.TobaccoType = obj.TobaccoType;

            item.EngravingWidth = obj.EngravingWidth;

            item.EngrStartEtching = obj.EngrStartEtching;

            item.EngrWidthEtching = obj.EngrWidthEtching;
				
	        item.Save(UserName);

            return item;
	    }
    }
}
