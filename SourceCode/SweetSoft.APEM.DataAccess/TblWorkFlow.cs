using System;
using System.Text;
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Xml;
using System.Xml.Serialization;
using SubSonic;
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
    /// <summary>
    /// Strongly-typed collection for the TblWorkFlow class.
    /// </summary>
    [Serializable]
    public partial class TblWorkFlowCollection : ActiveList<TblWorkFlow, TblWorkFlowCollection>
    {
        public TblWorkFlowCollection() { }

        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblWorkFlowCollection</returns>
        public TblWorkFlowCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblWorkFlow o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }


    }
    /// <summary>
    /// This is an ActiveRecord class which wraps the tblWorkFlow table.
    /// </summary>
    [Serializable]
    public partial class TblWorkFlow : ActiveRecord<TblWorkFlow>, IActiveRecord
    {
        #region .ctors and Default Settings

        public TblWorkFlow()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        private void InitSetDefaults() { SetDefaults(); }

        public TblWorkFlow(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public TblWorkFlow(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public TblWorkFlow(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        protected static void SetSQLProps() { GetTableSchema(); }

        #endregion

        #region Schema and Query Accessor
        public static Query CreateQuery() { return new Query(Schema); }
        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("tblWorkFlow", TableType.Table, DataService.GetInstance("DataAcessProvider"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
                colvarId.ColumnName = "ID";
                colvarId.DataType = DbType.Int32;
                colvarId.MaxLength = 0;
                colvarId.AutoIncrement = true;
                colvarId.IsNullable = false;
                colvarId.IsPrimaryKey = true;
                colvarId.IsForeignKey = false;
                colvarId.IsReadOnly = false;
                colvarId.DefaultSetting = @"";
                colvarId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarId);

                TableSchema.TableColumn colvarFID = new TableSchema.TableColumn(schema);
                colvarFID.ColumnName = "fID";
                colvarFID.DataType = DbType.Int32;
                colvarFID.MaxLength = 0;
                colvarFID.AutoIncrement = false;
                colvarFID.IsNullable = true;
                colvarFID.IsPrimaryKey = false;
                colvarFID.IsForeignKey = false;
                colvarFID.IsReadOnly = false;
                colvarFID.DefaultSetting = @"";
                colvarFID.ForeignKeyTableName = "";
                schema.Columns.Add(colvarFID);

                TableSchema.TableColumn colvarCode = new TableSchema.TableColumn(schema);
                colvarCode.ColumnName = "Code";
                colvarCode.DataType = DbType.String;
                colvarCode.MaxLength = 50;
                colvarCode.AutoIncrement = false;
                colvarCode.IsNullable = true;
                colvarCode.IsPrimaryKey = false;
                colvarCode.IsForeignKey = false;
                colvarCode.IsReadOnly = false;
                colvarCode.DefaultSetting = @"";
                colvarCode.ForeignKeyTableName = "";
                schema.Columns.Add(colvarCode);

                TableSchema.TableColumn colvarIsFirstPage = new TableSchema.TableColumn(schema);
                colvarIsFirstPage.ColumnName = "IsFirstPage";
                colvarIsFirstPage.DataType = DbType.Boolean;
                colvarIsFirstPage.MaxLength = 0;
                colvarIsFirstPage.AutoIncrement = false;
                colvarIsFirstPage.IsNullable = true;
                colvarIsFirstPage.IsPrimaryKey = false;
                colvarIsFirstPage.IsForeignKey = false;
                colvarIsFirstPage.IsReadOnly = false;
                colvarIsFirstPage.DefaultSetting = @"";
                colvarIsFirstPage.ForeignKeyTableName = "";
                schema.Columns.Add(colvarIsFirstPage);

                TableSchema.TableColumn colvarIsShow = new TableSchema.TableColumn(schema);
                colvarIsShow.ColumnName = "IsShow";
                colvarIsShow.DataType = DbType.Boolean;
                colvarIsShow.MaxLength = 0;
                colvarIsShow.AutoIncrement = false;
                colvarIsShow.IsNullable = true;
                colvarIsShow.IsPrimaryKey = false;
                colvarIsShow.IsForeignKey = false;
                colvarIsShow.IsReadOnly = false;
                colvarIsShow.DefaultSetting = @"";
                colvarIsShow.ForeignKeyTableName = "";
                schema.Columns.Add(colvarIsShow);

                TableSchema.TableColumn colvarContentXML = new TableSchema.TableColumn(schema);
                colvarContentXML.ColumnName = "ContentXML";
                colvarContentXML.DataType = DbType.String;
                colvarContentXML.MaxLength = 1073741823;
                colvarContentXML.AutoIncrement = false;
                colvarContentXML.IsNullable = true;
                colvarContentXML.IsPrimaryKey = false;
                colvarContentXML.IsForeignKey = false;
                colvarContentXML.IsReadOnly = false;
                colvarContentXML.DefaultSetting = @"";
                colvarContentXML.ForeignKeyTableName = "";
                schema.Columns.Add(colvarContentXML);

                TableSchema.TableColumn colvarAxisTypeID = new TableSchema.TableColumn(schema);
                colvarAxisTypeID.ColumnName = "AxisTypeID";
                colvarAxisTypeID.DataType = DbType.Int32;
                colvarAxisTypeID.MaxLength = 0;
                colvarAxisTypeID.AutoIncrement = false;
                colvarAxisTypeID.IsNullable = true;
                colvarAxisTypeID.IsPrimaryKey = false;
                colvarAxisTypeID.IsForeignKey = false;
                colvarAxisTypeID.IsReadOnly = false;
                colvarAxisTypeID.DefaultSetting = @"";
                colvarAxisTypeID.ForeignKeyTableName = "";
                schema.Columns.Add(colvarAxisTypeID);

                TableSchema.TableColumn colvarMachineryProduceTypeID = new TableSchema.TableColumn(schema);
                colvarMachineryProduceTypeID.ColumnName = "MachineryProduceTypeID";
                colvarMachineryProduceTypeID.DataType = DbType.Int32;
                colvarMachineryProduceTypeID.MaxLength = 0;
                colvarMachineryProduceTypeID.AutoIncrement = false;
                colvarMachineryProduceTypeID.IsNullable = false;
                colvarMachineryProduceTypeID.IsPrimaryKey = false;
                colvarMachineryProduceTypeID.IsForeignKey = true;
                colvarMachineryProduceTypeID.IsReadOnly = false;
                colvarMachineryProduceTypeID.DefaultSetting = @"";

                colvarMachineryProduceTypeID.ForeignKeyTableName = "tblMachinaryProduceType";
                schema.Columns.Add(colvarMachineryProduceTypeID);

                TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
                colvarCreatedBy.ColumnName = "CreatedBy";
                colvarCreatedBy.DataType = DbType.String;
                colvarCreatedBy.MaxLength = 100;
                colvarCreatedBy.AutoIncrement = false;
                colvarCreatedBy.IsNullable = true;
                colvarCreatedBy.IsPrimaryKey = false;
                colvarCreatedBy.IsForeignKey = false;
                colvarCreatedBy.IsReadOnly = false;
                colvarCreatedBy.DefaultSetting = @"";
                colvarCreatedBy.ForeignKeyTableName = "";
                schema.Columns.Add(colvarCreatedBy);

                TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
                colvarCreatedOn.ColumnName = "CreatedOn";
                colvarCreatedOn.DataType = DbType.DateTime;
                colvarCreatedOn.MaxLength = 0;
                colvarCreatedOn.AutoIncrement = false;
                colvarCreatedOn.IsNullable = true;
                colvarCreatedOn.IsPrimaryKey = false;
                colvarCreatedOn.IsForeignKey = false;
                colvarCreatedOn.IsReadOnly = false;
                colvarCreatedOn.DefaultSetting = @"";
                colvarCreatedOn.ForeignKeyTableName = "";
                schema.Columns.Add(colvarCreatedOn);

                TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
                colvarModifiedBy.ColumnName = "ModifiedBy";
                colvarModifiedBy.DataType = DbType.String;
                colvarModifiedBy.MaxLength = 100;
                colvarModifiedBy.AutoIncrement = false;
                colvarModifiedBy.IsNullable = true;
                colvarModifiedBy.IsPrimaryKey = false;
                colvarModifiedBy.IsForeignKey = false;
                colvarModifiedBy.IsReadOnly = false;
                colvarModifiedBy.DefaultSetting = @"";
                colvarModifiedBy.ForeignKeyTableName = "";
                schema.Columns.Add(colvarModifiedBy);

                TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
                colvarModifiedOn.ColumnName = "ModifiedOn";
                colvarModifiedOn.DataType = DbType.DateTime;
                colvarModifiedOn.MaxLength = 0;
                colvarModifiedOn.AutoIncrement = false;
                colvarModifiedOn.IsNullable = true;
                colvarModifiedOn.IsPrimaryKey = false;
                colvarModifiedOn.IsForeignKey = false;
                colvarModifiedOn.IsReadOnly = false;
                colvarModifiedOn.DefaultSetting = @"";
                colvarModifiedOn.ForeignKeyTableName = "";
                schema.Columns.Add(colvarModifiedOn);

                TableSchema.TableColumn colvarIdParent = new TableSchema.TableColumn(schema);
                colvarIdParent.ColumnName = "IdParent";
                colvarIdParent.DataType = DbType.Int32;
                colvarIdParent.MaxLength = 0;
                colvarIdParent.AutoIncrement = false;
                colvarIdParent.IsNullable = false;
                colvarIdParent.IsPrimaryKey = false;
                colvarIdParent.IsForeignKey = false;
                colvarIdParent.IsReadOnly = false;
                colvarIdParent.DefaultSetting = @"";
                colvarIdParent.ForeignKeyTableName = "";
                schema.Columns.Add(colvarIdParent);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["DataAcessProvider"].AddSchema("tblWorkFlow", schema);
            }
        }
        #endregion

        #region Props

        [XmlAttribute("Id")]
        [Bindable(true)]
        public int Id
        {
            get { return GetColumnValue<int>(Columns.Id); }
            set { SetColumnValue(Columns.Id, value); }
        }

        [XmlAttribute("FID")]
        [Bindable(true)]
        public int? FID
        {
            get { return GetColumnValue<int?>(Columns.FID); }
            set { SetColumnValue(Columns.FID, value); }
        }

        [XmlAttribute("Code")]
        [Bindable(true)]
        public string Code
        {
            get { return GetColumnValue<string>(Columns.Code); }
            set { SetColumnValue(Columns.Code, value); }
        }

        [XmlAttribute("IsFirstPage")]
        [Bindable(true)]
        public bool? IsFirstPage
        {
            get { return GetColumnValue<bool?>(Columns.IsFirstPage); }
            set { SetColumnValue(Columns.IsFirstPage, value); }
        }

        [XmlAttribute("IsShow")]
        [Bindable(true)]
        public bool? IsShow
        {
            get { return GetColumnValue<bool?>(Columns.IsShow); }
            set { SetColumnValue(Columns.IsShow, value); }
        }

        [XmlAttribute("ContentXML")]
        [Bindable(true)]
        public string ContentXML
        {
            get { return GetColumnValue<string>(Columns.ContentXML); }
            set { SetColumnValue(Columns.ContentXML, value); }
        }

        [XmlAttribute("AxisTypeID")]
        [Bindable(true)]
        public int? AxisTypeID
        {
            get { return GetColumnValue<int?>(Columns.AxisTypeID); }
            set { SetColumnValue(Columns.AxisTypeID, value); }
        }

        [XmlAttribute("MachineryProduceTypeID")]
        [Bindable(true)]
        public int MachineryProduceTypeID
        {
            get { return GetColumnValue<int>(Columns.MachineryProduceTypeID); }
            set { SetColumnValue(Columns.MachineryProduceTypeID, value); }
        }

        [XmlAttribute("CreatedBy")]
        [Bindable(true)]
        public string CreatedBy
        {
            get { return GetColumnValue<string>(Columns.CreatedBy); }
            set { SetColumnValue(Columns.CreatedBy, value); }
        }

        [XmlAttribute("CreatedOn")]
        [Bindable(true)]
        public DateTime? CreatedOn
        {
            get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
            set { SetColumnValue(Columns.CreatedOn, value); }
        }

        [XmlAttribute("ModifiedBy")]
        [Bindable(true)]
        public string ModifiedBy
        {
            get { return GetColumnValue<string>(Columns.ModifiedBy); }
            set { SetColumnValue(Columns.ModifiedBy, value); }
        }

        [XmlAttribute("ModifiedOn")]
        [Bindable(true)]
        public DateTime? ModifiedOn
        {
            get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
            set { SetColumnValue(Columns.ModifiedOn, value); }
        }

        [XmlAttribute("IdParent")]
        [Bindable(true)]
        public int? IdParent
        {
            get { return GetColumnValue<int?>(Columns.IdParent); }
            set { SetColumnValue(Columns.IdParent, value); }
        }

        #endregion


        #region PrimaryKey Methods

        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);

            SetPKValues();
        }


        private SweetSoft.APEM.DataAccess.TblWorkFlowLineCollection colTblWorkFlowLineRecords;
        public SweetSoft.APEM.DataAccess.TblWorkFlowLineCollection TblWorkFlowLineRecords()
        {
            if (colTblWorkFlowLineRecords == null)
            {
                colTblWorkFlowLineRecords = new SweetSoft.APEM.DataAccess.TblWorkFlowLineCollection().Where(TblWorkFlowLine.Columns.WorkFlowID, Id).Load();
                colTblWorkFlowLineRecords.ListChanged += new ListChangedEventHandler(colTblWorkFlowLineRecords_ListChanged);
            }
            return colTblWorkFlowLineRecords;
        }

        void colTblWorkFlowLineRecords_ListChanged(object sender, ListChangedEventArgs e)
        {
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
                // Set foreign key value
                colTblWorkFlowLineRecords[e.NewIndex].WorkFlowID = Id;
            }
        }
        private SweetSoft.APEM.DataAccess.TblWorkFlowNodeCollection colTblWorkFlowNodeRecords;
        public SweetSoft.APEM.DataAccess.TblWorkFlowNodeCollection TblWorkFlowNodeRecords()
        {
            if (colTblWorkFlowNodeRecords == null)
            {
                colTblWorkFlowNodeRecords = new SweetSoft.APEM.DataAccess.TblWorkFlowNodeCollection().Where(TblWorkFlowNode.Columns.WorkFlowID, Id).Load();
                colTblWorkFlowNodeRecords.ListChanged += new ListChangedEventHandler(colTblWorkFlowNodeRecords_ListChanged);
            }
            return colTblWorkFlowNodeRecords;
        }

        void colTblWorkFlowNodeRecords_ListChanged(object sender, ListChangedEventArgs e)
        {
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
                // Set foreign key value
                colTblWorkFlowNodeRecords[e.NewIndex].WorkFlowID = Id;
            }
        }
        #endregion


        //no ManyToMany tables defined (0)



        #region ObjectDataSource support


        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(int? varFID, string varCode, bool? varIsFirstPage,
            bool? varIsShow, string varContentXML, int? varAxisTypeID,
            int varMachineryProduceTypeID, 
            string varCreatedBy, DateTime? varCreatedOn, string varModifiedBy,
            DateTime? varModifiedOn, int? varIdParent)
        {
            TblWorkFlow item = new TblWorkFlow();

            item.FID = varFID;

            item.Code = varCode;

            item.IsFirstPage = varIsFirstPage;

            item.IsShow = varIsShow;

            item.ContentXML = varContentXML;

            item.AxisTypeID = varAxisTypeID;

            item.MachineryProduceTypeID = varMachineryProduceTypeID;

            item.CreatedBy = varCreatedBy;

            item.CreatedOn = varCreatedOn;

            item.ModifiedBy = varModifiedBy;

            item.ModifiedOn = varModifiedOn;

            item.IdParent = varIdParent;


            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(int varId, int? varFID, string varCode,
            bool? varIsFirstPage, bool? varIsShow, string varContentXML,
            int? varAxisTypeID, int varMachineryProduceTypeID,
             string varCreatedBy,
            DateTime? varCreatedOn, string varModifiedBy,
            DateTime? varModifiedOn, int? varIdParent)
        {
            TblWorkFlow item = new TblWorkFlow();

            item.Id = varId;

            item.FID = varFID;

            item.Code = varCode;

            item.IsFirstPage = varIsFirstPage;

            item.IsShow = varIsShow;

            item.ContentXML = varContentXML;

            item.AxisTypeID = varAxisTypeID;

            item.MachineryProduceTypeID = varMachineryProduceTypeID;

            item.CreatedBy = varCreatedBy;

            item.CreatedOn = varCreatedOn;

            item.ModifiedBy = varModifiedBy;

            item.ModifiedOn = varModifiedOn;

            item.IdParent = varIdParent;

            item.IsNew = false;
            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion



        #region Typed Columns


        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }



        public static TableSchema.TableColumn FIDColumn
        {
            get { return Schema.Columns[1]; }
        }



        public static TableSchema.TableColumn CodeColumn
        {
            get { return Schema.Columns[2]; }
        }



        public static TableSchema.TableColumn IsFirstPageColumn
        {
            get { return Schema.Columns[3]; }
        }



        public static TableSchema.TableColumn IsShowColumn
        {
            get { return Schema.Columns[4]; }
        }



        public static TableSchema.TableColumn ContentXMLColumn
        {
            get { return Schema.Columns[5]; }
        }



        public static TableSchema.TableColumn AxisTypeIDColumn
        {
            get { return Schema.Columns[6]; }
        }



        public static TableSchema.TableColumn MachineryProduceTypeIDColumn
        {
            get { return Schema.Columns[7]; }
        }


        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[8]; }
        }



        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[9]; }
        }



        public static TableSchema.TableColumn ModifiedByColumn
        {
            get { return Schema.Columns[10]; }
        }


        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[11]; }
        }


        public static TableSchema.TableColumn IdParentColumn
        {
            get { return Schema.Columns[12]; }
        }



        #endregion

        #region Columns Struct
        public struct Columns
        {
            public static string Id = @"ID";
            public static string FID = @"fID";
            public static string Code = @"Code";
            public static string IsFirstPage = @"IsFirstPage";
            public static string IsShow = @"IsShow";
            public static string ContentXML = @"ContentXML";
            public static string AxisTypeID = @"AxisTypeID";
            public static string MachineryProduceTypeID = @"MachineryProduceTypeID";
            public static string CreatedBy = @"CreatedBy";
            public static string CreatedOn = @"CreatedOn";
            public static string ModifiedBy = @"ModifiedBy";
            public static string ModifiedOn = @"ModifiedOn";
            public static string IdParent = @"IdParent";

        }

        #endregion

        #region Update PK Collections

        public void SetPKValues()
        {
            if (colTblWorkFlowLineRecords != null)
            {
                foreach (SweetSoft.APEM.DataAccess.TblWorkFlowLine item in colTblWorkFlowLineRecords)
                {
                    if (item.WorkFlowID == null || item.WorkFlowID != Id)
                    {
                        item.WorkFlowID = Id;
                    }
                }
            }

            if (colTblWorkFlowNodeRecords != null)
            {
                foreach (SweetSoft.APEM.DataAccess.TblWorkFlowNode item in colTblWorkFlowNodeRecords)
                {
                    if (item.WorkFlowID == null || item.WorkFlowID != Id)
                    {
                        item.WorkFlowID = Id;
                    }
                }
            }
        }
        #endregion

        #region Deep Save

        public void DeepSave()
        {
            Save();

            if (colTblWorkFlowLineRecords != null)
            {
                colTblWorkFlowLineRecords.SaveAll();
            }

            if (colTblWorkFlowNodeRecords != null)
            {
                colTblWorkFlowNodeRecords.SaveAll();
            }
        }
        #endregion
    }
}
