using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblPurchaseOrderCylinder class.
	/// </summary>
    [Serializable]
	public partial class TblPurchaseOrderCylinderCollection : ActiveList<TblPurchaseOrderCylinder, TblPurchaseOrderCylinderCollection>
	{	   
		public TblPurchaseOrderCylinderCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblPurchaseOrderCylinderCollection</returns>
		public TblPurchaseOrderCylinderCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblPurchaseOrderCylinder o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblPurchaseOrder_Cylinder table.
	/// </summary>
	[Serializable]
	public partial class TblPurchaseOrderCylinder : ActiveRecord<TblPurchaseOrderCylinder>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblPurchaseOrderCylinder()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblPurchaseOrderCylinder(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblPurchaseOrderCylinder(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblPurchaseOrderCylinder(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblPurchaseOrder_Cylinder", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarPurchaseOrderID = new TableSchema.TableColumn(schema);
				colvarPurchaseOrderID.ColumnName = "PurchaseOrderID";
				colvarPurchaseOrderID.DataType = DbType.Int32;
				colvarPurchaseOrderID.MaxLength = 0;
				colvarPurchaseOrderID.AutoIncrement = false;
				colvarPurchaseOrderID.IsNullable = false;
				colvarPurchaseOrderID.IsPrimaryKey = false;
				colvarPurchaseOrderID.IsForeignKey = false;
				colvarPurchaseOrderID.IsReadOnly = false;
				colvarPurchaseOrderID.DefaultSetting = @"";
				colvarPurchaseOrderID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPurchaseOrderID);
				
				TableSchema.TableColumn colvarCylinderID = new TableSchema.TableColumn(schema);
				colvarCylinderID.ColumnName = "CylinderID";
				colvarCylinderID.DataType = DbType.Int32;
				colvarCylinderID.MaxLength = 0;
				colvarCylinderID.AutoIncrement = false;
				colvarCylinderID.IsNullable = true;
				colvarCylinderID.IsPrimaryKey = false;
				colvarCylinderID.IsForeignKey = false;
				colvarCylinderID.IsReadOnly = false;
				colvarCylinderID.DefaultSetting = @"";
				colvarCylinderID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCylinderID);
				
				TableSchema.TableColumn colvarUnitPrice = new TableSchema.TableColumn(schema);
				colvarUnitPrice.ColumnName = "UnitPrice";
				colvarUnitPrice.DataType = DbType.Decimal;
				colvarUnitPrice.MaxLength = 0;
				colvarUnitPrice.AutoIncrement = false;
				colvarUnitPrice.IsNullable = false;
				colvarUnitPrice.IsPrimaryKey = false;
				colvarUnitPrice.IsForeignKey = false;
				colvarUnitPrice.IsReadOnly = false;
				colvarUnitPrice.DefaultSetting = @"";
				colvarUnitPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnitPrice);
				
				TableSchema.TableColumn colvarQuantity = new TableSchema.TableColumn(schema);
				colvarQuantity.ColumnName = "Quantity";
				colvarQuantity.DataType = DbType.Int32;
				colvarQuantity.MaxLength = 0;
				colvarQuantity.AutoIncrement = false;
				colvarQuantity.IsNullable = false;
				colvarQuantity.IsPrimaryKey = false;
				colvarQuantity.IsForeignKey = false;
				colvarQuantity.IsReadOnly = false;
				colvarQuantity.DefaultSetting = @"";
				colvarQuantity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuantity);
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarCylinderNo = new TableSchema.TableColumn(schema);
				colvarCylinderNo.ColumnName = "CylinderNo";
				colvarCylinderNo.DataType = DbType.String;
				colvarCylinderNo.MaxLength = 50;
				colvarCylinderNo.AutoIncrement = false;
				colvarCylinderNo.IsNullable = true;
				colvarCylinderNo.IsPrimaryKey = false;
				colvarCylinderNo.IsForeignKey = false;
				colvarCylinderNo.IsReadOnly = false;
				colvarCylinderNo.DefaultSetting = @"";
				colvarCylinderNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCylinderNo);
				
				TableSchema.TableColumn colvarCircumference = new TableSchema.TableColumn(schema);
				colvarCircumference.ColumnName = "Circumference";
				colvarCircumference.DataType = DbType.Double;
				colvarCircumference.MaxLength = 0;
				colvarCircumference.AutoIncrement = false;
				colvarCircumference.IsNullable = true;
				colvarCircumference.IsPrimaryKey = false;
				colvarCircumference.IsForeignKey = false;
				colvarCircumference.IsReadOnly = false;
				colvarCircumference.DefaultSetting = @"";
				colvarCircumference.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCircumference);
				
				TableSchema.TableColumn colvarFaceWidth = new TableSchema.TableColumn(schema);
				colvarFaceWidth.ColumnName = "FaceWidth";
				colvarFaceWidth.DataType = DbType.Double;
				colvarFaceWidth.MaxLength = 0;
				colvarFaceWidth.AutoIncrement = false;
				colvarFaceWidth.IsNullable = true;
				colvarFaceWidth.IsPrimaryKey = false;
				colvarFaceWidth.IsForeignKey = false;
				colvarFaceWidth.IsReadOnly = false;
				colvarFaceWidth.DefaultSetting = @"";
				colvarFaceWidth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFaceWidth);
				
				TableSchema.TableColumn colvarJobID = new TableSchema.TableColumn(schema);
				colvarJobID.ColumnName = "JobID";
				colvarJobID.DataType = DbType.Int32;
				colvarJobID.MaxLength = 0;
				colvarJobID.AutoIncrement = false;
				colvarJobID.IsNullable = true;
				colvarJobID.IsPrimaryKey = false;
				colvarJobID.IsForeignKey = false;
				colvarJobID.IsReadOnly = false;
				colvarJobID.DefaultSetting = @"";
				colvarJobID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarJobID);
				
				TableSchema.TableColumn colvarUnit = new TableSchema.TableColumn(schema);
				colvarUnit.ColumnName = "Unit";
				colvarUnit.DataType = DbType.String;
				colvarUnit.MaxLength = 50;
				colvarUnit.AutoIncrement = false;
				colvarUnit.IsNullable = true;
				colvarUnit.IsPrimaryKey = false;
				colvarUnit.IsForeignKey = false;
				colvarUnit.IsReadOnly = false;
				colvarUnit.DefaultSetting = @"";
				colvarUnit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnit);
				
				TableSchema.TableColumn colvarStatus = new TableSchema.TableColumn(schema);
				colvarStatus.ColumnName = "Status";
				colvarStatus.DataType = DbType.String;
				colvarStatus.MaxLength = 50;
				colvarStatus.AutoIncrement = false;
				colvarStatus.IsNullable = true;
				colvarStatus.IsPrimaryKey = false;
				colvarStatus.IsForeignKey = false;
				colvarStatus.IsReadOnly = false;
				colvarStatus.DefaultSetting = @"";
				colvarStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatus);
				
				TableSchema.TableColumn colvarDONumber = new TableSchema.TableColumn(schema);
				colvarDONumber.ColumnName = "DONumber";
				colvarDONumber.DataType = DbType.String;
				colvarDONumber.MaxLength = 50;
				colvarDONumber.AutoIncrement = false;
				colvarDONumber.IsNullable = true;
				colvarDONumber.IsPrimaryKey = false;
				colvarDONumber.IsForeignKey = false;
				colvarDONumber.IsReadOnly = false;
				colvarDONumber.DefaultSetting = @"";
				colvarDONumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDONumber);
				
				TableSchema.TableColumn colvarDeliveryDate = new TableSchema.TableColumn(schema);
				colvarDeliveryDate.ColumnName = "DeliveryDate";
				colvarDeliveryDate.DataType = DbType.DateTime;
				colvarDeliveryDate.MaxLength = 0;
				colvarDeliveryDate.AutoIncrement = false;
				colvarDeliveryDate.IsNullable = true;
				colvarDeliveryDate.IsPrimaryKey = false;
				colvarDeliveryDate.IsForeignKey = false;
				colvarDeliveryDate.IsReadOnly = false;
				colvarDeliveryDate.DefaultSetting = @"";
				colvarDeliveryDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeliveryDate);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("tblPurchaseOrder_Cylinder",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("PurchaseOrderID")]
		[Bindable(true)]
		public int PurchaseOrderID 
		{
			get { return GetColumnValue<int>(Columns.PurchaseOrderID); }
			set { SetColumnValue(Columns.PurchaseOrderID, value); }
		}
		  
		[XmlAttribute("CylinderID")]
		[Bindable(true)]
		public int? CylinderID 
		{
			get { return GetColumnValue<int?>(Columns.CylinderID); }
			set { SetColumnValue(Columns.CylinderID, value); }
		}
		  
		[XmlAttribute("UnitPrice")]
		[Bindable(true)]
		public decimal UnitPrice 
		{
			get { return GetColumnValue<decimal>(Columns.UnitPrice); }
			set { SetColumnValue(Columns.UnitPrice, value); }
		}
		  
		[XmlAttribute("Quantity")]
		[Bindable(true)]
		public int Quantity 
		{
			get { return GetColumnValue<int>(Columns.Quantity); }
			set { SetColumnValue(Columns.Quantity, value); }
		}
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("CylinderNo")]
		[Bindable(true)]
		public string CylinderNo 
		{
			get { return GetColumnValue<string>(Columns.CylinderNo); }
			set { SetColumnValue(Columns.CylinderNo, value); }
		}
		  
		[XmlAttribute("Circumference")]
		[Bindable(true)]
		public double? Circumference 
		{
			get { return GetColumnValue<double?>(Columns.Circumference); }
			set { SetColumnValue(Columns.Circumference, value); }
		}
		  
		[XmlAttribute("FaceWidth")]
		[Bindable(true)]
		public double? FaceWidth 
		{
			get { return GetColumnValue<double?>(Columns.FaceWidth); }
			set { SetColumnValue(Columns.FaceWidth, value); }
		}
		  
		[XmlAttribute("JobID")]
		[Bindable(true)]
		public int? JobID 
		{
			get { return GetColumnValue<int?>(Columns.JobID); }
			set { SetColumnValue(Columns.JobID, value); }
		}
		  
		[XmlAttribute("Unit")]
		[Bindable(true)]
		public string Unit 
		{
			get { return GetColumnValue<string>(Columns.Unit); }
			set { SetColumnValue(Columns.Unit, value); }
		}
		  
		[XmlAttribute("Status")]
		[Bindable(true)]
		public string Status 
		{
			get { return GetColumnValue<string>(Columns.Status); }
			set { SetColumnValue(Columns.Status, value); }
		}
		  
		[XmlAttribute("DONumber")]
		[Bindable(true)]
		public string DONumber 
		{
			get { return GetColumnValue<string>(Columns.DONumber); }
			set { SetColumnValue(Columns.DONumber, value); }
		}
		  
		[XmlAttribute("DeliveryDate")]
		[Bindable(true)]
		public DateTime? DeliveryDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.DeliveryDate); }
			set { SetColumnValue(Columns.DeliveryDate, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varPurchaseOrderID,int? varCylinderID,decimal varUnitPrice,int varQuantity,string varCylinderNo,double? varCircumference,double? varFaceWidth,int? varJobID,string varUnit,string varStatus,string varDONumber,DateTime? varDeliveryDate)
		{
			TblPurchaseOrderCylinder item = new TblPurchaseOrderCylinder();
			
			item.PurchaseOrderID = varPurchaseOrderID;
			
			item.CylinderID = varCylinderID;
			
			item.UnitPrice = varUnitPrice;
			
			item.Quantity = varQuantity;
			
			item.CylinderNo = varCylinderNo;
			
			item.Circumference = varCircumference;
			
			item.FaceWidth = varFaceWidth;
			
			item.JobID = varJobID;
			
			item.Unit = varUnit;
			
			item.Status = varStatus;
			
			item.DONumber = varDONumber;
			
			item.DeliveryDate = varDeliveryDate;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varPurchaseOrderID,int? varCylinderID,decimal varUnitPrice,int varQuantity,int varId,string varCylinderNo,double? varCircumference,double? varFaceWidth,int? varJobID,string varUnit,string varStatus,string varDONumber,DateTime? varDeliveryDate)
		{
			TblPurchaseOrderCylinder item = new TblPurchaseOrderCylinder();
			
				item.PurchaseOrderID = varPurchaseOrderID;
			
				item.CylinderID = varCylinderID;
			
				item.UnitPrice = varUnitPrice;
			
				item.Quantity = varQuantity;
			
				item.Id = varId;
			
				item.CylinderNo = varCylinderNo;
			
				item.Circumference = varCircumference;
			
				item.FaceWidth = varFaceWidth;
			
				item.JobID = varJobID;
			
				item.Unit = varUnit;
			
				item.Status = varStatus;
			
				item.DONumber = varDONumber;
			
				item.DeliveryDate = varDeliveryDate;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn PurchaseOrderIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CylinderIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn UnitPriceColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn QuantityColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CylinderNoColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn CircumferenceColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn FaceWidthColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn JobIDColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn UnitColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn StatusColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn DONumberColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn DeliveryDateColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string PurchaseOrderID = @"PurchaseOrderID";
			 public static string CylinderID = @"CylinderID";
			 public static string UnitPrice = @"UnitPrice";
			 public static string Quantity = @"Quantity";
			 public static string Id = @"ID";
			 public static string CylinderNo = @"CylinderNo";
			 public static string Circumference = @"Circumference";
			 public static string FaceWidth = @"FaceWidth";
			 public static string JobID = @"JobID";
			 public static string Unit = @"Unit";
			 public static string Status = @"Status";
			 public static string DONumber = @"DONumber";
			 public static string DeliveryDate = @"DeliveryDate";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
