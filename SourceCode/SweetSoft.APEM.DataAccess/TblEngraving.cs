using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblEngraving class.
	/// </summary>
    [Serializable]
	public partial class TblEngravingCollection : ActiveList<TblEngraving, TblEngravingCollection>
	{	   
		public TblEngravingCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblEngravingCollection</returns>
		public TblEngravingCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblEngraving o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblEngraving table.
	/// </summary>
	[Serializable]
	public partial class TblEngraving : ActiveRecord<TblEngraving>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblEngraving()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblEngraving(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblEngraving(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblEngraving(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblEngraving", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarJobID = new TableSchema.TableColumn(schema);
				colvarJobID.ColumnName = "JobID";
				colvarJobID.DataType = DbType.Int32;
				colvarJobID.MaxLength = 0;
				colvarJobID.AutoIncrement = false;
				colvarJobID.IsNullable = false;
				colvarJobID.IsPrimaryKey = true;
				colvarJobID.IsForeignKey = true;
				colvarJobID.IsReadOnly = false;
				colvarJobID.DefaultSetting = @"";
				
					colvarJobID.ForeignKeyTableName = "tblJob";
				schema.Columns.Add(colvarJobID);
				
				TableSchema.TableColumn colvarEngravingStart = new TableSchema.TableColumn(schema);
				colvarEngravingStart.ColumnName = "EngravingStart";
				colvarEngravingStart.DataType = DbType.Double;
				colvarEngravingStart.MaxLength = 0;
				colvarEngravingStart.AutoIncrement = false;
				colvarEngravingStart.IsNullable = true;
				colvarEngravingStart.IsPrimaryKey = false;
				colvarEngravingStart.IsForeignKey = false;
				colvarEngravingStart.IsReadOnly = false;
				colvarEngravingStart.DefaultSetting = @"";
				colvarEngravingStart.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEngravingStart);
				
				TableSchema.TableColumn colvarJobCoOrd = new TableSchema.TableColumn(schema);
				colvarJobCoOrd.ColumnName = "JobCoOrd";
				colvarJobCoOrd.DataType = DbType.String;
				colvarJobCoOrd.MaxLength = 100;
				colvarJobCoOrd.AutoIncrement = false;
				colvarJobCoOrd.IsNullable = true;
				colvarJobCoOrd.IsPrimaryKey = false;
				colvarJobCoOrd.IsForeignKey = false;
				colvarJobCoOrd.IsReadOnly = false;
				colvarJobCoOrd.DefaultSetting = @"";
				colvarJobCoOrd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarJobCoOrd);
				
				TableSchema.TableColumn colvarEngravingOnNut = new TableSchema.TableColumn(schema);
				colvarEngravingOnNut.ColumnName = "EngravingOnNut";
				colvarEngravingOnNut.DataType = DbType.Byte;
				colvarEngravingOnNut.MaxLength = 0;
				colvarEngravingOnNut.AutoIncrement = false;
				colvarEngravingOnNut.IsNullable = true;
				colvarEngravingOnNut.IsPrimaryKey = false;
				colvarEngravingOnNut.IsForeignKey = false;
				colvarEngravingOnNut.IsReadOnly = false;
				colvarEngravingOnNut.DefaultSetting = @"";
				colvarEngravingOnNut.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEngravingOnNut);
				
				TableSchema.TableColumn colvarEngravingOnBoader = new TableSchema.TableColumn(schema);
				colvarEngravingOnBoader.ColumnName = "EngravingOnBoader";
				colvarEngravingOnBoader.DataType = DbType.Byte;
				colvarEngravingOnBoader.MaxLength = 0;
				colvarEngravingOnBoader.AutoIncrement = false;
				colvarEngravingOnBoader.IsNullable = true;
				colvarEngravingOnBoader.IsPrimaryKey = false;
				colvarEngravingOnBoader.IsForeignKey = false;
				colvarEngravingOnBoader.IsReadOnly = false;
				colvarEngravingOnBoader.DefaultSetting = @"";
				colvarEngravingOnBoader.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEngravingOnBoader);
				
				TableSchema.TableColumn colvarChromeThickness = new TableSchema.TableColumn(schema);
				colvarChromeThickness.ColumnName = "ChromeThickness";
				colvarChromeThickness.DataType = DbType.String;
				colvarChromeThickness.MaxLength = 20;
				colvarChromeThickness.AutoIncrement = false;
				colvarChromeThickness.IsNullable = true;
				colvarChromeThickness.IsPrimaryKey = false;
				colvarChromeThickness.IsForeignKey = false;
				colvarChromeThickness.IsReadOnly = false;
				colvarChromeThickness.DefaultSetting = @"";
				colvarChromeThickness.ForeignKeyTableName = "";
				schema.Columns.Add(colvarChromeThickness);
				
				TableSchema.TableColumn colvarRoughness = new TableSchema.TableColumn(schema);
				colvarRoughness.ColumnName = "Roughness";
				colvarRoughness.DataType = DbType.String;
				colvarRoughness.MaxLength = 50;
				colvarRoughness.AutoIncrement = false;
				colvarRoughness.IsNullable = true;
				colvarRoughness.IsPrimaryKey = false;
				colvarRoughness.IsForeignKey = false;
				colvarRoughness.IsReadOnly = false;
				colvarRoughness.DefaultSetting = @"";
				colvarRoughness.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRoughness);
				
				TableSchema.TableColumn colvarLaserStart = new TableSchema.TableColumn(schema);
				colvarLaserStart.ColumnName = "LaserStart";
				colvarLaserStart.DataType = DbType.String;
				colvarLaserStart.MaxLength = 50;
				colvarLaserStart.AutoIncrement = false;
				colvarLaserStart.IsNullable = true;
				colvarLaserStart.IsPrimaryKey = false;
				colvarLaserStart.IsForeignKey = false;
				colvarLaserStart.IsReadOnly = false;
				colvarLaserStart.DefaultSetting = @"";
				colvarLaserStart.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLaserStart);
				
				TableSchema.TableColumn colvarLaserOperator = new TableSchema.TableColumn(schema);
				colvarLaserOperator.ColumnName = "LaserOperator";
				colvarLaserOperator.DataType = DbType.String;
				colvarLaserOperator.MaxLength = 200;
				colvarLaserOperator.AutoIncrement = false;
				colvarLaserOperator.IsNullable = true;
				colvarLaserOperator.IsPrimaryKey = false;
				colvarLaserOperator.IsForeignKey = false;
				colvarLaserOperator.IsReadOnly = false;
				colvarLaserOperator.DefaultSetting = @"";
				colvarLaserOperator.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLaserOperator);
				
				TableSchema.TableColumn colvarFinalControl = new TableSchema.TableColumn(schema);
				colvarFinalControl.ColumnName = "FinalControl";
				colvarFinalControl.DataType = DbType.String;
				colvarFinalControl.MaxLength = 2000;
				colvarFinalControl.AutoIncrement = false;
				colvarFinalControl.IsNullable = true;
				colvarFinalControl.IsPrimaryKey = false;
				colvarFinalControl.IsForeignKey = false;
				colvarFinalControl.IsReadOnly = false;
				colvarFinalControl.DefaultSetting = @"";
				colvarFinalControl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFinalControl);
				
				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 100;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 100;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = true;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				TableSchema.TableColumn colvarFileSizeHEMG = new TableSchema.TableColumn(schema);
				colvarFileSizeHEMG.ColumnName = "FileSizeHEMG";
				colvarFileSizeHEMG.DataType = DbType.Double;
				colvarFileSizeHEMG.MaxLength = 0;
				colvarFileSizeHEMG.AutoIncrement = false;
				colvarFileSizeHEMG.IsNullable = true;
				colvarFileSizeHEMG.IsPrimaryKey = false;
				colvarFileSizeHEMG.IsForeignKey = false;
				colvarFileSizeHEMG.IsReadOnly = false;
				colvarFileSizeHEMG.DefaultSetting = @"";
				colvarFileSizeHEMG.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFileSizeHEMG);
				
				TableSchema.TableColumn colvarFileSizeVEMG = new TableSchema.TableColumn(schema);
				colvarFileSizeVEMG.ColumnName = "FileSizeVEMG";
				colvarFileSizeVEMG.DataType = DbType.Double;
				colvarFileSizeVEMG.MaxLength = 0;
				colvarFileSizeVEMG.AutoIncrement = false;
				colvarFileSizeVEMG.IsNullable = true;
				colvarFileSizeVEMG.IsPrimaryKey = false;
				colvarFileSizeVEMG.IsForeignKey = false;
				colvarFileSizeVEMG.IsReadOnly = false;
				colvarFileSizeVEMG.DefaultSetting = @"";
				colvarFileSizeVEMG.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFileSizeVEMG);
				
				TableSchema.TableColumn colvarFileSizeHDLS = new TableSchema.TableColumn(schema);
				colvarFileSizeHDLS.ColumnName = "FileSizeHDLS";
				colvarFileSizeHDLS.DataType = DbType.Double;
				colvarFileSizeHDLS.MaxLength = 0;
				colvarFileSizeHDLS.AutoIncrement = false;
				colvarFileSizeHDLS.IsNullable = true;
				colvarFileSizeHDLS.IsPrimaryKey = false;
				colvarFileSizeHDLS.IsForeignKey = false;
				colvarFileSizeHDLS.IsReadOnly = false;
				colvarFileSizeHDLS.DefaultSetting = @"";
				colvarFileSizeHDLS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFileSizeHDLS);
				
				TableSchema.TableColumn colvarFileSizeVDLS = new TableSchema.TableColumn(schema);
				colvarFileSizeVDLS.ColumnName = "FileSizeVDLS";
				colvarFileSizeVDLS.DataType = DbType.Double;
				colvarFileSizeVDLS.MaxLength = 0;
				colvarFileSizeVDLS.AutoIncrement = false;
				colvarFileSizeVDLS.IsNullable = true;
				colvarFileSizeVDLS.IsPrimaryKey = false;
				colvarFileSizeVDLS.IsForeignKey = false;
				colvarFileSizeVDLS.IsReadOnly = false;
				colvarFileSizeVDLS.DefaultSetting = @"";
				colvarFileSizeVDLS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFileSizeVDLS);
				
				TableSchema.TableColumn colvarFileSizeHEtching = new TableSchema.TableColumn(schema);
				colvarFileSizeHEtching.ColumnName = "FileSizeHEtching";
				colvarFileSizeHEtching.DataType = DbType.Double;
				colvarFileSizeHEtching.MaxLength = 0;
				colvarFileSizeHEtching.AutoIncrement = false;
				colvarFileSizeHEtching.IsNullable = true;
				colvarFileSizeHEtching.IsPrimaryKey = false;
				colvarFileSizeHEtching.IsForeignKey = false;
				colvarFileSizeHEtching.IsReadOnly = false;
				colvarFileSizeHEtching.DefaultSetting = @"";
				colvarFileSizeHEtching.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFileSizeHEtching);
				
				TableSchema.TableColumn colvarFileSizeVEtching = new TableSchema.TableColumn(schema);
				colvarFileSizeVEtching.ColumnName = "FileSizeVEtching";
				colvarFileSizeVEtching.DataType = DbType.Double;
				colvarFileSizeVEtching.MaxLength = 0;
				colvarFileSizeVEtching.AutoIncrement = false;
				colvarFileSizeVEtching.IsNullable = true;
				colvarFileSizeVEtching.IsPrimaryKey = false;
				colvarFileSizeVEtching.IsForeignKey = false;
				colvarFileSizeVEtching.IsReadOnly = false;
				colvarFileSizeVEtching.DefaultSetting = @"";
				colvarFileSizeVEtching.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFileSizeVEtching);
				
				TableSchema.TableColumn colvarSRRemarkEMG = new TableSchema.TableColumn(schema);
				colvarSRRemarkEMG.ColumnName = "SRRemarkEMG";
				colvarSRRemarkEMG.DataType = DbType.String;
				colvarSRRemarkEMG.MaxLength = 1000;
				colvarSRRemarkEMG.AutoIncrement = false;
				colvarSRRemarkEMG.IsNullable = true;
				colvarSRRemarkEMG.IsPrimaryKey = false;
				colvarSRRemarkEMG.IsForeignKey = false;
				colvarSRRemarkEMG.IsReadOnly = false;
				colvarSRRemarkEMG.DefaultSetting = @"";
				colvarSRRemarkEMG.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSRRemarkEMG);
				
				TableSchema.TableColumn colvarSRRemarkDLS = new TableSchema.TableColumn(schema);
				colvarSRRemarkDLS.ColumnName = "SRRemarkDLS";
				colvarSRRemarkDLS.DataType = DbType.String;
				colvarSRRemarkDLS.MaxLength = 1000;
				colvarSRRemarkDLS.AutoIncrement = false;
				colvarSRRemarkDLS.IsNullable = true;
				colvarSRRemarkDLS.IsPrimaryKey = false;
				colvarSRRemarkDLS.IsForeignKey = false;
				colvarSRRemarkDLS.IsReadOnly = false;
				colvarSRRemarkDLS.DefaultSetting = @"";
				colvarSRRemarkDLS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSRRemarkDLS);
				
				TableSchema.TableColumn colvarSRRemarkEtching = new TableSchema.TableColumn(schema);
				colvarSRRemarkEtching.ColumnName = "SRRemarkEtching";
				colvarSRRemarkEtching.DataType = DbType.String;
				colvarSRRemarkEtching.MaxLength = 1000;
				colvarSRRemarkEtching.AutoIncrement = false;
				colvarSRRemarkEtching.IsNullable = true;
				colvarSRRemarkEtching.IsPrimaryKey = false;
				colvarSRRemarkEtching.IsForeignKey = false;
				colvarSRRemarkEtching.IsReadOnly = false;
				colvarSRRemarkEtching.DefaultSetting = @"";
				colvarSRRemarkEtching.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSRRemarkEtching);
				
				TableSchema.TableColumn colvarTobaccoType = new TableSchema.TableColumn(schema);
				colvarTobaccoType.ColumnName = "TobaccoType";
				colvarTobaccoType.DataType = DbType.String;
				colvarTobaccoType.MaxLength = 50;
				colvarTobaccoType.AutoIncrement = false;
				colvarTobaccoType.IsNullable = true;
				colvarTobaccoType.IsPrimaryKey = false;
				colvarTobaccoType.IsForeignKey = false;
				colvarTobaccoType.IsReadOnly = false;
				colvarTobaccoType.DefaultSetting = @"";
				colvarTobaccoType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTobaccoType);
				
				TableSchema.TableColumn colvarEngravingWidth = new TableSchema.TableColumn(schema);
				colvarEngravingWidth.ColumnName = "EngravingWidth";
				colvarEngravingWidth.DataType = DbType.Double;
				colvarEngravingWidth.MaxLength = 0;
				colvarEngravingWidth.AutoIncrement = false;
				colvarEngravingWidth.IsNullable = true;
				colvarEngravingWidth.IsPrimaryKey = false;
				colvarEngravingWidth.IsForeignKey = false;
				colvarEngravingWidth.IsReadOnly = false;
				colvarEngravingWidth.DefaultSetting = @"";
				colvarEngravingWidth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEngravingWidth);
				
				TableSchema.TableColumn colvarEngrStartEtching = new TableSchema.TableColumn(schema);
				colvarEngrStartEtching.ColumnName = "EngrStartEtching";
				colvarEngrStartEtching.DataType = DbType.Double;
				colvarEngrStartEtching.MaxLength = 0;
				colvarEngrStartEtching.AutoIncrement = false;
				colvarEngrStartEtching.IsNullable = true;
				colvarEngrStartEtching.IsPrimaryKey = false;
				colvarEngrStartEtching.IsForeignKey = false;
				colvarEngrStartEtching.IsReadOnly = false;
				colvarEngrStartEtching.DefaultSetting = @"";
				colvarEngrStartEtching.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEngrStartEtching);
				
				TableSchema.TableColumn colvarEngrWidthEtching = new TableSchema.TableColumn(schema);
				colvarEngrWidthEtching.ColumnName = "EngrWidthEtching";
				colvarEngrWidthEtching.DataType = DbType.Double;
				colvarEngrWidthEtching.MaxLength = 0;
				colvarEngrWidthEtching.AutoIncrement = false;
				colvarEngrWidthEtching.IsNullable = true;
				colvarEngrWidthEtching.IsPrimaryKey = false;
				colvarEngrWidthEtching.IsForeignKey = false;
				colvarEngrWidthEtching.IsReadOnly = false;
				colvarEngrWidthEtching.DefaultSetting = @"";
				colvarEngrWidthEtching.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEngrWidthEtching);
				
				TableSchema.TableColumn colvarJobTicket = new TableSchema.TableColumn(schema);
				colvarJobTicket.ColumnName = "JobTicket";
				colvarJobTicket.DataType = DbType.String;
				colvarJobTicket.MaxLength = 256;
				colvarJobTicket.AutoIncrement = false;
				colvarJobTicket.IsNullable = true;
				colvarJobTicket.IsPrimaryKey = false;
				colvarJobTicket.IsForeignKey = false;
				colvarJobTicket.IsReadOnly = false;
				colvarJobTicket.DefaultSetting = @"";
				colvarJobTicket.ForeignKeyTableName = "";
				schema.Columns.Add(colvarJobTicket);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("tblEngraving",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("JobID")]
		[Bindable(true)]
		public int JobID 
		{
			get { return GetColumnValue<int>(Columns.JobID); }
			set { SetColumnValue(Columns.JobID, value); }
		}
		  
		[XmlAttribute("EngravingStart")]
		[Bindable(true)]
		public double? EngravingStart 
		{
			get { return GetColumnValue<double?>(Columns.EngravingStart); }
			set { SetColumnValue(Columns.EngravingStart, value); }
		}
		  
		[XmlAttribute("JobCoOrd")]
		[Bindable(true)]
		public string JobCoOrd 
		{
			get { return GetColumnValue<string>(Columns.JobCoOrd); }
			set { SetColumnValue(Columns.JobCoOrd, value); }
		}
		  
		[XmlAttribute("EngravingOnNut")]
		[Bindable(true)]
		public byte? EngravingOnNut 
		{
			get { return GetColumnValue<byte?>(Columns.EngravingOnNut); }
			set { SetColumnValue(Columns.EngravingOnNut, value); }
		}
		  
		[XmlAttribute("EngravingOnBoader")]
		[Bindable(true)]
		public byte? EngravingOnBoader 
		{
			get { return GetColumnValue<byte?>(Columns.EngravingOnBoader); }
			set { SetColumnValue(Columns.EngravingOnBoader, value); }
		}
		  
		[XmlAttribute("ChromeThickness")]
		[Bindable(true)]
		public string ChromeThickness 
		{
			get { return GetColumnValue<string>(Columns.ChromeThickness); }
			set { SetColumnValue(Columns.ChromeThickness, value); }
		}
		  
		[XmlAttribute("Roughness")]
		[Bindable(true)]
		public string Roughness 
		{
			get { return GetColumnValue<string>(Columns.Roughness); }
			set { SetColumnValue(Columns.Roughness, value); }
		}
		  
		[XmlAttribute("LaserStart")]
		[Bindable(true)]
		public string LaserStart 
		{
			get { return GetColumnValue<string>(Columns.LaserStart); }
			set { SetColumnValue(Columns.LaserStart, value); }
		}
		  
		[XmlAttribute("LaserOperator")]
		[Bindable(true)]
		public string LaserOperator 
		{
			get { return GetColumnValue<string>(Columns.LaserOperator); }
			set { SetColumnValue(Columns.LaserOperator, value); }
		}
		  
		[XmlAttribute("FinalControl")]
		[Bindable(true)]
		public string FinalControl 
		{
			get { return GetColumnValue<string>(Columns.FinalControl); }
			set { SetColumnValue(Columns.FinalControl, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public string CreatedBy 
		{
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedBy")]
		[Bindable(true)]
		public string ModifiedBy 
		{
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("FileSizeHEMG")]
		[Bindable(true)]
		public double? FileSizeHEMG 
		{
			get { return GetColumnValue<double?>(Columns.FileSizeHEMG); }
			set { SetColumnValue(Columns.FileSizeHEMG, value); }
		}
		  
		[XmlAttribute("FileSizeVEMG")]
		[Bindable(true)]
		public double? FileSizeVEMG 
		{
			get { return GetColumnValue<double?>(Columns.FileSizeVEMG); }
			set { SetColumnValue(Columns.FileSizeVEMG, value); }
		}
		  
		[XmlAttribute("FileSizeHDLS")]
		[Bindable(true)]
		public double? FileSizeHDLS 
		{
			get { return GetColumnValue<double?>(Columns.FileSizeHDLS); }
			set { SetColumnValue(Columns.FileSizeHDLS, value); }
		}
		  
		[XmlAttribute("FileSizeVDLS")]
		[Bindable(true)]
		public double? FileSizeVDLS 
		{
			get { return GetColumnValue<double?>(Columns.FileSizeVDLS); }
			set { SetColumnValue(Columns.FileSizeVDLS, value); }
		}
		  
		[XmlAttribute("FileSizeHEtching")]
		[Bindable(true)]
		public double? FileSizeHEtching 
		{
			get { return GetColumnValue<double?>(Columns.FileSizeHEtching); }
			set { SetColumnValue(Columns.FileSizeHEtching, value); }
		}
		  
		[XmlAttribute("FileSizeVEtching")]
		[Bindable(true)]
		public double? FileSizeVEtching 
		{
			get { return GetColumnValue<double?>(Columns.FileSizeVEtching); }
			set { SetColumnValue(Columns.FileSizeVEtching, value); }
		}
		  
		[XmlAttribute("SRRemarkEMG")]
		[Bindable(true)]
		public string SRRemarkEMG 
		{
			get { return GetColumnValue<string>(Columns.SRRemarkEMG); }
			set { SetColumnValue(Columns.SRRemarkEMG, value); }
		}
		  
		[XmlAttribute("SRRemarkDLS")]
		[Bindable(true)]
		public string SRRemarkDLS 
		{
			get { return GetColumnValue<string>(Columns.SRRemarkDLS); }
			set { SetColumnValue(Columns.SRRemarkDLS, value); }
		}
		  
		[XmlAttribute("SRRemarkEtching")]
		[Bindable(true)]
		public string SRRemarkEtching 
		{
			get { return GetColumnValue<string>(Columns.SRRemarkEtching); }
			set { SetColumnValue(Columns.SRRemarkEtching, value); }
		}
		  
		[XmlAttribute("TobaccoType")]
		[Bindable(true)]
		public string TobaccoType 
		{
			get { return GetColumnValue<string>(Columns.TobaccoType); }
			set { SetColumnValue(Columns.TobaccoType, value); }
		}
		  
		[XmlAttribute("EngravingWidth")]
		[Bindable(true)]
		public double? EngravingWidth 
		{
			get { return GetColumnValue<double?>(Columns.EngravingWidth); }
			set { SetColumnValue(Columns.EngravingWidth, value); }
		}
		  
		[XmlAttribute("EngrStartEtching")]
		[Bindable(true)]
		public double? EngrStartEtching 
		{
			get { return GetColumnValue<double?>(Columns.EngrStartEtching); }
			set { SetColumnValue(Columns.EngrStartEtching, value); }
		}
		  
		[XmlAttribute("EngrWidthEtching")]
		[Bindable(true)]
		public double? EngrWidthEtching 
		{
			get { return GetColumnValue<double?>(Columns.EngrWidthEtching); }
			set { SetColumnValue(Columns.EngrWidthEtching, value); }
		}
		  
		[XmlAttribute("JobTicket")]
		[Bindable(true)]
		public string JobTicket 
		{
			get { return GetColumnValue<string>(Columns.JobTicket); }
			set { SetColumnValue(Columns.JobTicket, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		private SweetSoft.APEM.DataAccess.TblEngravingDetailCollection colTblEngravingDetailRecords;
		public SweetSoft.APEM.DataAccess.TblEngravingDetailCollection TblEngravingDetailRecords()
		{
			if(colTblEngravingDetailRecords == null)
			{
				colTblEngravingDetailRecords = new SweetSoft.APEM.DataAccess.TblEngravingDetailCollection().Where(TblEngravingDetail.Columns.JobID, JobID).Load();
				colTblEngravingDetailRecords.ListChanged += new ListChangedEventHandler(colTblEngravingDetailRecords_ListChanged);
			}
			return colTblEngravingDetailRecords;
		}
				
		void colTblEngravingDetailRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colTblEngravingDetailRecords[e.NewIndex].JobID = JobID;
            }
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblJob ActiveRecord object related to this TblEngraving
		/// 
		/// </summary>
		public SweetSoft.APEM.DataAccess.TblJob TblJob
		{
			get { return SweetSoft.APEM.DataAccess.TblJob.FetchByID(this.JobID); }
			set { SetColumnValue("JobID", value.JobID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varJobID,double? varEngravingStart,string varJobCoOrd,byte? varEngravingOnNut,byte? varEngravingOnBoader,string varChromeThickness,string varRoughness,string varLaserStart,string varLaserOperator,string varFinalControl,string varCreatedBy,DateTime? varCreatedOn,string varModifiedBy,DateTime? varModifiedOn,double? varFileSizeHEMG,double? varFileSizeVEMG,double? varFileSizeHDLS,double? varFileSizeVDLS,double? varFileSizeHEtching,double? varFileSizeVEtching,string varSRRemarkEMG,string varSRRemarkDLS,string varSRRemarkEtching,string varTobaccoType,double? varEngravingWidth,double? varEngrStartEtching,double? varEngrWidthEtching,string varJobTicket)
		{
			TblEngraving item = new TblEngraving();
			
			item.JobID = varJobID;
			
			item.EngravingStart = varEngravingStart;
			
			item.JobCoOrd = varJobCoOrd;
			
			item.EngravingOnNut = varEngravingOnNut;
			
			item.EngravingOnBoader = varEngravingOnBoader;
			
			item.ChromeThickness = varChromeThickness;
			
			item.Roughness = varRoughness;
			
			item.LaserStart = varLaserStart;
			
			item.LaserOperator = varLaserOperator;
			
			item.FinalControl = varFinalControl;
			
			item.CreatedBy = varCreatedBy;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedBy = varModifiedBy;
			
			item.ModifiedOn = varModifiedOn;
			
			item.FileSizeHEMG = varFileSizeHEMG;
			
			item.FileSizeVEMG = varFileSizeVEMG;
			
			item.FileSizeHDLS = varFileSizeHDLS;
			
			item.FileSizeVDLS = varFileSizeVDLS;
			
			item.FileSizeHEtching = varFileSizeHEtching;
			
			item.FileSizeVEtching = varFileSizeVEtching;
			
			item.SRRemarkEMG = varSRRemarkEMG;
			
			item.SRRemarkDLS = varSRRemarkDLS;
			
			item.SRRemarkEtching = varSRRemarkEtching;
			
			item.TobaccoType = varTobaccoType;
			
			item.EngravingWidth = varEngravingWidth;
			
			item.EngrStartEtching = varEngrStartEtching;
			
			item.EngrWidthEtching = varEngrWidthEtching;
			
			item.JobTicket = varJobTicket;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varJobID,double? varEngravingStart,string varJobCoOrd,byte? varEngravingOnNut,byte? varEngravingOnBoader,string varChromeThickness,string varRoughness,string varLaserStart,string varLaserOperator,string varFinalControl,string varCreatedBy,DateTime? varCreatedOn,string varModifiedBy,DateTime? varModifiedOn,double? varFileSizeHEMG,double? varFileSizeVEMG,double? varFileSizeHDLS,double? varFileSizeVDLS,double? varFileSizeHEtching,double? varFileSizeVEtching,string varSRRemarkEMG,string varSRRemarkDLS,string varSRRemarkEtching,string varTobaccoType,double? varEngravingWidth,double? varEngrStartEtching,double? varEngrWidthEtching,string varJobTicket)
		{
			TblEngraving item = new TblEngraving();
			
				item.JobID = varJobID;
			
				item.EngravingStart = varEngravingStart;
			
				item.JobCoOrd = varJobCoOrd;
			
				item.EngravingOnNut = varEngravingOnNut;
			
				item.EngravingOnBoader = varEngravingOnBoader;
			
				item.ChromeThickness = varChromeThickness;
			
				item.Roughness = varRoughness;
			
				item.LaserStart = varLaserStart;
			
				item.LaserOperator = varLaserOperator;
			
				item.FinalControl = varFinalControl;
			
				item.CreatedBy = varCreatedBy;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedBy = varModifiedBy;
			
				item.ModifiedOn = varModifiedOn;
			
				item.FileSizeHEMG = varFileSizeHEMG;
			
				item.FileSizeVEMG = varFileSizeVEMG;
			
				item.FileSizeHDLS = varFileSizeHDLS;
			
				item.FileSizeVDLS = varFileSizeVDLS;
			
				item.FileSizeHEtching = varFileSizeHEtching;
			
				item.FileSizeVEtching = varFileSizeVEtching;
			
				item.SRRemarkEMG = varSRRemarkEMG;
			
				item.SRRemarkDLS = varSRRemarkDLS;
			
				item.SRRemarkEtching = varSRRemarkEtching;
			
				item.TobaccoType = varTobaccoType;
			
				item.EngravingWidth = varEngravingWidth;
			
				item.EngrStartEtching = varEngrStartEtching;
			
				item.EngrWidthEtching = varEngrWidthEtching;
			
				item.JobTicket = varJobTicket;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn JobIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn EngravingStartColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn JobCoOrdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn EngravingOnNutColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn EngravingOnBoaderColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ChromeThicknessColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn RoughnessColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn LaserStartColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn LaserOperatorColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn FinalControlColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedByColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn FileSizeHEMGColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn FileSizeVEMGColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn FileSizeHDLSColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn FileSizeVDLSColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn FileSizeHEtchingColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn FileSizeVEtchingColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn SRRemarkEMGColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn SRRemarkDLSColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn SRRemarkEtchingColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn TobaccoTypeColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn EngravingWidthColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn EngrStartEtchingColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn EngrWidthEtchingColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn JobTicketColumn
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string JobID = @"JobID";
			 public static string EngravingStart = @"EngravingStart";
			 public static string JobCoOrd = @"JobCoOrd";
			 public static string EngravingOnNut = @"EngravingOnNut";
			 public static string EngravingOnBoader = @"EngravingOnBoader";
			 public static string ChromeThickness = @"ChromeThickness";
			 public static string Roughness = @"Roughness";
			 public static string LaserStart = @"LaserStart";
			 public static string LaserOperator = @"LaserOperator";
			 public static string FinalControl = @"FinalControl";
			 public static string CreatedBy = @"CreatedBy";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedBy = @"ModifiedBy";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string FileSizeHEMG = @"FileSizeHEMG";
			 public static string FileSizeVEMG = @"FileSizeVEMG";
			 public static string FileSizeHDLS = @"FileSizeHDLS";
			 public static string FileSizeVDLS = @"FileSizeVDLS";
			 public static string FileSizeHEtching = @"FileSizeHEtching";
			 public static string FileSizeVEtching = @"FileSizeVEtching";
			 public static string SRRemarkEMG = @"SRRemarkEMG";
			 public static string SRRemarkDLS = @"SRRemarkDLS";
			 public static string SRRemarkEtching = @"SRRemarkEtching";
			 public static string TobaccoType = @"TobaccoType";
			 public static string EngravingWidth = @"EngravingWidth";
			 public static string EngrStartEtching = @"EngrStartEtching";
			 public static string EngrWidthEtching = @"EngrWidthEtching";
			 public static string JobTicket = @"JobTicket";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
                if (colTblEngravingDetailRecords != null)
                {
                    foreach (SweetSoft.APEM.DataAccess.TblEngravingDetail item in colTblEngravingDetailRecords)
                    {
                        if (item.JobID != JobID)
                        {
                            item.JobID = JobID;
                        }
                    }
               }
		}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
                if (colTblEngravingDetailRecords != null)
                {
                    colTblEngravingDetailRecords.SaveAll();
               }
		}
        #endregion
	}
}
