using System;
using System.Text;
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Xml;
using System.Xml.Serialization;
using SubSonic;
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
    /// <summary>
    /// Strongly-typed collection for the TblNotificationSetting class.
    /// </summary>
    [Serializable]
    public partial class TblNotificationSettingCollection : ActiveList<TblNotificationSetting, TblNotificationSettingCollection>
    {
        public TblNotificationSettingCollection() { }

        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblNotificationSettingCollection</returns>
        public TblNotificationSettingCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblNotificationSetting o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }

    }
    /// <summary>
    /// This is an ActiveRecord class which wraps the TblNotificationSetting table.
    /// </summary>
    [Serializable]
    public partial class TblNotificationSetting : ActiveRecord<TblNotificationSetting>, IActiveRecord
    {
        #region .ctors and Default Settings

        public TblNotificationSetting()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        private void InitSetDefaults() { SetDefaults(); }

        public TblNotificationSetting(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public TblNotificationSetting(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public TblNotificationSetting(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        protected static void SetSQLProps() { GetTableSchema(); }

        #endregion

        #region Schema and Query Accessor

        public static Query CreateQuery() { return new Query(Schema); }
        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("tblNotificationSetting", TableType.Table, DataService.GetInstance("DataAcessProvider"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                TableSchema.TableColumn colvarSettingId = new TableSchema.TableColumn(schema);
                colvarSettingId.ColumnName = "SettingId";
                colvarSettingId.DataType = DbType.Int32;
                colvarSettingId.MaxLength = 0;
                colvarSettingId.AutoIncrement = true;
                colvarSettingId.IsNullable = false;
                colvarSettingId.IsPrimaryKey = true;
                colvarSettingId.IsForeignKey = false;
                colvarSettingId.IsReadOnly = false;
                colvarSettingId.DefaultSetting = @"";
                colvarSettingId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSettingId);

                TableSchema.TableColumn colvarTitle = new TableSchema.TableColumn(schema);
                colvarTitle.ColumnName = "Title";
                colvarTitle.DataType = DbType.String;
                colvarTitle.MaxLength = 200;
                colvarTitle.AutoIncrement = false;
                colvarTitle.IsNullable = true;
                colvarTitle.IsPrimaryKey = false;
                colvarTitle.IsForeignKey = false;
                colvarTitle.IsReadOnly = false;
                colvarTitle.DefaultSetting = @"";
                colvarTitle.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTitle);

                TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
                colvarDescription.ColumnName = "Description";
                colvarDescription.DataType = DbType.String;
                colvarDescription.MaxLength = -1;
                colvarDescription.AutoIncrement = false;
                colvarDescription.IsNullable = true;
                colvarDescription.IsPrimaryKey = false;
                colvarDescription.IsForeignKey = false;
                colvarDescription.IsReadOnly = false;
                colvarDescription.DefaultSetting = @"";
                colvarDescription.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDescription);

                TableSchema.TableColumn colvarPageId = new TableSchema.TableColumn(schema);
                colvarPageId.ColumnName = "PageId";
                colvarPageId.DataType = DbType.String;
                colvarPageId.MaxLength = 250;
                colvarPageId.AutoIncrement = false;
                colvarPageId.IsNullable = true;
                colvarPageId.IsPrimaryKey = false;
                colvarPageId.IsForeignKey = false;
                colvarPageId.IsReadOnly = false;
                colvarPageId.DefaultSetting = @"";
                colvarPageId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarPageId);

                TableSchema.TableColumn colvarActions = new TableSchema.TableColumn(schema);
                colvarActions.ColumnName = "Actions";
                colvarActions.DataType = DbType.String;
                colvarActions.MaxLength = 500;
                colvarActions.AutoIncrement = false;
                colvarActions.IsNullable = true;
                colvarActions.IsPrimaryKey = false;
                colvarActions.IsForeignKey = false;
                colvarActions.IsReadOnly = false;
                colvarActions.DefaultSetting = @"";
                colvarActions.ForeignKeyTableName = "";
                schema.Columns.Add(colvarActions);

                TableSchema.TableColumn colvarTriggerButton = new TableSchema.TableColumn(schema);
                colvarTriggerButton.ColumnName = "TriggerButton";
                colvarTriggerButton.DataType = DbType.String;
                colvarTriggerButton.MaxLength = 500;
                colvarTriggerButton.AutoIncrement = false;
                colvarTriggerButton.IsNullable = true;
                colvarTriggerButton.IsPrimaryKey = false;
                colvarTriggerButton.IsForeignKey = false;
                colvarTriggerButton.IsReadOnly = false;
                colvarTriggerButton.DefaultSetting = @"";
                colvarTriggerButton.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTriggerButton);

                TableSchema.TableColumn colvarIsObsolete = new TableSchema.TableColumn(schema);
                colvarIsObsolete.ColumnName = "IsObsolete";
                colvarIsObsolete.DataType = DbType.Boolean;
                colvarIsObsolete.MaxLength = 0;
                colvarIsObsolete.AutoIncrement = false;
                colvarIsObsolete.IsNullable = false;
                colvarIsObsolete.IsPrimaryKey = false;
                colvarIsObsolete.IsForeignKey = false;
                colvarIsObsolete.IsReadOnly = false;
                colvarIsObsolete.DefaultSetting = @"";
                colvarIsObsolete.ForeignKeyTableName = "";
                schema.Columns.Add(colvarIsObsolete);

                TableSchema.TableColumn colvarCommandType = new TableSchema.TableColumn(schema);
                colvarCommandType.ColumnName = "CommandType";
                colvarCommandType.DataType = DbType.String;
                colvarCommandType.MaxLength = 50;
                colvarCommandType.AutoIncrement = false;
                colvarCommandType.IsNullable = true;
                colvarCommandType.IsPrimaryKey = false;
                colvarCommandType.IsForeignKey = false;
                colvarCommandType.IsReadOnly = false;
                colvarCommandType.DefaultSetting = @"";
                colvarCommandType.ForeignKeyTableName = "";
                schema.Columns.Add(colvarCommandType);

                TableSchema.TableColumn colvarDismissEvent = new TableSchema.TableColumn(schema);
                colvarDismissEvent.ColumnName = "DismissEvent";
                colvarDismissEvent.DataType = DbType.String;
                colvarDismissEvent.MaxLength = 50;
                colvarDismissEvent.AutoIncrement = false;
                colvarDismissEvent.IsNullable = true;
                colvarDismissEvent.IsPrimaryKey = false;
                colvarDismissEvent.IsForeignKey = false;
                colvarDismissEvent.IsReadOnly = false;
                colvarDismissEvent.DefaultSetting = @"";
                colvarDismissEvent.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDismissEvent);

                TableSchema.TableColumn colvarReceiveIds = new TableSchema.TableColumn(schema);
                colvarReceiveIds.ColumnName = "ReceiveIds";
                colvarReceiveIds.DataType = DbType.String;
                colvarReceiveIds.MaxLength = -1;
                colvarReceiveIds.AutoIncrement = false;
                colvarReceiveIds.IsNullable = true;
                colvarReceiveIds.IsPrimaryKey = false;
                colvarReceiveIds.IsForeignKey = false;
                colvarReceiveIds.IsReadOnly = false;
                colvarReceiveIds.DefaultSetting = @"";
                colvarReceiveIds.ForeignKeyTableName = "";
                schema.Columns.Add(colvarReceiveIds);

                TableSchema.TableColumn colvarReceiveType = new TableSchema.TableColumn(schema);
                colvarReceiveType.ColumnName = "ReceiveType";
                colvarReceiveType.DataType = DbType.String;
                colvarReceiveType.MaxLength = 50;
                colvarReceiveType.AutoIncrement = false;
                colvarReceiveType.IsNullable = true;
                colvarReceiveType.IsPrimaryKey = false;
                colvarReceiveType.IsForeignKey = false;
                colvarReceiveType.IsReadOnly = false;
                colvarReceiveType.DefaultSetting = @"";
                colvarReceiveType.ForeignKeyTableName = "";
                schema.Columns.Add(colvarReceiveType);

                TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
                colvarCreatedOn.ColumnName = "CreatedOn";
                colvarCreatedOn.DataType = DbType.DateTime;
                colvarCreatedOn.MaxLength = 0;
                colvarCreatedOn.AutoIncrement = false;
                colvarCreatedOn.IsNullable = true;
                colvarCreatedOn.IsPrimaryKey = false;
                colvarCreatedOn.IsForeignKey = false;
                colvarCreatedOn.IsReadOnly = false;
                colvarCreatedOn.DefaultSetting = @"";
                colvarCreatedOn.ForeignKeyTableName = "";
                schema.Columns.Add(colvarCreatedOn);

                TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
                colvarCreatedBy.ColumnName = "CreatedBy";
                colvarCreatedBy.DataType = DbType.String;
                colvarCreatedBy.MaxLength = 100;
                colvarCreatedBy.AutoIncrement = false;
                colvarCreatedBy.IsNullable = true;
                colvarCreatedBy.IsPrimaryKey = false;
                colvarCreatedBy.IsForeignKey = false;
                colvarCreatedBy.IsReadOnly = false;
                colvarCreatedBy.DefaultSetting = @"";
                colvarCreatedBy.ForeignKeyTableName = "";
                schema.Columns.Add(colvarCreatedBy);

                TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
                colvarModifiedOn.ColumnName = "ModifiedOn";
                colvarModifiedOn.DataType = DbType.DateTime;
                colvarModifiedOn.MaxLength = 0;
                colvarModifiedOn.AutoIncrement = false;
                colvarModifiedOn.IsNullable = true;
                colvarModifiedOn.IsPrimaryKey = false;
                colvarModifiedOn.IsForeignKey = false;
                colvarModifiedOn.IsReadOnly = false;
                colvarModifiedOn.DefaultSetting = @"";
                colvarModifiedOn.ForeignKeyTableName = "";
                schema.Columns.Add(colvarModifiedOn);

                TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
                colvarModifiedBy.ColumnName = "ModifiedBy";
                colvarModifiedBy.DataType = DbType.String;
                colvarModifiedBy.MaxLength = 100;
                colvarModifiedBy.AutoIncrement = false;
                colvarModifiedBy.IsNullable = true;
                colvarModifiedBy.IsPrimaryKey = false;
                colvarModifiedBy.IsForeignKey = false;
                colvarModifiedBy.IsReadOnly = false;
                colvarModifiedBy.DefaultSetting = @"";
                colvarModifiedBy.ForeignKeyTableName = "";
                schema.Columns.Add(colvarModifiedBy);
				
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["DataAcessProvider"].AddSchema("tblNotificationSetting", schema);
            }
        }
        #endregion

        #region Props

        [XmlAttribute("SettingId")]
        [Bindable(true)]
        public int SettingId
        {
            get { return GetColumnValue<int>(Columns.SettingId); }
            set { SetColumnValue(Columns.SettingId, value); }
        }

        [XmlAttribute("Title")]
        [Bindable(true)]
        public string Title
        {
            get { return GetColumnValue<string>(Columns.Title); }
            set { SetColumnValue(Columns.Title, value); }
        }

        [XmlAttribute("Description")]
        [Bindable(true)]
        public string Description
        {
            get { return GetColumnValue<string>(Columns.Description); }
            set { SetColumnValue(Columns.Description, value); }
        }

        [XmlAttribute("PageId")]
        [Bindable(true)]
        public string PageId
        {
            get { return GetColumnValue<string>(Columns.PageId); }
            set { SetColumnValue(Columns.PageId, value); }
        }

        [XmlAttribute("Actions")]
        [Bindable(true)]
        public string Actions
        {
            get { return GetColumnValue<string>(Columns.Actions); }
            set { SetColumnValue(Columns.Actions, value); }
        }

        [XmlAttribute("TriggerButton")]
        [Bindable(true)]
        public string TriggerButton
        {
            get { return GetColumnValue<string>(Columns.TriggerButton); }
            set { SetColumnValue(Columns.TriggerButton, value); }
        }

        [XmlAttribute("IsObsolete")]
        [Bindable(true)]
        public bool IsObsolete
        {
            get { return GetColumnValue<bool>(Columns.IsObsolete); }
            set { SetColumnValue(Columns.IsObsolete, value); }
        }

        [XmlAttribute("CommandType")]
        [Bindable(true)]
        public string CommandType
        {
            get { return GetColumnValue<string>(Columns.CommandType); }
            set { SetColumnValue(Columns.CommandType, value); }
        }

        [XmlAttribute("DismissEvent")]
        [Bindable(true)]
        public string DismissEvent
        {
            get { return GetColumnValue<string>(Columns.DismissEvent); }
            set { SetColumnValue(Columns.DismissEvent, value); }
        }

        [XmlAttribute("ReceiveIds")]
        [Bindable(true)]
        public string ReceiveIds
        {
            get { return GetColumnValue<string>(Columns.ReceiveIds); }
            set { SetColumnValue(Columns.ReceiveIds, value); }
        }

        [XmlAttribute("ReceiveType")]
        [Bindable(true)]
        public string ReceiveType
        {
            get { return GetColumnValue<string>(Columns.ReceiveType); }
            set { SetColumnValue(Columns.ReceiveType, value); }
        }

        [XmlAttribute("CreatedOn")]
        [Bindable(true)]
        public DateTime? CreatedOn
        {
            get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
            set { SetColumnValue(Columns.CreatedOn, value); }
        }

        [XmlAttribute("CreatedBy")]
        [Bindable(true)]
        public string CreatedBy
        {
            get { return GetColumnValue<string>(Columns.CreatedBy); }
            set { SetColumnValue(Columns.CreatedBy, value); }
        }

        [XmlAttribute("ModifiedOn")]
        [Bindable(true)]
        public DateTime? ModifiedOn
        {
            get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
            set { SetColumnValue(Columns.ModifiedOn, value); }
        }
		
        [XmlAttribute("ModifiedBy")]
        [Bindable(true)]
        public string ModifiedBy
        {
            get { return GetColumnValue<string>(Columns.ModifiedBy); }
            set { SetColumnValue(Columns.ModifiedBy, value); }
        }

        #endregion

        //no foreign key tables defined (0)

        //no ManyToMany tables defined (0)

        #region ObjectDataSource support


        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static TblNotificationSetting Insert(string varTitle, string varDescription,
          bool varIsObsolete, string varActions,
            string varTriggerButton, string varPageId,
            string varCommandType, string varDismissEvent,
            string varReceiveIds, string varReceiveType,
           string varCreatedBy, DateTime? varCreatedOn,
           string varModifiedBy, DateTime? varModifiedOn)
        {
            TblNotificationSetting item = new TblNotificationSetting();

            item.Title = varTitle;

            item.Description = varDescription;

            item.IsObsolete = varIsObsolete;

            item.TriggerButton = varTriggerButton;

            item.Actions = varActions;

            item.PageId = varPageId;

            item.CommandType = varCommandType;

            item.DismissEvent = varDismissEvent;

            item.ReceiveIds = varReceiveIds;
            
            item.ReceiveType = varReceiveType;
            
            item.CreatedBy = varCreatedBy;
            item.CreatedOn = varCreatedOn;
            item.ModifiedBy = varModifiedBy;
            item.ModifiedOn = varModifiedOn;


            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);

            return item;
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static TblNotificationSetting Update(int varSettingId, string varTitle,
            string varDescription, bool varIsObsolete, string varActions,
            string varTriggerButton, string varPageId,
            string varCommandType, string varDismissEvent,
            string varReceiveIds, string varReceiveType,
           string varCreatedBy, DateTime? varCreatedOn,
           string varModifiedBy, DateTime? varModifiedOn)
        {
            TblNotificationSetting item = new TblNotificationSetting();

            item.SettingId = varSettingId;

            item.Title = varTitle;

            item.Description = varDescription;

            item.IsObsolete = varIsObsolete;

            item.TriggerButton = varTriggerButton;

            item.Actions = varActions;

            item.PageId = varPageId;

            item.CommandType = varCommandType;

            item.DismissEvent = varDismissEvent;

            item.ReceiveIds = varReceiveIds;

            item.ReceiveType = varReceiveType;

            item.CreatedBy = varCreatedBy;
            item.CreatedOn = varCreatedOn;
            item.ModifiedBy = varModifiedBy;
            item.ModifiedOn = varModifiedOn;

            item.IsNew = false;
            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);

            return item;
        }
        #endregion

        #region Typed Columns


        public static TableSchema.TableColumn SettingIdColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn TitleColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn PageIdColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn ActionsColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn TriggerButtonColumn
        {
            get { return Schema.Columns[5]; }
        }



        public static TableSchema.TableColumn IsObsoleteColumn
        {
            get { return Schema.Columns[6]; }
        }


        public static TableSchema.TableColumn CommandTypeColumn
        {
            get { return Schema.Columns[7]; }
        }


        public static TableSchema.TableColumn DismissEventColumn
        {
            get { return Schema.Columns[8]; }
        }


        public static TableSchema.TableColumn ReceiveIdsColumn
        {
            get { return Schema.Columns[9]; }
        }



        public static TableSchema.TableColumn ReceiveTypeColumn
        {
            get { return Schema.Columns[10]; }
        }



        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[11]; }
        }



        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[12]; }
        }



        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[13]; }
        }



        public static TableSchema.TableColumn ModifiedByColumn
        {
            get { return Schema.Columns[14]; }
        }

        
        
        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string SettingId = @"SettingId";
            public static string Title = @"Title";
            public static string Description = @"Description";
            public static string PageId = @"PageId";
            public static string Actions = @"Actions";
            public static string TriggerButton = @"TriggerButton";
            public static string IsObsolete = @"IsObsolete";
            public static string CommandType = @"CommandType";
            public static string DismissEvent = @"DismissEvent";
            public static string ReceiveIds = @"ReceiveIds";
            public static string ReceiveType = @"ReceiveType";
            public static string CreatedOn = @"CreatedOn";
            public static string CreatedBy = @"CreatedBy";
            public static string ModifiedOn = @"ModifiedOn";
            public static string ModifiedBy = @"ModifiedBy";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion
    }
}
