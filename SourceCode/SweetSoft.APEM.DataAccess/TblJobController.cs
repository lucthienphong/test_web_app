using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
    /// <summary>
    /// Controller class for tblJob
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TblJobController
    {
        // Preload our schema..
        TblJob thisSchemaLoad = new TblJob();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TblJobCollection FetchAll()
        {
            TblJobCollection coll = new TblJobCollection();
            Query qry = new Query(TblJob.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblJobCollection FetchByID(object JobID)
        {
            TblJobCollection coll = new TblJobCollection().Where("JobID", JobID).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblJobCollection FetchByQuery(Query qry)
        {
            TblJobCollection coll = new TblJobCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object JobID)
        {
            return (TblJob.Delete(JobID) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object JobID)
        {
            return (TblJob.Destroy(JobID) == 1);
        }



        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public TblJob Insert(TblJob obj)
        {
            obj.Save(UserName);
            return obj;
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public TblJob Update(TblJob obj)
        {
            TblJob item = new TblJob();
            item.MarkOld();
            item.IsLoaded = true;

            item.JobID = obj.JobID;

            item.JobNumber = obj.JobNumber;

            item.RevNumber = obj.RevNumber;

            item.JobBarcode = obj.JobBarcode;

            item.JobBarcodeImage = obj.JobBarcodeImage;

            item.JobName = obj.JobName;

            item.Design = obj.Design;

            item.DrawingNumber = obj.DrawingNumber;

            item.RootJobID = obj.RootJobID;

            item.RootJobNo = obj.RootJobNo;

            item.RootJobRevNumber = obj.RootJobRevNumber;

            item.CommonJobNumber = obj.CommonJobNumber;

            item.CustomerPO1 = obj.CustomerPO1;

            item.CustomerPO2 = obj.CustomerPO2;

            item.CustomerID = obj.CustomerID;

            item.ShipToParty = obj.ShipToParty;

            item.BrandOwner = obj.BrandOwner;

            item.ContactPersonID = obj.ContactPersonID;

            item.SalesRepID = obj.SalesRepID;

            item.CoordinatorID = obj.CoordinatorID;

            item.CurrencyID = obj.CurrencyID;

            item.ProductTypeID = obj.ProductTypeID;

            item.Status = obj.Status;

            item.Remark = obj.Remark;

            item.RevisionFromJob = obj.RevisionFromJob;

            item.RevisionRootNumber = obj.RevisionRootNumber;

            item.InternalExternal = obj.InternalExternal;

            item.RevisionDetail = obj.RevisionDetail;

            item.PaymentTerms = obj.PaymentTerms;

            item.TypeOfOrder = obj.TypeOfOrder;

            item.IsServiceJob = obj.IsServiceJob;

            item.IsOutsource = obj.IsOutsource;

            item.SupplierID = obj.SupplierID;

            item.IsClosed = obj.IsClosed;

            item.CreatedBy = obj.CreatedBy;

            item.CreatedOn = obj.CreatedOn;

            item.ModifiedBy = obj.ModifiedBy;

            item.ModifiedOn = obj.ModifiedOn;

            item.ItemCode = obj.ItemCode;

            item.Save(UserName);

            return item;
        }
    }
}
