using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblProgress class.
	/// </summary>
    [Serializable]
	public partial class TblProgressCollection : ActiveList<TblProgress, TblProgressCollection>
	{	   
		public TblProgressCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblProgressCollection</returns>
		public TblProgressCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblProgress o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblProgress table.
	/// </summary>
	[Serializable]
	public partial class TblProgress : ActiveRecord<TblProgress>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblProgress()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblProgress(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblProgress(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblProgress(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblProgress", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarJobID = new TableSchema.TableColumn(schema);
				colvarJobID.ColumnName = "JobID";
				colvarJobID.DataType = DbType.Int32;
				colvarJobID.MaxLength = 0;
				colvarJobID.AutoIncrement = false;
				colvarJobID.IsNullable = false;
				colvarJobID.IsPrimaryKey = true;
				colvarJobID.IsForeignKey = true;
				colvarJobID.IsReadOnly = false;
				colvarJobID.DefaultSetting = @"";
				
					colvarJobID.ForeignKeyTableName = "tblJob";
				schema.Columns.Add(colvarJobID);
				
				TableSchema.TableColumn colvarProofDate = new TableSchema.TableColumn(schema);
				colvarProofDate.ColumnName = "ProofDate";
				colvarProofDate.DataType = DbType.DateTime;
				colvarProofDate.MaxLength = 0;
				colvarProofDate.AutoIncrement = false;
				colvarProofDate.IsNullable = true;
				colvarProofDate.IsPrimaryKey = false;
				colvarProofDate.IsForeignKey = false;
				colvarProofDate.IsReadOnly = false;
				colvarProofDate.DefaultSetting = @"";
				colvarProofDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProofDate);
				
				TableSchema.TableColumn colvarReproDate = new TableSchema.TableColumn(schema);
				colvarReproDate.ColumnName = "ReproDate";
				colvarReproDate.DataType = DbType.DateTime;
				colvarReproDate.MaxLength = 0;
				colvarReproDate.AutoIncrement = false;
				colvarReproDate.IsNullable = true;
				colvarReproDate.IsPrimaryKey = false;
				colvarReproDate.IsForeignKey = false;
				colvarReproDate.IsReadOnly = false;
				colvarReproDate.DefaultSetting = @"";
				colvarReproDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReproDate);
				
				TableSchema.TableColumn colvarReproStatusID = new TableSchema.TableColumn(schema);
				colvarReproStatusID.ColumnName = "ReproStatusID";
				colvarReproStatusID.DataType = DbType.Int16;
				colvarReproStatusID.MaxLength = 0;
				colvarReproStatusID.AutoIncrement = false;
				colvarReproStatusID.IsNullable = true;
				colvarReproStatusID.IsPrimaryKey = false;
				colvarReproStatusID.IsForeignKey = true;
				colvarReproStatusID.IsReadOnly = false;
				colvarReproStatusID.DefaultSetting = @"";
				
					colvarReproStatusID.ForeignKeyTableName = "tblProgressReproStatus";
				schema.Columns.Add(colvarReproStatusID);
				
				TableSchema.TableColumn colvarCylinderDate = new TableSchema.TableColumn(schema);
				colvarCylinderDate.ColumnName = "CylinderDate";
				colvarCylinderDate.DataType = DbType.DateTime;
				colvarCylinderDate.MaxLength = 0;
				colvarCylinderDate.AutoIncrement = false;
				colvarCylinderDate.IsNullable = true;
				colvarCylinderDate.IsPrimaryKey = false;
				colvarCylinderDate.IsForeignKey = false;
				colvarCylinderDate.IsReadOnly = false;
				colvarCylinderDate.DefaultSetting = @"";
				colvarCylinderDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCylinderDate);
				
				TableSchema.TableColumn colvarCylinderStatusID = new TableSchema.TableColumn(schema);
				colvarCylinderStatusID.ColumnName = "CylinderStatusID";
				colvarCylinderStatusID.DataType = DbType.Int16;
				colvarCylinderStatusID.MaxLength = 0;
				colvarCylinderStatusID.AutoIncrement = false;
				colvarCylinderStatusID.IsNullable = true;
				colvarCylinderStatusID.IsPrimaryKey = false;
				colvarCylinderStatusID.IsForeignKey = true;
				colvarCylinderStatusID.IsReadOnly = false;
				colvarCylinderStatusID.DefaultSetting = @"";
				
					colvarCylinderStatusID.ForeignKeyTableName = "tblProgressCylinderStatus";
				schema.Columns.Add(colvarCylinderStatusID);
				
				TableSchema.TableColumn colvarDeliveryDate = new TableSchema.TableColumn(schema);
				colvarDeliveryDate.ColumnName = "DeliveryDate";
				colvarDeliveryDate.DataType = DbType.DateTime;
				colvarDeliveryDate.MaxLength = 0;
				colvarDeliveryDate.AutoIncrement = false;
				colvarDeliveryDate.IsNullable = true;
				colvarDeliveryDate.IsPrimaryKey = false;
				colvarDeliveryDate.IsForeignKey = false;
				colvarDeliveryDate.IsReadOnly = false;
				colvarDeliveryDate.DefaultSetting = @"";
				colvarDeliveryDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeliveryDate);
				
				TableSchema.TableColumn colvarEngravingDate = new TableSchema.TableColumn(schema);
				colvarEngravingDate.ColumnName = "EngravingDate";
				colvarEngravingDate.DataType = DbType.DateTime;
				colvarEngravingDate.MaxLength = 0;
				colvarEngravingDate.AutoIncrement = false;
				colvarEngravingDate.IsNullable = true;
				colvarEngravingDate.IsPrimaryKey = false;
				colvarEngravingDate.IsForeignKey = false;
				colvarEngravingDate.IsReadOnly = false;
				colvarEngravingDate.DefaultSetting = @"";
				colvarEngravingDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEngravingDate);
				
				TableSchema.TableColumn colvarDeReDate = new TableSchema.TableColumn(schema);
				colvarDeReDate.ColumnName = "DeReDate";
				colvarDeReDate.DataType = DbType.DateTime;
				colvarDeReDate.MaxLength = 0;
				colvarDeReDate.AutoIncrement = false;
				colvarDeReDate.IsNullable = true;
				colvarDeReDate.IsPrimaryKey = false;
				colvarDeReDate.IsForeignKey = false;
				colvarDeReDate.IsReadOnly = false;
				colvarDeReDate.DefaultSetting = @"";
				colvarDeReDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeReDate);
				
				TableSchema.TableColumn colvarNote = new TableSchema.TableColumn(schema);
				colvarNote.ColumnName = "Note";
				colvarNote.DataType = DbType.String;
				colvarNote.MaxLength = 1000;
				colvarNote.AutoIncrement = false;
				colvarNote.IsNullable = true;
				colvarNote.IsPrimaryKey = false;
				colvarNote.IsForeignKey = false;
				colvarNote.IsReadOnly = false;
				colvarNote.DefaultSetting = @"";
				colvarNote.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNote);
				
				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 100;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 100;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = true;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("tblProgress",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("JobID")]
		[Bindable(true)]
		public int JobID 
		{
			get { return GetColumnValue<int>(Columns.JobID); }
			set { SetColumnValue(Columns.JobID, value); }
		}
		  
		[XmlAttribute("ProofDate")]
		[Bindable(true)]
		public DateTime? ProofDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ProofDate); }
			set { SetColumnValue(Columns.ProofDate, value); }
		}
		  
		[XmlAttribute("ReproDate")]
		[Bindable(true)]
		public DateTime? ReproDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ReproDate); }
			set { SetColumnValue(Columns.ReproDate, value); }
		}
		  
		[XmlAttribute("ReproStatusID")]
		[Bindable(true)]
		public short? ReproStatusID 
		{
			get { return GetColumnValue<short?>(Columns.ReproStatusID); }
			set { SetColumnValue(Columns.ReproStatusID, value); }
		}
		  
		[XmlAttribute("CylinderDate")]
		[Bindable(true)]
		public DateTime? CylinderDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CylinderDate); }
			set { SetColumnValue(Columns.CylinderDate, value); }
		}
		  
		[XmlAttribute("CylinderStatusID")]
		[Bindable(true)]
		public short? CylinderStatusID 
		{
			get { return GetColumnValue<short?>(Columns.CylinderStatusID); }
			set { SetColumnValue(Columns.CylinderStatusID, value); }
		}
		  
		[XmlAttribute("DeliveryDate")]
		[Bindable(true)]
		public DateTime? DeliveryDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.DeliveryDate); }
			set { SetColumnValue(Columns.DeliveryDate, value); }
		}
		  
		[XmlAttribute("EngravingDate")]
		[Bindable(true)]
		public DateTime? EngravingDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.EngravingDate); }
			set { SetColumnValue(Columns.EngravingDate, value); }
		}
		  
		[XmlAttribute("DeReDate")]
		[Bindable(true)]
		public DateTime? DeReDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.DeReDate); }
			set { SetColumnValue(Columns.DeReDate, value); }
		}
		  
		[XmlAttribute("Note")]
		[Bindable(true)]
		public string Note 
		{
			get { return GetColumnValue<string>(Columns.Note); }
			set { SetColumnValue(Columns.Note, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public string CreatedBy 
		{
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedBy")]
		[Bindable(true)]
		public string ModifiedBy 
		{
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblJob ActiveRecord object related to this TblProgress
		/// 
		/// </summary>
		public SweetSoft.APEM.DataAccess.TblJob TblJob
		{
			get { return SweetSoft.APEM.DataAccess.TblJob.FetchByID(this.JobID); }
			set { SetColumnValue("JobID", value.JobID); }
		}
		
		
		/// <summary>
		/// Returns a TblProgressCylinderStatus ActiveRecord object related to this TblProgress
		/// 
		/// </summary>
		public SweetSoft.APEM.DataAccess.TblProgressCylinderStatus TblProgressCylinderStatus
		{
			get { return SweetSoft.APEM.DataAccess.TblProgressCylinderStatus.FetchByID(this.CylinderStatusID); }
			set { SetColumnValue("CylinderStatusID", value.CylinderStatusID); }
		}
		
		
		/// <summary>
		/// Returns a TblProgressReproStatus ActiveRecord object related to this TblProgress
		/// 
		/// </summary>
		public SweetSoft.APEM.DataAccess.TblProgressReproStatus TblProgressReproStatus
		{
			get { return SweetSoft.APEM.DataAccess.TblProgressReproStatus.FetchByID(this.ReproStatusID); }
			set { SetColumnValue("ReproStatusID", value.ReproStatusID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varJobID,DateTime? varProofDate,DateTime? varReproDate,short? varReproStatusID,DateTime? varCylinderDate,short? varCylinderStatusID,DateTime? varDeliveryDate,DateTime? varEngravingDate,DateTime? varDeReDate,string varNote,string varCreatedBy,DateTime? varCreatedOn,string varModifiedBy,DateTime? varModifiedOn)
		{
			TblProgress item = new TblProgress();
			
			item.JobID = varJobID;
			
			item.ProofDate = varProofDate;
			
			item.ReproDate = varReproDate;
			
			item.ReproStatusID = varReproStatusID;
			
			item.CylinderDate = varCylinderDate;
			
			item.CylinderStatusID = varCylinderStatusID;
			
			item.DeliveryDate = varDeliveryDate;
			
			item.EngravingDate = varEngravingDate;
			
			item.DeReDate = varDeReDate;
			
			item.Note = varNote;
			
			item.CreatedBy = varCreatedBy;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedBy = varModifiedBy;
			
			item.ModifiedOn = varModifiedOn;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varJobID,DateTime? varProofDate,DateTime? varReproDate,short? varReproStatusID,DateTime? varCylinderDate,short? varCylinderStatusID,DateTime? varDeliveryDate,DateTime? varEngravingDate,DateTime? varDeReDate,string varNote,string varCreatedBy,DateTime? varCreatedOn,string varModifiedBy,DateTime? varModifiedOn)
		{
			TblProgress item = new TblProgress();
			
				item.JobID = varJobID;
			
				item.ProofDate = varProofDate;
			
				item.ReproDate = varReproDate;
			
				item.ReproStatusID = varReproStatusID;
			
				item.CylinderDate = varCylinderDate;
			
				item.CylinderStatusID = varCylinderStatusID;
			
				item.DeliveryDate = varDeliveryDate;
			
				item.EngravingDate = varEngravingDate;
			
				item.DeReDate = varDeReDate;
			
				item.Note = varNote;
			
				item.CreatedBy = varCreatedBy;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedBy = varModifiedBy;
			
				item.ModifiedOn = varModifiedOn;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn JobIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ProofDateColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ReproDateColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ReproStatusIDColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CylinderDateColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CylinderStatusIDColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn DeliveryDateColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn EngravingDateColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn DeReDateColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn NoteColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedByColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string JobID = @"JobID";
			 public static string ProofDate = @"ProofDate";
			 public static string ReproDate = @"ReproDate";
			 public static string ReproStatusID = @"ReproStatusID";
			 public static string CylinderDate = @"CylinderDate";
			 public static string CylinderStatusID = @"CylinderStatusID";
			 public static string DeliveryDate = @"DeliveryDate";
			 public static string EngravingDate = @"EngravingDate";
			 public static string DeReDate = @"DeReDate";
			 public static string Note = @"Note";
			 public static string CreatedBy = @"CreatedBy";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedBy = @"ModifiedBy";
			 public static string ModifiedOn = @"ModifiedOn";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
