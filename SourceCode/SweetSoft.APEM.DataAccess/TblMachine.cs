using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblMachine class.
	/// </summary>
    [Serializable]
	public partial class TblMachineCollection : ActiveList<TblMachine, TblMachineCollection>
	{	   
		public TblMachineCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblMachineCollection</returns>
		public TblMachineCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblMachine o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblMachine table.
	/// </summary>
	[Serializable]
	public partial class TblMachine : ActiveRecord<TblMachine>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblMachine()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblMachine(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblMachine(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblMachine(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblMachine", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.String;
				colvarName.MaxLength = -1;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = true;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);
				
				TableSchema.TableColumn colvarCode = new TableSchema.TableColumn(schema);
				colvarCode.ColumnName = "Code";
				colvarCode.DataType = DbType.String;
				colvarCode.MaxLength = -1;
				colvarCode.AutoIncrement = false;
				colvarCode.IsNullable = true;
				colvarCode.IsPrimaryKey = false;
				colvarCode.IsForeignKey = false;
				colvarCode.IsReadOnly = false;
				colvarCode.DefaultSetting = @"";
				colvarCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCode);
				
				TableSchema.TableColumn colvarPerformance = new TableSchema.TableColumn(schema);
				colvarPerformance.ColumnName = "Performance";
				colvarPerformance.DataType = DbType.String;
				colvarPerformance.MaxLength = 50;
				colvarPerformance.AutoIncrement = false;
				colvarPerformance.IsNullable = true;
				colvarPerformance.IsPrimaryKey = false;
				colvarPerformance.IsForeignKey = false;
				colvarPerformance.IsReadOnly = false;
				colvarPerformance.DefaultSetting = @"";
				colvarPerformance.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPerformance);
				
				TableSchema.TableColumn colvarMaintenance = new TableSchema.TableColumn(schema);
				colvarMaintenance.ColumnName = "Maintenance";
				colvarMaintenance.DataType = DbType.String;
				colvarMaintenance.MaxLength = 50;
				colvarMaintenance.AutoIncrement = false;
				colvarMaintenance.IsNullable = true;
				colvarMaintenance.IsPrimaryKey = false;
				colvarMaintenance.IsForeignKey = false;
				colvarMaintenance.IsReadOnly = false;
				colvarMaintenance.DefaultSetting = @"";
				colvarMaintenance.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaintenance);
				
				TableSchema.TableColumn colvarManufacturer = new TableSchema.TableColumn(schema);
				colvarManufacturer.ColumnName = "Manufacturer";
				colvarManufacturer.DataType = DbType.String;
				colvarManufacturer.MaxLength = -1;
				colvarManufacturer.AutoIncrement = false;
				colvarManufacturer.IsNullable = true;
				colvarManufacturer.IsPrimaryKey = false;
				colvarManufacturer.IsForeignKey = false;
				colvarManufacturer.IsReadOnly = false;
				colvarManufacturer.DefaultSetting = @"";
				colvarManufacturer.ForeignKeyTableName = "";
				schema.Columns.Add(colvarManufacturer);
				
				TableSchema.TableColumn colvarDepartmentID = new TableSchema.TableColumn(schema);
				colvarDepartmentID.ColumnName = "DepartmentID";
				colvarDepartmentID.DataType = DbType.Int16;
				colvarDepartmentID.MaxLength = 0;
				colvarDepartmentID.AutoIncrement = false;
				colvarDepartmentID.IsNullable = true;
				colvarDepartmentID.IsPrimaryKey = false;
				colvarDepartmentID.IsForeignKey = false;
				colvarDepartmentID.IsReadOnly = false;
				colvarDepartmentID.DefaultSetting = @"";
				colvarDepartmentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepartmentID);
				
				TableSchema.TableColumn colvarIsObsolete = new TableSchema.TableColumn(schema);
				colvarIsObsolete.ColumnName = "IsObsolete";
				colvarIsObsolete.DataType = DbType.Byte;
				colvarIsObsolete.MaxLength = 0;
				colvarIsObsolete.AutoIncrement = false;
				colvarIsObsolete.IsNullable = true;
				colvarIsObsolete.IsPrimaryKey = false;
				colvarIsObsolete.IsForeignKey = false;
				colvarIsObsolete.IsReadOnly = false;
				colvarIsObsolete.DefaultSetting = @"";
				colvarIsObsolete.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsObsolete);
				
				TableSchema.TableColumn colvarProduceYear = new TableSchema.TableColumn(schema);
				colvarProduceYear.ColumnName = "ProduceYear";
				colvarProduceYear.DataType = DbType.Int32;
				colvarProduceYear.MaxLength = 0;
				colvarProduceYear.AutoIncrement = false;
				colvarProduceYear.IsNullable = true;
				colvarProduceYear.IsPrimaryKey = false;
				colvarProduceYear.IsForeignKey = false;
				colvarProduceYear.IsReadOnly = false;
				colvarProduceYear.DefaultSetting = @"";
				colvarProduceYear.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProduceYear);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("tblMachine",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("Name")]
		[Bindable(true)]
		public string Name 
		{
			get { return GetColumnValue<string>(Columns.Name); }
			set { SetColumnValue(Columns.Name, value); }
		}
		  
		[XmlAttribute("Code")]
		[Bindable(true)]
		public string Code 
		{
			get { return GetColumnValue<string>(Columns.Code); }
			set { SetColumnValue(Columns.Code, value); }
		}
		  
		[XmlAttribute("Performance")]
		[Bindable(true)]
		public string Performance 
		{
			get { return GetColumnValue<string>(Columns.Performance); }
			set { SetColumnValue(Columns.Performance, value); }
		}
		  
		[XmlAttribute("Maintenance")]
		[Bindable(true)]
		public string Maintenance 
		{
			get { return GetColumnValue<string>(Columns.Maintenance); }
			set { SetColumnValue(Columns.Maintenance, value); }
		}
		  
		[XmlAttribute("Manufacturer")]
		[Bindable(true)]
		public string Manufacturer 
		{
			get { return GetColumnValue<string>(Columns.Manufacturer); }
			set { SetColumnValue(Columns.Manufacturer, value); }
		}
		  
		[XmlAttribute("DepartmentID")]
		[Bindable(true)]
		public short? DepartmentID 
		{
			get { return GetColumnValue<short?>(Columns.DepartmentID); }
			set { SetColumnValue(Columns.DepartmentID, value); }
		}
		  
		[XmlAttribute("IsObsolete")]
		[Bindable(true)]
		public byte? IsObsolete 
		{
			get { return GetColumnValue<byte?>(Columns.IsObsolete); }
			set { SetColumnValue(Columns.IsObsolete, value); }
		}
		  
		[XmlAttribute("ProduceYear")]
		[Bindable(true)]
		public int? ProduceYear 
		{
			get { return GetColumnValue<int?>(Columns.ProduceYear); }
			set { SetColumnValue(Columns.ProduceYear, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varName,string varCode,string varPerformance,string varMaintenance,string varManufacturer,short? varDepartmentID,byte? varIsObsolete,int? varProduceYear)
		{
			TblMachine item = new TblMachine();
			
			item.Name = varName;
			
			item.Code = varCode;
			
			item.Performance = varPerformance;
			
			item.Maintenance = varMaintenance;
			
			item.Manufacturer = varManufacturer;
			
			item.DepartmentID = varDepartmentID;
			
			item.IsObsolete = varIsObsolete;
			
			item.ProduceYear = varProduceYear;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varName,string varCode,string varPerformance,string varMaintenance,string varManufacturer,short? varDepartmentID,byte? varIsObsolete,int? varProduceYear)
		{
			TblMachine item = new TblMachine();
			
				item.Id = varId;
			
				item.Name = varName;
			
				item.Code = varCode;
			
				item.Performance = varPerformance;
			
				item.Maintenance = varMaintenance;
			
				item.Manufacturer = varManufacturer;
			
				item.DepartmentID = varDepartmentID;
			
				item.IsObsolete = varIsObsolete;
			
				item.ProduceYear = varProduceYear;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn NameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn CodeColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn PerformanceColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn MaintenanceColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ManufacturerColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn DepartmentIDColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn IsObsoleteColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ProduceYearColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string Name = @"Name";
			 public static string Code = @"Code";
			 public static string Performance = @"Performance";
			 public static string Maintenance = @"Maintenance";
			 public static string Manufacturer = @"Manufacturer";
			 public static string DepartmentID = @"DepartmentID";
			 public static string IsObsolete = @"IsObsolete";
			 public static string ProduceYear = @"ProduceYear";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
