using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
    /// <summary>
    /// Controller class for tblOrderConfirmation
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TblOrderConfirmationController
    {
        // Preload our schema..
        TblOrderConfirmation thisSchemaLoad = new TblOrderConfirmation();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TblOrderConfirmationCollection FetchAll()
        {
            TblOrderConfirmationCollection coll = new TblOrderConfirmationCollection();
            Query qry = new Query(TblOrderConfirmation.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblOrderConfirmationCollection FetchByID(object JobID)
        {
            TblOrderConfirmationCollection coll = new TblOrderConfirmationCollection().Where("JobID", JobID).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblOrderConfirmationCollection FetchByQuery(Query qry)
        {
            TblOrderConfirmationCollection coll = new TblOrderConfirmationCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object JobID)
        {
            return (TblOrderConfirmation.Delete(JobID) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object JobID)
        {
            return (TblOrderConfirmation.Destroy(JobID) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(int JobID,string OCNumber,string CustomerPO1,string CustomerPO2,int ContactPersonID,DateTime OrderDate,short? TaxID,double? TaxPercentage,short CurrencyID,decimal? RMValue,decimal? CurrencyValue,double? Discount,string Remark,string RemarkScreen,string DeliveryTerm,string PaymentTerm,string CreatedBy,DateTime? CreatedOn,string ModifiedBy,DateTime? ModifiedOn,decimal? TotalPrice,bool InvoiceCurrency)
	    {
		    TblOrderConfirmation item = new TblOrderConfirmation();
		    
            item.JobID = JobID;
            
            item.OCNumber = OCNumber;
            
            item.CustomerPO1 = CustomerPO1;
            
            item.CustomerPO2 = CustomerPO2;
            
            item.ContactPersonID = ContactPersonID;
            
            item.OrderDate = OrderDate;
            
            item.TaxID = TaxID;
            
            item.TaxPercentage = TaxPercentage;
            
            item.CurrencyID = CurrencyID;
            
            item.RMValue = RMValue;
            
            item.CurrencyValue = CurrencyValue;
            
            item.Discount = Discount;
            
            item.Remark = Remark;
            
            item.RemarkScreen = RemarkScreen;
            
            item.DeliveryTerm = DeliveryTerm;
            
            item.PaymentTerm = PaymentTerm;
            
            item.CreatedBy = CreatedBy;
            
            item.CreatedOn = CreatedOn;
            
            item.ModifiedBy = ModifiedBy;
            
            item.ModifiedOn = ModifiedOn;
            
            item.TotalPrice = TotalPrice;
            
            item.InvoiceCurrency = InvoiceCurrency;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int JobID,string OCNumber,string CustomerPO1,string CustomerPO2,int ContactPersonID,DateTime OrderDate,short? TaxID,double? TaxPercentage,short CurrencyID,decimal? RMValue,decimal? CurrencyValue,double? Discount,string Remark,string RemarkScreen,string DeliveryTerm,string PaymentTerm,string CreatedBy,DateTime? CreatedOn,string ModifiedBy,DateTime? ModifiedOn,decimal? TotalPrice,bool InvoiceCurrency)
	    {
		    TblOrderConfirmation item = new TblOrderConfirmation();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.JobID = JobID;
				
			item.OCNumber = OCNumber;
				
			item.CustomerPO1 = CustomerPO1;
				
			item.CustomerPO2 = CustomerPO2;
				
			item.ContactPersonID = ContactPersonID;
				
			item.OrderDate = OrderDate;
				
			item.TaxID = TaxID;
				
			item.TaxPercentage = TaxPercentage;
				
			item.CurrencyID = CurrencyID;
				
			item.RMValue = RMValue;
				
			item.CurrencyValue = CurrencyValue;
				
			item.Discount = Discount;
				
			item.Remark = Remark;
				
			item.RemarkScreen = RemarkScreen;
				
			item.DeliveryTerm = DeliveryTerm;
				
			item.PaymentTerm = PaymentTerm;
				
			item.CreatedBy = CreatedBy;
				
			item.CreatedOn = CreatedOn;
				
			item.ModifiedBy = ModifiedBy;
				
			item.ModifiedOn = ModifiedOn;
				
			item.TotalPrice = TotalPrice;
				
			item.InvoiceCurrency = InvoiceCurrency;
				
	        item.Save(UserName);
	    }
    }
}
