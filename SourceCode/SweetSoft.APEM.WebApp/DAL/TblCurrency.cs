using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblCurrency class.
	/// </summary>
    [Serializable]
	public partial class TblCurrencyCollection : ActiveList<TblCurrency, TblCurrencyCollection>
	{	   
		public TblCurrencyCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblCurrencyCollection</returns>
		public TblCurrencyCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblCurrency o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblCurrency table.
	/// </summary>
	[Serializable]
	public partial class TblCurrency : ActiveRecord<TblCurrency>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblCurrency()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblCurrency(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblCurrency(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblCurrency(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblCurrency", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarCurrencyID = new TableSchema.TableColumn(schema);
				colvarCurrencyID.ColumnName = "CurrencyID";
				colvarCurrencyID.DataType = DbType.Int16;
				colvarCurrencyID.MaxLength = 0;
				colvarCurrencyID.AutoIncrement = true;
				colvarCurrencyID.IsNullable = false;
				colvarCurrencyID.IsPrimaryKey = true;
				colvarCurrencyID.IsForeignKey = false;
				colvarCurrencyID.IsReadOnly = false;
				colvarCurrencyID.DefaultSetting = @"";
				colvarCurrencyID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrencyID);
				
				TableSchema.TableColumn colvarCurrencyName = new TableSchema.TableColumn(schema);
				colvarCurrencyName.ColumnName = "CurrencyName";
				colvarCurrencyName.DataType = DbType.String;
				colvarCurrencyName.MaxLength = 50;
				colvarCurrencyName.AutoIncrement = false;
				colvarCurrencyName.IsNullable = false;
				colvarCurrencyName.IsPrimaryKey = false;
				colvarCurrencyName.IsForeignKey = false;
				colvarCurrencyName.IsReadOnly = false;
				colvarCurrencyName.DefaultSetting = @"";
				colvarCurrencyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrencyName);
				
				TableSchema.TableColumn colvarRMValue = new TableSchema.TableColumn(schema);
				colvarRMValue.ColumnName = "RMValue";
				colvarRMValue.DataType = DbType.Decimal;
				colvarRMValue.MaxLength = 0;
				colvarRMValue.AutoIncrement = false;
				colvarRMValue.IsNullable = false;
				colvarRMValue.IsPrimaryKey = false;
				colvarRMValue.IsForeignKey = false;
				colvarRMValue.IsReadOnly = false;
				colvarRMValue.DefaultSetting = @"";
				colvarRMValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRMValue);
				
				TableSchema.TableColumn colvarCurrencyValue = new TableSchema.TableColumn(schema);
				colvarCurrencyValue.ColumnName = "CurrencyValue";
				colvarCurrencyValue.DataType = DbType.Decimal;
				colvarCurrencyValue.MaxLength = 0;
				colvarCurrencyValue.AutoIncrement = false;
				colvarCurrencyValue.IsNullable = false;
				colvarCurrencyValue.IsPrimaryKey = false;
				colvarCurrencyValue.IsForeignKey = false;
				colvarCurrencyValue.IsReadOnly = false;
				colvarCurrencyValue.DefaultSetting = @"";
				colvarCurrencyValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrencyValue);
				
				TableSchema.TableColumn colvarIsObsolete = new TableSchema.TableColumn(schema);
				colvarIsObsolete.ColumnName = "IsObsolete";
				colvarIsObsolete.DataType = DbType.Boolean;
				colvarIsObsolete.MaxLength = 0;
				colvarIsObsolete.AutoIncrement = false;
				colvarIsObsolete.IsNullable = false;
				colvarIsObsolete.IsPrimaryKey = false;
				colvarIsObsolete.IsForeignKey = false;
				colvarIsObsolete.IsReadOnly = false;
				colvarIsObsolete.DefaultSetting = @"";
				colvarIsObsolete.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsObsolete);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("tblCurrency",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("CurrencyID")]
		[Bindable(true)]
		public short CurrencyID 
		{
			get { return GetColumnValue<short>(Columns.CurrencyID); }
			set { SetColumnValue(Columns.CurrencyID, value); }
		}
		  
		[XmlAttribute("CurrencyName")]
		[Bindable(true)]
		public string CurrencyName 
		{
			get { return GetColumnValue<string>(Columns.CurrencyName); }
			set { SetColumnValue(Columns.CurrencyName, value); }
		}
		  
		[XmlAttribute("RMValue")]
		[Bindable(true)]
		public decimal RMValue 
		{
			get { return GetColumnValue<decimal>(Columns.RMValue); }
			set { SetColumnValue(Columns.RMValue, value); }
		}
		  
		[XmlAttribute("CurrencyValue")]
		[Bindable(true)]
		public decimal CurrencyValue 
		{
			get { return GetColumnValue<decimal>(Columns.CurrencyValue); }
			set { SetColumnValue(Columns.CurrencyValue, value); }
		}
		  
		[XmlAttribute("IsObsolete")]
		[Bindable(true)]
		public bool IsObsolete 
		{
			get { return GetColumnValue<bool>(Columns.IsObsolete); }
			set { SetColumnValue(Columns.IsObsolete, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		private SweetSoft.APEM.DataAccess.TblOrderConfirmationCollection colTblOrderConfirmationRecords;
		public SweetSoft.APEM.DataAccess.TblOrderConfirmationCollection TblOrderConfirmationRecords()
		{
			if(colTblOrderConfirmationRecords == null)
			{
				colTblOrderConfirmationRecords = new SweetSoft.APEM.DataAccess.TblOrderConfirmationCollection().Where(TblOrderConfirmation.Columns.CurrencyID, CurrencyID).Load();
				colTblOrderConfirmationRecords.ListChanged += new ListChangedEventHandler(colTblOrderConfirmationRecords_ListChanged);
			}
			return colTblOrderConfirmationRecords;
		}
				
		void colTblOrderConfirmationRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colTblOrderConfirmationRecords[e.NewIndex].CurrencyID = CurrencyID;
            }
		}
		#endregion
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varCurrencyName,decimal varRMValue,decimal varCurrencyValue,bool varIsObsolete)
		{
			TblCurrency item = new TblCurrency();
			
			item.CurrencyName = varCurrencyName;
			
			item.RMValue = varRMValue;
			
			item.CurrencyValue = varCurrencyValue;
			
			item.IsObsolete = varIsObsolete;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(short varCurrencyID,string varCurrencyName,decimal varRMValue,decimal varCurrencyValue,bool varIsObsolete)
		{
			TblCurrency item = new TblCurrency();
			
				item.CurrencyID = varCurrencyID;
			
				item.CurrencyName = varCurrencyName;
			
				item.RMValue = varRMValue;
			
				item.CurrencyValue = varCurrencyValue;
			
				item.IsObsolete = varIsObsolete;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn CurrencyIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CurrencyNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn RMValueColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CurrencyValueColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn IsObsoleteColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string CurrencyID = @"CurrencyID";
			 public static string CurrencyName = @"CurrencyName";
			 public static string RMValue = @"RMValue";
			 public static string CurrencyValue = @"CurrencyValue";
			 public static string IsObsolete = @"IsObsolete";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
                if (colTblOrderConfirmationRecords != null)
                {
                    foreach (SweetSoft.APEM.DataAccess.TblOrderConfirmation item in colTblOrderConfirmationRecords)
                    {
                        if (item.CurrencyID != CurrencyID)
                        {
                            item.CurrencyID = CurrencyID;
                        }
                    }
               }
		}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
                if (colTblOrderConfirmationRecords != null)
                {
                    colTblOrderConfirmationRecords.SaveAll();
               }
		}
        #endregion
	}
}
