using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblJob class.
	/// </summary>
    [Serializable]
	public partial class TblJobCollection : ActiveList<TblJob, TblJobCollection>
	{	   
		public TblJobCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblJobCollection</returns>
		public TblJobCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblJob o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblJob table.
	/// </summary>
	[Serializable]
	public partial class TblJob : ActiveRecord<TblJob>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblJob()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblJob(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblJob(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblJob(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblJob", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarJobID = new TableSchema.TableColumn(schema);
				colvarJobID.ColumnName = "JobID";
				colvarJobID.DataType = DbType.Int32;
				colvarJobID.MaxLength = 0;
				colvarJobID.AutoIncrement = true;
				colvarJobID.IsNullable = false;
				colvarJobID.IsPrimaryKey = true;
				colvarJobID.IsForeignKey = false;
				colvarJobID.IsReadOnly = false;
				colvarJobID.DefaultSetting = @"";
				colvarJobID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarJobID);
				
				TableSchema.TableColumn colvarJobNumber = new TableSchema.TableColumn(schema);
				colvarJobNumber.ColumnName = "JobNumber";
				colvarJobNumber.DataType = DbType.AnsiString;
				colvarJobNumber.MaxLength = 10;
				colvarJobNumber.AutoIncrement = false;
				colvarJobNumber.IsNullable = true;
				colvarJobNumber.IsPrimaryKey = false;
				colvarJobNumber.IsForeignKey = false;
				colvarJobNumber.IsReadOnly = false;
				colvarJobNumber.DefaultSetting = @"";
				colvarJobNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarJobNumber);
				
				TableSchema.TableColumn colvarRevNumber = new TableSchema.TableColumn(schema);
				colvarRevNumber.ColumnName = "RevNumber";
				colvarRevNumber.DataType = DbType.Int32;
				colvarRevNumber.MaxLength = 0;
				colvarRevNumber.AutoIncrement = false;
				colvarRevNumber.IsNullable = false;
				colvarRevNumber.IsPrimaryKey = false;
				colvarRevNumber.IsForeignKey = false;
				colvarRevNumber.IsReadOnly = false;
				colvarRevNumber.DefaultSetting = @"";
				colvarRevNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRevNumber);
				
				TableSchema.TableColumn colvarJobBarcode = new TableSchema.TableColumn(schema);
				colvarJobBarcode.ColumnName = "JobBarcode";
				colvarJobBarcode.DataType = DbType.String;
				colvarJobBarcode.MaxLength = 50;
				colvarJobBarcode.AutoIncrement = false;
				colvarJobBarcode.IsNullable = true;
				colvarJobBarcode.IsPrimaryKey = false;
				colvarJobBarcode.IsForeignKey = false;
				colvarJobBarcode.IsReadOnly = false;
				colvarJobBarcode.DefaultSetting = @"";
				colvarJobBarcode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarJobBarcode);
				
				TableSchema.TableColumn colvarJobBarcodeImage = new TableSchema.TableColumn(schema);
				colvarJobBarcodeImage.ColumnName = "JobBarcodeImage";
				colvarJobBarcodeImage.DataType = DbType.String;
				colvarJobBarcodeImage.MaxLength = 1073741823;
				colvarJobBarcodeImage.AutoIncrement = false;
				colvarJobBarcodeImage.IsNullable = true;
				colvarJobBarcodeImage.IsPrimaryKey = false;
				colvarJobBarcodeImage.IsForeignKey = false;
				colvarJobBarcodeImage.IsReadOnly = false;
				colvarJobBarcodeImage.DefaultSetting = @"";
				colvarJobBarcodeImage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarJobBarcodeImage);
				
				TableSchema.TableColumn colvarJobName = new TableSchema.TableColumn(schema);
				colvarJobName.ColumnName = "JobName";
				colvarJobName.DataType = DbType.String;
				colvarJobName.MaxLength = 100;
				colvarJobName.AutoIncrement = false;
				colvarJobName.IsNullable = true;
				colvarJobName.IsPrimaryKey = false;
				colvarJobName.IsForeignKey = false;
				colvarJobName.IsReadOnly = false;
				colvarJobName.DefaultSetting = @"";
				colvarJobName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarJobName);
				
				TableSchema.TableColumn colvarDesign = new TableSchema.TableColumn(schema);
				colvarDesign.ColumnName = "Design";
				colvarDesign.DataType = DbType.String;
				colvarDesign.MaxLength = 100;
				colvarDesign.AutoIncrement = false;
				colvarDesign.IsNullable = true;
				colvarDesign.IsPrimaryKey = false;
				colvarDesign.IsForeignKey = false;
				colvarDesign.IsReadOnly = false;
				colvarDesign.DefaultSetting = @"";
				colvarDesign.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDesign);
				
				TableSchema.TableColumn colvarDrawingNumber = new TableSchema.TableColumn(schema);
				colvarDrawingNumber.ColumnName = "DrawingNumber";
				colvarDrawingNumber.DataType = DbType.String;
				colvarDrawingNumber.MaxLength = 100;
				colvarDrawingNumber.AutoIncrement = false;
				colvarDrawingNumber.IsNullable = true;
				colvarDrawingNumber.IsPrimaryKey = false;
				colvarDrawingNumber.IsForeignKey = false;
				colvarDrawingNumber.IsReadOnly = false;
				colvarDrawingNumber.DefaultSetting = @"";
				colvarDrawingNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDrawingNumber);
				
				TableSchema.TableColumn colvarRootJobID = new TableSchema.TableColumn(schema);
				colvarRootJobID.ColumnName = "RootJobID";
				colvarRootJobID.DataType = DbType.Int32;
				colvarRootJobID.MaxLength = 0;
				colvarRootJobID.AutoIncrement = false;
				colvarRootJobID.IsNullable = true;
				colvarRootJobID.IsPrimaryKey = false;
				colvarRootJobID.IsForeignKey = false;
				colvarRootJobID.IsReadOnly = false;
				colvarRootJobID.DefaultSetting = @"";
				colvarRootJobID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRootJobID);
				
				TableSchema.TableColumn colvarRootJobNo = new TableSchema.TableColumn(schema);
				colvarRootJobNo.ColumnName = "RootJobNo";
				colvarRootJobNo.DataType = DbType.String;
				colvarRootJobNo.MaxLength = 50;
				colvarRootJobNo.AutoIncrement = false;
				colvarRootJobNo.IsNullable = true;
				colvarRootJobNo.IsPrimaryKey = false;
				colvarRootJobNo.IsForeignKey = false;
				colvarRootJobNo.IsReadOnly = false;
				colvarRootJobNo.DefaultSetting = @"";
				colvarRootJobNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRootJobNo);
				
				TableSchema.TableColumn colvarRootJobRevNumber = new TableSchema.TableColumn(schema);
				colvarRootJobRevNumber.ColumnName = "RootJobRevNumber";
				colvarRootJobRevNumber.DataType = DbType.AnsiString;
				colvarRootJobRevNumber.MaxLength = 50;
				colvarRootJobRevNumber.AutoIncrement = false;
				colvarRootJobRevNumber.IsNullable = true;
				colvarRootJobRevNumber.IsPrimaryKey = false;
				colvarRootJobRevNumber.IsForeignKey = false;
				colvarRootJobRevNumber.IsReadOnly = false;
				colvarRootJobRevNumber.DefaultSetting = @"";
				colvarRootJobRevNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRootJobRevNumber);
				
				TableSchema.TableColumn colvarCommonJobNumber = new TableSchema.TableColumn(schema);
				colvarCommonJobNumber.ColumnName = "CommonJobNumber";
				colvarCommonJobNumber.DataType = DbType.AnsiString;
				colvarCommonJobNumber.MaxLength = 50;
				colvarCommonJobNumber.AutoIncrement = false;
				colvarCommonJobNumber.IsNullable = true;
				colvarCommonJobNumber.IsPrimaryKey = false;
				colvarCommonJobNumber.IsForeignKey = false;
				colvarCommonJobNumber.IsReadOnly = false;
				colvarCommonJobNumber.DefaultSetting = @"";
				colvarCommonJobNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCommonJobNumber);
				
				TableSchema.TableColumn colvarCustomerPO1 = new TableSchema.TableColumn(schema);
				colvarCustomerPO1.ColumnName = "CustomerPO1";
				colvarCustomerPO1.DataType = DbType.String;
				colvarCustomerPO1.MaxLength = 100;
				colvarCustomerPO1.AutoIncrement = false;
				colvarCustomerPO1.IsNullable = true;
				colvarCustomerPO1.IsPrimaryKey = false;
				colvarCustomerPO1.IsForeignKey = false;
				colvarCustomerPO1.IsReadOnly = false;
				colvarCustomerPO1.DefaultSetting = @"";
				colvarCustomerPO1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerPO1);
				
				TableSchema.TableColumn colvarCustomerPO2 = new TableSchema.TableColumn(schema);
				colvarCustomerPO2.ColumnName = "CustomerPO2";
				colvarCustomerPO2.DataType = DbType.String;
				colvarCustomerPO2.MaxLength = 100;
				colvarCustomerPO2.AutoIncrement = false;
				colvarCustomerPO2.IsNullable = true;
				colvarCustomerPO2.IsPrimaryKey = false;
				colvarCustomerPO2.IsForeignKey = false;
				colvarCustomerPO2.IsReadOnly = false;
				colvarCustomerPO2.DefaultSetting = @"";
				colvarCustomerPO2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerPO2);
				
				TableSchema.TableColumn colvarCustomerID = new TableSchema.TableColumn(schema);
				colvarCustomerID.ColumnName = "CustomerID";
				colvarCustomerID.DataType = DbType.Int32;
				colvarCustomerID.MaxLength = 0;
				colvarCustomerID.AutoIncrement = false;
				colvarCustomerID.IsNullable = false;
				colvarCustomerID.IsPrimaryKey = false;
				colvarCustomerID.IsForeignKey = true;
				colvarCustomerID.IsReadOnly = false;
				colvarCustomerID.DefaultSetting = @"";
				
					colvarCustomerID.ForeignKeyTableName = "tblCustomer";
				schema.Columns.Add(colvarCustomerID);
				
				TableSchema.TableColumn colvarShipToParty = new TableSchema.TableColumn(schema);
				colvarShipToParty.ColumnName = "ShipToParty";
				colvarShipToParty.DataType = DbType.Int32;
				colvarShipToParty.MaxLength = 0;
				colvarShipToParty.AutoIncrement = false;
				colvarShipToParty.IsNullable = true;
				colvarShipToParty.IsPrimaryKey = false;
				colvarShipToParty.IsForeignKey = false;
				colvarShipToParty.IsReadOnly = false;
				colvarShipToParty.DefaultSetting = @"";
				colvarShipToParty.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShipToParty);
				
				TableSchema.TableColumn colvarBrandOwner = new TableSchema.TableColumn(schema);
				colvarBrandOwner.ColumnName = "BrandOwner";
				colvarBrandOwner.DataType = DbType.Int32;
				colvarBrandOwner.MaxLength = 0;
				colvarBrandOwner.AutoIncrement = false;
				colvarBrandOwner.IsNullable = true;
				colvarBrandOwner.IsPrimaryKey = false;
				colvarBrandOwner.IsForeignKey = false;
				colvarBrandOwner.IsReadOnly = false;
				colvarBrandOwner.DefaultSetting = @"";
				colvarBrandOwner.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBrandOwner);
				
				TableSchema.TableColumn colvarContactPersonID = new TableSchema.TableColumn(schema);
				colvarContactPersonID.ColumnName = "ContactPersonID";
				colvarContactPersonID.DataType = DbType.Int32;
				colvarContactPersonID.MaxLength = 0;
				colvarContactPersonID.AutoIncrement = false;
				colvarContactPersonID.IsNullable = false;
				colvarContactPersonID.IsPrimaryKey = false;
				colvarContactPersonID.IsForeignKey = true;
				colvarContactPersonID.IsReadOnly = false;
				colvarContactPersonID.DefaultSetting = @"";
				
					colvarContactPersonID.ForeignKeyTableName = "tblContact";
				schema.Columns.Add(colvarContactPersonID);
				
				TableSchema.TableColumn colvarSalesRepID = new TableSchema.TableColumn(schema);
				colvarSalesRepID.ColumnName = "SalesRepID";
				colvarSalesRepID.DataType = DbType.Int32;
				colvarSalesRepID.MaxLength = 0;
				colvarSalesRepID.AutoIncrement = false;
				colvarSalesRepID.IsNullable = true;
				colvarSalesRepID.IsPrimaryKey = false;
				colvarSalesRepID.IsForeignKey = true;
				colvarSalesRepID.IsReadOnly = false;
				colvarSalesRepID.DefaultSetting = @"";
				
					colvarSalesRepID.ForeignKeyTableName = "tblStaff";
				schema.Columns.Add(colvarSalesRepID);
				
				TableSchema.TableColumn colvarCoordinatorID = new TableSchema.TableColumn(schema);
				colvarCoordinatorID.ColumnName = "CoordinatorID";
				colvarCoordinatorID.DataType = DbType.Int32;
				colvarCoordinatorID.MaxLength = 0;
				colvarCoordinatorID.AutoIncrement = false;
				colvarCoordinatorID.IsNullable = true;
				colvarCoordinatorID.IsPrimaryKey = false;
				colvarCoordinatorID.IsForeignKey = true;
				colvarCoordinatorID.IsReadOnly = false;
				colvarCoordinatorID.DefaultSetting = @"";
				
					colvarCoordinatorID.ForeignKeyTableName = "tblStaff";
				schema.Columns.Add(colvarCoordinatorID);
				
				TableSchema.TableColumn colvarCurrencyID = new TableSchema.TableColumn(schema);
				colvarCurrencyID.ColumnName = "CurrencyID";
				colvarCurrencyID.DataType = DbType.Int16;
				colvarCurrencyID.MaxLength = 0;
				colvarCurrencyID.AutoIncrement = false;
				colvarCurrencyID.IsNullable = true;
				colvarCurrencyID.IsPrimaryKey = false;
				colvarCurrencyID.IsForeignKey = false;
				colvarCurrencyID.IsReadOnly = false;
				colvarCurrencyID.DefaultSetting = @"";
				colvarCurrencyID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrencyID);
				
				TableSchema.TableColumn colvarProductTypeID = new TableSchema.TableColumn(schema);
				colvarProductTypeID.ColumnName = "ProductTypeID";
				colvarProductTypeID.DataType = DbType.Int32;
				colvarProductTypeID.MaxLength = 0;
				colvarProductTypeID.AutoIncrement = false;
				colvarProductTypeID.IsNullable = true;
				colvarProductTypeID.IsPrimaryKey = false;
				colvarProductTypeID.IsForeignKey = false;
				colvarProductTypeID.IsReadOnly = false;
				colvarProductTypeID.DefaultSetting = @"";
				colvarProductTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductTypeID);
				
				TableSchema.TableColumn colvarStatus = new TableSchema.TableColumn(schema);
				colvarStatus.ColumnName = "Status";
				colvarStatus.DataType = DbType.AnsiString;
				colvarStatus.MaxLength = 20;
				colvarStatus.AutoIncrement = false;
				colvarStatus.IsNullable = false;
				colvarStatus.IsPrimaryKey = false;
				colvarStatus.IsForeignKey = false;
				colvarStatus.IsReadOnly = false;
				colvarStatus.DefaultSetting = @"";
				colvarStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatus);
				
				TableSchema.TableColumn colvarRemark = new TableSchema.TableColumn(schema);
				colvarRemark.ColumnName = "Remark";
				colvarRemark.DataType = DbType.String;
				colvarRemark.MaxLength = -1;
				colvarRemark.AutoIncrement = false;
				colvarRemark.IsNullable = true;
				colvarRemark.IsPrimaryKey = false;
				colvarRemark.IsForeignKey = false;
				colvarRemark.IsReadOnly = false;
				colvarRemark.DefaultSetting = @"";
				colvarRemark.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRemark);
				
				TableSchema.TableColumn colvarRevisionFromJob = new TableSchema.TableColumn(schema);
				colvarRevisionFromJob.ColumnName = "RevisionFromJob";
				colvarRevisionFromJob.DataType = DbType.Int32;
				colvarRevisionFromJob.MaxLength = 0;
				colvarRevisionFromJob.AutoIncrement = false;
				colvarRevisionFromJob.IsNullable = true;
				colvarRevisionFromJob.IsPrimaryKey = false;
				colvarRevisionFromJob.IsForeignKey = false;
				colvarRevisionFromJob.IsReadOnly = false;
				colvarRevisionFromJob.DefaultSetting = @"";
				colvarRevisionFromJob.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRevisionFromJob);
				
				TableSchema.TableColumn colvarRevisionRootNumber = new TableSchema.TableColumn(schema);
				colvarRevisionRootNumber.ColumnName = "RevisionRootNumber";
				colvarRevisionRootNumber.DataType = DbType.Int32;
				colvarRevisionRootNumber.MaxLength = 0;
				colvarRevisionRootNumber.AutoIncrement = false;
				colvarRevisionRootNumber.IsNullable = true;
				colvarRevisionRootNumber.IsPrimaryKey = false;
				colvarRevisionRootNumber.IsForeignKey = false;
				colvarRevisionRootNumber.IsReadOnly = false;
				colvarRevisionRootNumber.DefaultSetting = @"";
				colvarRevisionRootNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRevisionRootNumber);
				
				TableSchema.TableColumn colvarInternalExternal = new TableSchema.TableColumn(schema);
				colvarInternalExternal.ColumnName = "InternalExternal";
				colvarInternalExternal.DataType = DbType.AnsiString;
				colvarInternalExternal.MaxLength = 20;
				colvarInternalExternal.AutoIncrement = false;
				colvarInternalExternal.IsNullable = true;
				colvarInternalExternal.IsPrimaryKey = false;
				colvarInternalExternal.IsForeignKey = false;
				colvarInternalExternal.IsReadOnly = false;
				colvarInternalExternal.DefaultSetting = @"";
				colvarInternalExternal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInternalExternal);
				
				TableSchema.TableColumn colvarRevisionDetail = new TableSchema.TableColumn(schema);
				colvarRevisionDetail.ColumnName = "RevisionDetail";
				colvarRevisionDetail.DataType = DbType.String;
				colvarRevisionDetail.MaxLength = 500;
				colvarRevisionDetail.AutoIncrement = false;
				colvarRevisionDetail.IsNullable = true;
				colvarRevisionDetail.IsPrimaryKey = false;
				colvarRevisionDetail.IsForeignKey = false;
				colvarRevisionDetail.IsReadOnly = false;
				colvarRevisionDetail.DefaultSetting = @"";
				colvarRevisionDetail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRevisionDetail);
				
				TableSchema.TableColumn colvarPaymentTerms = new TableSchema.TableColumn(schema);
				colvarPaymentTerms.ColumnName = "PaymentTerms";
				colvarPaymentTerms.DataType = DbType.String;
				colvarPaymentTerms.MaxLength = 50;
				colvarPaymentTerms.AutoIncrement = false;
				colvarPaymentTerms.IsNullable = true;
				colvarPaymentTerms.IsPrimaryKey = false;
				colvarPaymentTerms.IsForeignKey = false;
				colvarPaymentTerms.IsReadOnly = false;
				colvarPaymentTerms.DefaultSetting = @"";
				colvarPaymentTerms.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentTerms);
				
				TableSchema.TableColumn colvarTypeOfOrder = new TableSchema.TableColumn(schema);
				colvarTypeOfOrder.ColumnName = "TypeOfOrder";
				colvarTypeOfOrder.DataType = DbType.AnsiString;
				colvarTypeOfOrder.MaxLength = 50;
				colvarTypeOfOrder.AutoIncrement = false;
				colvarTypeOfOrder.IsNullable = true;
				colvarTypeOfOrder.IsPrimaryKey = false;
				colvarTypeOfOrder.IsForeignKey = false;
				colvarTypeOfOrder.IsReadOnly = false;
				colvarTypeOfOrder.DefaultSetting = @"";
				colvarTypeOfOrder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTypeOfOrder);
				
				TableSchema.TableColumn colvarIsServiceJob = new TableSchema.TableColumn(schema);
				colvarIsServiceJob.ColumnName = "IsServiceJob";
				colvarIsServiceJob.DataType = DbType.Byte;
				colvarIsServiceJob.MaxLength = 0;
				colvarIsServiceJob.AutoIncrement = false;
				colvarIsServiceJob.IsNullable = false;
				colvarIsServiceJob.IsPrimaryKey = false;
				colvarIsServiceJob.IsForeignKey = false;
				colvarIsServiceJob.IsReadOnly = false;
				
						colvarIsServiceJob.DefaultSetting = @"((0))";
				colvarIsServiceJob.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsServiceJob);
				
				TableSchema.TableColumn colvarIsOutsource = new TableSchema.TableColumn(schema);
				colvarIsOutsource.ColumnName = "IsOutsource";
				colvarIsOutsource.DataType = DbType.Byte;
				colvarIsOutsource.MaxLength = 0;
				colvarIsOutsource.AutoIncrement = false;
				colvarIsOutsource.IsNullable = false;
				colvarIsOutsource.IsPrimaryKey = false;
				colvarIsOutsource.IsForeignKey = false;
				colvarIsOutsource.IsReadOnly = false;
				
						colvarIsOutsource.DefaultSetting = @"((0))";
				colvarIsOutsource.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsOutsource);
				
				TableSchema.TableColumn colvarSupplierID = new TableSchema.TableColumn(schema);
				colvarSupplierID.ColumnName = "SupplierID";
				colvarSupplierID.DataType = DbType.Int32;
				colvarSupplierID.MaxLength = 0;
				colvarSupplierID.AutoIncrement = false;
				colvarSupplierID.IsNullable = false;
				colvarSupplierID.IsPrimaryKey = false;
				colvarSupplierID.IsForeignKey = false;
				colvarSupplierID.IsReadOnly = false;
				
						colvarSupplierID.DefaultSetting = @"((0))";
				colvarSupplierID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSupplierID);
				
				TableSchema.TableColumn colvarIsClosed = new TableSchema.TableColumn(schema);
				colvarIsClosed.ColumnName = "IsClosed";
				colvarIsClosed.DataType = DbType.Byte;
				colvarIsClosed.MaxLength = 0;
				colvarIsClosed.AutoIncrement = false;
				colvarIsClosed.IsNullable = false;
				colvarIsClosed.IsPrimaryKey = false;
				colvarIsClosed.IsForeignKey = false;
				colvarIsClosed.IsReadOnly = false;
				colvarIsClosed.DefaultSetting = @"";
				colvarIsClosed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsClosed);
				
				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 100;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 100;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = true;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				TableSchema.TableColumn colvarItemCode = new TableSchema.TableColumn(schema);
				colvarItemCode.ColumnName = "ItemCode";
				colvarItemCode.DataType = DbType.String;
				colvarItemCode.MaxLength = 100;
				colvarItemCode.AutoIncrement = false;
				colvarItemCode.IsNullable = true;
				colvarItemCode.IsPrimaryKey = false;
				colvarItemCode.IsForeignKey = false;
				colvarItemCode.IsReadOnly = false;
				colvarItemCode.DefaultSetting = @"";
				colvarItemCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemCode);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("tblJob",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("JobID")]
		[Bindable(true)]
		public int JobID 
		{
			get { return GetColumnValue<int>(Columns.JobID); }
			set { SetColumnValue(Columns.JobID, value); }
		}
		  
		[XmlAttribute("JobNumber")]
		[Bindable(true)]
		public string JobNumber 
		{
			get { return GetColumnValue<string>(Columns.JobNumber); }
			set { SetColumnValue(Columns.JobNumber, value); }
		}
		  
		[XmlAttribute("RevNumber")]
		[Bindable(true)]
		public int RevNumber 
		{
			get { return GetColumnValue<int>(Columns.RevNumber); }
			set { SetColumnValue(Columns.RevNumber, value); }
		}
		  
		[XmlAttribute("JobBarcode")]
		[Bindable(true)]
		public string JobBarcode 
		{
			get { return GetColumnValue<string>(Columns.JobBarcode); }
			set { SetColumnValue(Columns.JobBarcode, value); }
		}
		  
		[XmlAttribute("JobBarcodeImage")]
		[Bindable(true)]
		public string JobBarcodeImage 
		{
			get { return GetColumnValue<string>(Columns.JobBarcodeImage); }
			set { SetColumnValue(Columns.JobBarcodeImage, value); }
		}
		  
		[XmlAttribute("JobName")]
		[Bindable(true)]
		public string JobName 
		{
			get { return GetColumnValue<string>(Columns.JobName); }
			set { SetColumnValue(Columns.JobName, value); }
		}
		  
		[XmlAttribute("Design")]
		[Bindable(true)]
		public string Design 
		{
			get { return GetColumnValue<string>(Columns.Design); }
			set { SetColumnValue(Columns.Design, value); }
		}
		  
		[XmlAttribute("DrawingNumber")]
		[Bindable(true)]
		public string DrawingNumber 
		{
			get { return GetColumnValue<string>(Columns.DrawingNumber); }
			set { SetColumnValue(Columns.DrawingNumber, value); }
		}
		  
		[XmlAttribute("RootJobID")]
		[Bindable(true)]
		public int? RootJobID 
		{
			get { return GetColumnValue<int?>(Columns.RootJobID); }
			set { SetColumnValue(Columns.RootJobID, value); }
		}
		  
		[XmlAttribute("RootJobNo")]
		[Bindable(true)]
		public string RootJobNo 
		{
			get { return GetColumnValue<string>(Columns.RootJobNo); }
			set { SetColumnValue(Columns.RootJobNo, value); }
		}
		  
		[XmlAttribute("RootJobRevNumber")]
		[Bindable(true)]
		public string RootJobRevNumber 
		{
			get { return GetColumnValue<string>(Columns.RootJobRevNumber); }
			set { SetColumnValue(Columns.RootJobRevNumber, value); }
		}
		  
		[XmlAttribute("CommonJobNumber")]
		[Bindable(true)]
		public string CommonJobNumber 
		{
			get { return GetColumnValue<string>(Columns.CommonJobNumber); }
			set { SetColumnValue(Columns.CommonJobNumber, value); }
		}
		  
		[XmlAttribute("CustomerPO1")]
		[Bindable(true)]
		public string CustomerPO1 
		{
			get { return GetColumnValue<string>(Columns.CustomerPO1); }
			set { SetColumnValue(Columns.CustomerPO1, value); }
		}
		  
		[XmlAttribute("CustomerPO2")]
		[Bindable(true)]
		public string CustomerPO2 
		{
			get { return GetColumnValue<string>(Columns.CustomerPO2); }
			set { SetColumnValue(Columns.CustomerPO2, value); }
		}
		  
		[XmlAttribute("CustomerID")]
		[Bindable(true)]
		public int CustomerID 
		{
			get { return GetColumnValue<int>(Columns.CustomerID); }
			set { SetColumnValue(Columns.CustomerID, value); }
		}
		  
		[XmlAttribute("ShipToParty")]
		[Bindable(true)]
		public int? ShipToParty 
		{
			get { return GetColumnValue<int?>(Columns.ShipToParty); }
			set { SetColumnValue(Columns.ShipToParty, value); }
		}
		  
		[XmlAttribute("BrandOwner")]
		[Bindable(true)]
		public int? BrandOwner 
		{
			get { return GetColumnValue<int?>(Columns.BrandOwner); }
			set { SetColumnValue(Columns.BrandOwner, value); }
		}
		  
		[XmlAttribute("ContactPersonID")]
		[Bindable(true)]
		public int ContactPersonID 
		{
			get { return GetColumnValue<int>(Columns.ContactPersonID); }
			set { SetColumnValue(Columns.ContactPersonID, value); }
		}
		  
		[XmlAttribute("SalesRepID")]
		[Bindable(true)]
		public int? SalesRepID 
		{
			get { return GetColumnValue<int?>(Columns.SalesRepID); }
			set { SetColumnValue(Columns.SalesRepID, value); }
		}
		  
		[XmlAttribute("CoordinatorID")]
		[Bindable(true)]
		public int? CoordinatorID 
		{
			get { return GetColumnValue<int?>(Columns.CoordinatorID); }
			set { SetColumnValue(Columns.CoordinatorID, value); }
		}
		  
		[XmlAttribute("CurrencyID")]
		[Bindable(true)]
		public short? CurrencyID 
		{
			get { return GetColumnValue<short?>(Columns.CurrencyID); }
			set { SetColumnValue(Columns.CurrencyID, value); }
		}
		  
		[XmlAttribute("ProductTypeID")]
		[Bindable(true)]
		public int? ProductTypeID 
		{
			get { return GetColumnValue<int?>(Columns.ProductTypeID); }
			set { SetColumnValue(Columns.ProductTypeID, value); }
		}
		  
		[XmlAttribute("Status")]
		[Bindable(true)]
		public string Status 
		{
			get { return GetColumnValue<string>(Columns.Status); }
			set { SetColumnValue(Columns.Status, value); }
		}
		  
		[XmlAttribute("Remark")]
		[Bindable(true)]
		public string Remark 
		{
			get { return GetColumnValue<string>(Columns.Remark); }
			set { SetColumnValue(Columns.Remark, value); }
		}
		  
		[XmlAttribute("RevisionFromJob")]
		[Bindable(true)]
		public int? RevisionFromJob 
		{
			get { return GetColumnValue<int?>(Columns.RevisionFromJob); }
			set { SetColumnValue(Columns.RevisionFromJob, value); }
		}
		  
		[XmlAttribute("RevisionRootNumber")]
		[Bindable(true)]
		public int? RevisionRootNumber 
		{
			get { return GetColumnValue<int?>(Columns.RevisionRootNumber); }
			set { SetColumnValue(Columns.RevisionRootNumber, value); }
		}
		  
		[XmlAttribute("InternalExternal")]
		[Bindable(true)]
		public string InternalExternal 
		{
			get { return GetColumnValue<string>(Columns.InternalExternal); }
			set { SetColumnValue(Columns.InternalExternal, value); }
		}
		  
		[XmlAttribute("RevisionDetail")]
		[Bindable(true)]
		public string RevisionDetail 
		{
			get { return GetColumnValue<string>(Columns.RevisionDetail); }
			set { SetColumnValue(Columns.RevisionDetail, value); }
		}
		  
		[XmlAttribute("PaymentTerms")]
		[Bindable(true)]
		public string PaymentTerms 
		{
			get { return GetColumnValue<string>(Columns.PaymentTerms); }
			set { SetColumnValue(Columns.PaymentTerms, value); }
		}
		  
		[XmlAttribute("TypeOfOrder")]
		[Bindable(true)]
		public string TypeOfOrder 
		{
			get { return GetColumnValue<string>(Columns.TypeOfOrder); }
			set { SetColumnValue(Columns.TypeOfOrder, value); }
		}
		  
		[XmlAttribute("IsServiceJob")]
		[Bindable(true)]
		public byte IsServiceJob 
		{
			get { return GetColumnValue<byte>(Columns.IsServiceJob); }
			set { SetColumnValue(Columns.IsServiceJob, value); }
		}
		  
		[XmlAttribute("IsOutsource")]
		[Bindable(true)]
		public byte IsOutsource 
		{
			get { return GetColumnValue<byte>(Columns.IsOutsource); }
			set { SetColumnValue(Columns.IsOutsource, value); }
		}
		  
		[XmlAttribute("SupplierID")]
		[Bindable(true)]
		public int SupplierID 
		{
			get { return GetColumnValue<int>(Columns.SupplierID); }
			set { SetColumnValue(Columns.SupplierID, value); }
		}
		  
		[XmlAttribute("IsClosed")]
		[Bindable(true)]
		public byte IsClosed 
		{
			get { return GetColumnValue<byte>(Columns.IsClosed); }
			set { SetColumnValue(Columns.IsClosed, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public string CreatedBy 
		{
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedBy")]
		[Bindable(true)]
		public string ModifiedBy 
		{
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("ItemCode")]
		[Bindable(true)]
		public string ItemCode 
		{
			get { return GetColumnValue<string>(Columns.ItemCode); }
			set { SetColumnValue(Columns.ItemCode, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		private SweetSoft.APEM.DataAccess.TblCylinderCollection colTblCylinderRecords;
		public SweetSoft.APEM.DataAccess.TblCylinderCollection TblCylinderRecords()
		{
			if(colTblCylinderRecords == null)
			{
				colTblCylinderRecords = new SweetSoft.APEM.DataAccess.TblCylinderCollection().Where(TblCylinder.Columns.JobID, JobID).Load();
				colTblCylinderRecords.ListChanged += new ListChangedEventHandler(colTblCylinderRecords_ListChanged);
			}
			return colTblCylinderRecords;
		}
				
		void colTblCylinderRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colTblCylinderRecords[e.NewIndex].JobID = JobID;
            }
		}
		private SweetSoft.APEM.DataAccess.TblDeliveryOrderCollection colTblDeliveryOrderRecords;
		public SweetSoft.APEM.DataAccess.TblDeliveryOrderCollection TblDeliveryOrderRecords()
		{
			if(colTblDeliveryOrderRecords == null)
			{
				colTblDeliveryOrderRecords = new SweetSoft.APEM.DataAccess.TblDeliveryOrderCollection().Where(TblDeliveryOrder.Columns.JobID, JobID).Load();
				colTblDeliveryOrderRecords.ListChanged += new ListChangedEventHandler(colTblDeliveryOrderRecords_ListChanged);
			}
			return colTblDeliveryOrderRecords;
		}
				
		void colTblDeliveryOrderRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colTblDeliveryOrderRecords[e.NewIndex].JobID = JobID;
            }
		}
		private SweetSoft.APEM.DataAccess.TblEngravingCollection colTblEngravingRecords;
		public SweetSoft.APEM.DataAccess.TblEngravingCollection TblEngravingRecords()
		{
			if(colTblEngravingRecords == null)
			{
				colTblEngravingRecords = new SweetSoft.APEM.DataAccess.TblEngravingCollection().Where(TblEngraving.Columns.JobID, JobID).Load();
				colTblEngravingRecords.ListChanged += new ListChangedEventHandler(colTblEngravingRecords_ListChanged);
			}
			return colTblEngravingRecords;
		}
				
		void colTblEngravingRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colTblEngravingRecords[e.NewIndex].JobID = JobID;
            }
		}
		private SweetSoft.APEM.DataAccess.TblInvoiceDetailCollection colTblInvoiceDetailRecords;
		public SweetSoft.APEM.DataAccess.TblInvoiceDetailCollection TblInvoiceDetailRecords()
		{
			if(colTblInvoiceDetailRecords == null)
			{
				colTblInvoiceDetailRecords = new SweetSoft.APEM.DataAccess.TblInvoiceDetailCollection().Where(TblInvoiceDetail.Columns.JobID, JobID).Load();
				colTblInvoiceDetailRecords.ListChanged += new ListChangedEventHandler(colTblInvoiceDetailRecords_ListChanged);
			}
			return colTblInvoiceDetailRecords;
		}
				
		void colTblInvoiceDetailRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colTblInvoiceDetailRecords[e.NewIndex].JobID = JobID;
            }
		}
		private SweetSoft.APEM.DataAccess.TblJobSheetCollection colTblJobSheetRecords;
		public SweetSoft.APEM.DataAccess.TblJobSheetCollection TblJobSheetRecords()
		{
			if(colTblJobSheetRecords == null)
			{
				colTblJobSheetRecords = new SweetSoft.APEM.DataAccess.TblJobSheetCollection().Where(TblJobSheet.Columns.JobID, JobID).Load();
				colTblJobSheetRecords.ListChanged += new ListChangedEventHandler(colTblJobSheetRecords_ListChanged);
			}
			return colTblJobSheetRecords;
		}
				
		void colTblJobSheetRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colTblJobSheetRecords[e.NewIndex].JobID = JobID;
            }
		}
		private SweetSoft.APEM.DataAccess.TblOrderConfirmationCollection colTblOrderConfirmationRecords;
		public SweetSoft.APEM.DataAccess.TblOrderConfirmationCollection TblOrderConfirmationRecords()
		{
			if(colTblOrderConfirmationRecords == null)
			{
				colTblOrderConfirmationRecords = new SweetSoft.APEM.DataAccess.TblOrderConfirmationCollection().Where(TblOrderConfirmation.Columns.JobID, JobID).Load();
				colTblOrderConfirmationRecords.ListChanged += new ListChangedEventHandler(colTblOrderConfirmationRecords_ListChanged);
			}
			return colTblOrderConfirmationRecords;
		}
				
		void colTblOrderConfirmationRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colTblOrderConfirmationRecords[e.NewIndex].JobID = JobID;
            }
		}
		private SweetSoft.APEM.DataAccess.TblProgressCollection colTblProgressRecords;
		public SweetSoft.APEM.DataAccess.TblProgressCollection TblProgressRecords()
		{
			if(colTblProgressRecords == null)
			{
				colTblProgressRecords = new SweetSoft.APEM.DataAccess.TblProgressCollection().Where(TblProgress.Columns.JobID, JobID).Load();
				colTblProgressRecords.ListChanged += new ListChangedEventHandler(colTblProgressRecords_ListChanged);
			}
			return colTblProgressRecords;
		}
				
		void colTblProgressRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colTblProgressRecords[e.NewIndex].JobID = JobID;
            }
		}
		private SweetSoft.APEM.DataAccess.TblPurchaseOrderCollection colTblPurchaseOrderRecords;
		public SweetSoft.APEM.DataAccess.TblPurchaseOrderCollection TblPurchaseOrderRecords()
		{
			if(colTblPurchaseOrderRecords == null)
			{
				colTblPurchaseOrderRecords = new SweetSoft.APEM.DataAccess.TblPurchaseOrderCollection().Where(TblPurchaseOrder.Columns.JobID, JobID).Load();
				colTblPurchaseOrderRecords.ListChanged += new ListChangedEventHandler(colTblPurchaseOrderRecords_ListChanged);
			}
			return colTblPurchaseOrderRecords;
		}
				
		void colTblPurchaseOrderRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colTblPurchaseOrderRecords[e.NewIndex].JobID = JobID;
            }
		}
		private SweetSoft.APEM.DataAccess.TblServiceJobDetailCollection colTblServiceJobDetailRecords;
		public SweetSoft.APEM.DataAccess.TblServiceJobDetailCollection TblServiceJobDetailRecords()
		{
			if(colTblServiceJobDetailRecords == null)
			{
				colTblServiceJobDetailRecords = new SweetSoft.APEM.DataAccess.TblServiceJobDetailCollection().Where(TblServiceJobDetail.Columns.JobID, JobID).Load();
				colTblServiceJobDetailRecords.ListChanged += new ListChangedEventHandler(colTblServiceJobDetailRecords_ListChanged);
			}
			return colTblServiceJobDetailRecords;
		}
				
		void colTblServiceJobDetailRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colTblServiceJobDetailRecords[e.NewIndex].JobID = JobID;
            }
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblContact ActiveRecord object related to this TblJob
		/// 
		/// </summary>
		public SweetSoft.APEM.DataAccess.TblContact TblContact
		{
			get { return SweetSoft.APEM.DataAccess.TblContact.FetchByID(this.ContactPersonID); }
			set { SetColumnValue("ContactPersonID", value.ContactID); }
		}
		
		
		/// <summary>
		/// Returns a TblCustomer ActiveRecord object related to this TblJob
		/// 
		/// </summary>
		public SweetSoft.APEM.DataAccess.TblCustomer TblCustomer
		{
			get { return SweetSoft.APEM.DataAccess.TblCustomer.FetchByID(this.CustomerID); }
			set { SetColumnValue("CustomerID", value.CustomerID); }
		}
		
		
		/// <summary>
		/// Returns a TblStaff ActiveRecord object related to this TblJob
		/// 
		/// </summary>
		public SweetSoft.APEM.DataAccess.TblStaff TblStaff
		{
			get { return SweetSoft.APEM.DataAccess.TblStaff.FetchByID(this.SalesRepID); }
			set { SetColumnValue("SalesRepID", value.StaffID); }
		}
		
		
		/// <summary>
		/// Returns a TblStaff ActiveRecord object related to this TblJob
		/// 
		/// </summary>
		public SweetSoft.APEM.DataAccess.TblStaff TblStaffToCoordinatorID
		{
			get { return SweetSoft.APEM.DataAccess.TblStaff.FetchByID(this.CoordinatorID); }
			set { SetColumnValue("CoordinatorID", value.StaffID); }
		}
		
		
		#endregion
		
		
		
		#region Many To Many Helpers
		
		 
		public SweetSoft.APEM.DataAccess.TblInvoiceCollection GetTblInvoiceCollection() { return TblJob.GetTblInvoiceCollection(this.JobID); }
		public static SweetSoft.APEM.DataAccess.TblInvoiceCollection GetTblInvoiceCollection(int varJobID)
		{
		    SubSonic.QueryCommand cmd = new SubSonic.QueryCommand("SELECT * FROM [dbo].[tblInvoice] INNER JOIN [tblInvoiceDetail] ON [tblInvoice].[InvoiceID] = [tblInvoiceDetail].[InvoiceID] WHERE [tblInvoiceDetail].[JobID] = @JobID", TblJob.Schema.Provider.Name);
			cmd.AddParameter("@JobID", varJobID, DbType.Int32);
			IDataReader rdr = SubSonic.DataService.GetReader(cmd);
			TblInvoiceCollection coll = new TblInvoiceCollection();
			coll.LoadAndCloseReader(rdr);
			return coll;
		}
		
		public static void SaveTblInvoiceMap(int varJobID, TblInvoiceCollection items)
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			QueryCommand cmdDel = new QueryCommand("DELETE FROM [tblInvoiceDetail] WHERE [tblInvoiceDetail].[JobID] = @JobID", TblJob.Schema.Provider.Name);
			cmdDel.AddParameter("@JobID", varJobID, DbType.Int32);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (TblInvoice item in items)
			{
				TblInvoiceDetail varTblInvoiceDetail = new TblInvoiceDetail();
				varTblInvoiceDetail.SetColumnValue("JobID", varJobID);
				varTblInvoiceDetail.SetColumnValue("InvoiceID", item.GetPrimaryKeyValue());
				varTblInvoiceDetail.Save();
			}
		}
		public static void SaveTblInvoiceMap(int varJobID, System.Web.UI.WebControls.ListItemCollection itemList) 
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			 QueryCommand cmdDel = new QueryCommand("DELETE FROM [tblInvoiceDetail] WHERE [tblInvoiceDetail].[JobID] = @JobID", TblJob.Schema.Provider.Name);
			cmdDel.AddParameter("@JobID", varJobID, DbType.Int32);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (System.Web.UI.WebControls.ListItem l in itemList) 
			{
				if (l.Selected) 
				{
					TblInvoiceDetail varTblInvoiceDetail = new TblInvoiceDetail();
					varTblInvoiceDetail.SetColumnValue("JobID", varJobID);
					varTblInvoiceDetail.SetColumnValue("InvoiceID", l.Value);
					varTblInvoiceDetail.Save();
				}
			}
		}
		public static void SaveTblInvoiceMap(int varJobID , int[] itemList) 
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			 QueryCommand cmdDel = new QueryCommand("DELETE FROM [tblInvoiceDetail] WHERE [tblInvoiceDetail].[JobID] = @JobID", TblJob.Schema.Provider.Name);
			cmdDel.AddParameter("@JobID", varJobID, DbType.Int32);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (int item in itemList) 
			{
				TblInvoiceDetail varTblInvoiceDetail = new TblInvoiceDetail();
				varTblInvoiceDetail.SetColumnValue("JobID", varJobID);
				varTblInvoiceDetail.SetColumnValue("InvoiceID", item);
				varTblInvoiceDetail.Save();
			}
		}
		
		public static void DeleteTblInvoiceMap(int varJobID) 
		{
			QueryCommand cmdDel = new QueryCommand("DELETE FROM [tblInvoiceDetail] WHERE [tblInvoiceDetail].[JobID] = @JobID", TblJob.Schema.Provider.Name);
			cmdDel.AddParameter("@JobID", varJobID, DbType.Int32);
			DataService.ExecuteQuery(cmdDel);
		}
		
		#endregion
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varJobNumber,int varRevNumber,string varJobBarcode,string varJobBarcodeImage,string varJobName,string varDesign,string varDrawingNumber,int? varRootJobID,string varRootJobNo,string varRootJobRevNumber,string varCommonJobNumber,string varCustomerPO1,string varCustomerPO2,int varCustomerID,int? varShipToParty,int? varBrandOwner,int varContactPersonID,int? varSalesRepID,int? varCoordinatorID,short? varCurrencyID,int? varProductTypeID,string varStatus,string varRemark,int? varRevisionFromJob,int? varRevisionRootNumber,string varInternalExternal,string varRevisionDetail,string varPaymentTerms,string varTypeOfOrder,byte varIsServiceJob,byte varIsOutsource,int varSupplierID,byte varIsClosed,string varCreatedBy,DateTime? varCreatedOn,string varModifiedBy,DateTime? varModifiedOn,string varItemCode)
		{
			TblJob item = new TblJob();
			
			item.JobNumber = varJobNumber;
			
			item.RevNumber = varRevNumber;
			
			item.JobBarcode = varJobBarcode;
			
			item.JobBarcodeImage = varJobBarcodeImage;
			
			item.JobName = varJobName;
			
			item.Design = varDesign;
			
			item.DrawingNumber = varDrawingNumber;
			
			item.RootJobID = varRootJobID;
			
			item.RootJobNo = varRootJobNo;
			
			item.RootJobRevNumber = varRootJobRevNumber;
			
			item.CommonJobNumber = varCommonJobNumber;
			
			item.CustomerPO1 = varCustomerPO1;
			
			item.CustomerPO2 = varCustomerPO2;
			
			item.CustomerID = varCustomerID;
			
			item.ShipToParty = varShipToParty;
			
			item.BrandOwner = varBrandOwner;
			
			item.ContactPersonID = varContactPersonID;
			
			item.SalesRepID = varSalesRepID;
			
			item.CoordinatorID = varCoordinatorID;
			
			item.CurrencyID = varCurrencyID;
			
			item.ProductTypeID = varProductTypeID;
			
			item.Status = varStatus;
			
			item.Remark = varRemark;
			
			item.RevisionFromJob = varRevisionFromJob;
			
			item.RevisionRootNumber = varRevisionRootNumber;
			
			item.InternalExternal = varInternalExternal;
			
			item.RevisionDetail = varRevisionDetail;
			
			item.PaymentTerms = varPaymentTerms;
			
			item.TypeOfOrder = varTypeOfOrder;
			
			item.IsServiceJob = varIsServiceJob;
			
			item.IsOutsource = varIsOutsource;
			
			item.SupplierID = varSupplierID;
			
			item.IsClosed = varIsClosed;
			
			item.CreatedBy = varCreatedBy;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedBy = varModifiedBy;
			
			item.ModifiedOn = varModifiedOn;
			
			item.ItemCode = varItemCode;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varJobID,string varJobNumber,int varRevNumber,string varJobBarcode,string varJobBarcodeImage,string varJobName,string varDesign,string varDrawingNumber,int? varRootJobID,string varRootJobNo,string varRootJobRevNumber,string varCommonJobNumber,string varCustomerPO1,string varCustomerPO2,int varCustomerID,int? varShipToParty,int? varBrandOwner,int varContactPersonID,int? varSalesRepID,int? varCoordinatorID,short? varCurrencyID,int? varProductTypeID,string varStatus,string varRemark,int? varRevisionFromJob,int? varRevisionRootNumber,string varInternalExternal,string varRevisionDetail,string varPaymentTerms,string varTypeOfOrder,byte varIsServiceJob,byte varIsOutsource,int varSupplierID,byte varIsClosed,string varCreatedBy,DateTime? varCreatedOn,string varModifiedBy,DateTime? varModifiedOn,string varItemCode)
		{
			TblJob item = new TblJob();
			
				item.JobID = varJobID;
			
				item.JobNumber = varJobNumber;
			
				item.RevNumber = varRevNumber;
			
				item.JobBarcode = varJobBarcode;
			
				item.JobBarcodeImage = varJobBarcodeImage;
			
				item.JobName = varJobName;
			
				item.Design = varDesign;
			
				item.DrawingNumber = varDrawingNumber;
			
				item.RootJobID = varRootJobID;
			
				item.RootJobNo = varRootJobNo;
			
				item.RootJobRevNumber = varRootJobRevNumber;
			
				item.CommonJobNumber = varCommonJobNumber;
			
				item.CustomerPO1 = varCustomerPO1;
			
				item.CustomerPO2 = varCustomerPO2;
			
				item.CustomerID = varCustomerID;
			
				item.ShipToParty = varShipToParty;
			
				item.BrandOwner = varBrandOwner;
			
				item.ContactPersonID = varContactPersonID;
			
				item.SalesRepID = varSalesRepID;
			
				item.CoordinatorID = varCoordinatorID;
			
				item.CurrencyID = varCurrencyID;
			
				item.ProductTypeID = varProductTypeID;
			
				item.Status = varStatus;
			
				item.Remark = varRemark;
			
				item.RevisionFromJob = varRevisionFromJob;
			
				item.RevisionRootNumber = varRevisionRootNumber;
			
				item.InternalExternal = varInternalExternal;
			
				item.RevisionDetail = varRevisionDetail;
			
				item.PaymentTerms = varPaymentTerms;
			
				item.TypeOfOrder = varTypeOfOrder;
			
				item.IsServiceJob = varIsServiceJob;
			
				item.IsOutsource = varIsOutsource;
			
				item.SupplierID = varSupplierID;
			
				item.IsClosed = varIsClosed;
			
				item.CreatedBy = varCreatedBy;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedBy = varModifiedBy;
			
				item.ModifiedOn = varModifiedOn;
			
				item.ItemCode = varItemCode;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn JobIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn JobNumberColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn RevNumberColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn JobBarcodeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn JobBarcodeImageColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn JobNameColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn DesignColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DrawingNumberColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn RootJobIDColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn RootJobNoColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn RootJobRevNumberColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn CommonJobNumberColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomerPO1Column
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomerPO2Column
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomerIDColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn ShipToPartyColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn BrandOwnerColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn ContactPersonIDColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn SalesRepIDColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn CoordinatorIDColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn CurrencyIDColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn ProductTypeIDColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn StatusColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn RemarkColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn RevisionFromJobColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn RevisionRootNumberColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn InternalExternalColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn RevisionDetailColumn
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentTermsColumn
        {
            get { return Schema.Columns[28]; }
        }
        
        
        
        public static TableSchema.TableColumn TypeOfOrderColumn
        {
            get { return Schema.Columns[29]; }
        }
        
        
        
        public static TableSchema.TableColumn IsServiceJobColumn
        {
            get { return Schema.Columns[30]; }
        }
        
        
        
        public static TableSchema.TableColumn IsOutsourceColumn
        {
            get { return Schema.Columns[31]; }
        }
        
        
        
        public static TableSchema.TableColumn SupplierIDColumn
        {
            get { return Schema.Columns[32]; }
        }
        
        
        
        public static TableSchema.TableColumn IsClosedColumn
        {
            get { return Schema.Columns[33]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[34]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[35]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedByColumn
        {
            get { return Schema.Columns[36]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[37]; }
        }
        
        
        
        public static TableSchema.TableColumn ItemCodeColumn
        {
            get { return Schema.Columns[38]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string JobID = @"JobID";
			 public static string JobNumber = @"JobNumber";
			 public static string RevNumber = @"RevNumber";
			 public static string JobBarcode = @"JobBarcode";
			 public static string JobBarcodeImage = @"JobBarcodeImage";
			 public static string JobName = @"JobName";
			 public static string Design = @"Design";
			 public static string DrawingNumber = @"DrawingNumber";
			 public static string RootJobID = @"RootJobID";
			 public static string RootJobNo = @"RootJobNo";
			 public static string RootJobRevNumber = @"RootJobRevNumber";
			 public static string CommonJobNumber = @"CommonJobNumber";
			 public static string CustomerPO1 = @"CustomerPO1";
			 public static string CustomerPO2 = @"CustomerPO2";
			 public static string CustomerID = @"CustomerID";
			 public static string ShipToParty = @"ShipToParty";
			 public static string BrandOwner = @"BrandOwner";
			 public static string ContactPersonID = @"ContactPersonID";
			 public static string SalesRepID = @"SalesRepID";
			 public static string CoordinatorID = @"CoordinatorID";
			 public static string CurrencyID = @"CurrencyID";
			 public static string ProductTypeID = @"ProductTypeID";
			 public static string Status = @"Status";
			 public static string Remark = @"Remark";
			 public static string RevisionFromJob = @"RevisionFromJob";
			 public static string RevisionRootNumber = @"RevisionRootNumber";
			 public static string InternalExternal = @"InternalExternal";
			 public static string RevisionDetail = @"RevisionDetail";
			 public static string PaymentTerms = @"PaymentTerms";
			 public static string TypeOfOrder = @"TypeOfOrder";
			 public static string IsServiceJob = @"IsServiceJob";
			 public static string IsOutsource = @"IsOutsource";
			 public static string SupplierID = @"SupplierID";
			 public static string IsClosed = @"IsClosed";
			 public static string CreatedBy = @"CreatedBy";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedBy = @"ModifiedBy";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string ItemCode = @"ItemCode";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
                if (colTblCylinderRecords != null)
                {
                    foreach (SweetSoft.APEM.DataAccess.TblCylinder item in colTblCylinderRecords)
                    {
                        if (item.JobID != JobID)
                        {
                            item.JobID = JobID;
                        }
                    }
               }
		
                if (colTblDeliveryOrderRecords != null)
                {
                    foreach (SweetSoft.APEM.DataAccess.TblDeliveryOrder item in colTblDeliveryOrderRecords)
                    {
                        if (item.JobID != JobID)
                        {
                            item.JobID = JobID;
                        }
                    }
               }
		
                if (colTblEngravingRecords != null)
                {
                    foreach (SweetSoft.APEM.DataAccess.TblEngraving item in colTblEngravingRecords)
                    {
                        if (item.JobID != JobID)
                        {
                            item.JobID = JobID;
                        }
                    }
               }
		
                if (colTblInvoiceDetailRecords != null)
                {
                    foreach (SweetSoft.APEM.DataAccess.TblInvoiceDetail item in colTblInvoiceDetailRecords)
                    {
                        if (item.JobID != JobID)
                        {
                            item.JobID = JobID;
                        }
                    }
               }
		
                if (colTblJobSheetRecords != null)
                {
                    foreach (SweetSoft.APEM.DataAccess.TblJobSheet item in colTblJobSheetRecords)
                    {
                        if (item.JobID != JobID)
                        {
                            item.JobID = JobID;
                        }
                    }
               }
		
                if (colTblOrderConfirmationRecords != null)
                {
                    foreach (SweetSoft.APEM.DataAccess.TblOrderConfirmation item in colTblOrderConfirmationRecords)
                    {
                        if (item.JobID != JobID)
                        {
                            item.JobID = JobID;
                        }
                    }
               }
		
                if (colTblProgressRecords != null)
                {
                    foreach (SweetSoft.APEM.DataAccess.TblProgress item in colTblProgressRecords)
                    {
                        if (item.JobID != JobID)
                        {
                            item.JobID = JobID;
                        }
                    }
               }
		
                if (colTblPurchaseOrderRecords != null)
                {
                    foreach (SweetSoft.APEM.DataAccess.TblPurchaseOrder item in colTblPurchaseOrderRecords)
                    {
                        if (item.JobID != JobID)
                        {
                            item.JobID = JobID;
                        }
                    }
               }
		
                if (colTblServiceJobDetailRecords != null)
                {
                    foreach (SweetSoft.APEM.DataAccess.TblServiceJobDetail item in colTblServiceJobDetailRecords)
                    {
                        if (item.JobID != JobID)
                        {
                            item.JobID = JobID;
                        }
                    }
               }
		}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
                if (colTblCylinderRecords != null)
                {
                    colTblCylinderRecords.SaveAll();
               }
		
                if (colTblDeliveryOrderRecords != null)
                {
                    colTblDeliveryOrderRecords.SaveAll();
               }
		
                if (colTblEngravingRecords != null)
                {
                    colTblEngravingRecords.SaveAll();
               }
		
                if (colTblInvoiceDetailRecords != null)
                {
                    colTblInvoiceDetailRecords.SaveAll();
               }
		
                if (colTblJobSheetRecords != null)
                {
                    colTblJobSheetRecords.SaveAll();
               }
		
                if (colTblOrderConfirmationRecords != null)
                {
                    colTblOrderConfirmationRecords.SaveAll();
               }
		
                if (colTblProgressRecords != null)
                {
                    colTblProgressRecords.SaveAll();
               }
		
                if (colTblPurchaseOrderRecords != null)
                {
                    colTblPurchaseOrderRecords.SaveAll();
               }
		
                if (colTblServiceJobDetailRecords != null)
                {
                    colTblServiceJobDetailRecords.SaveAll();
               }
		}
        #endregion
	}
}
