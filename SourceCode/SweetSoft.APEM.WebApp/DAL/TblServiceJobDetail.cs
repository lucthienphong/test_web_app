using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblServiceJobDetail class.
	/// </summary>
    [Serializable]
	public partial class TblServiceJobDetailCollection : ActiveList<TblServiceJobDetail, TblServiceJobDetailCollection>
	{	   
		public TblServiceJobDetailCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblServiceJobDetailCollection</returns>
		public TblServiceJobDetailCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblServiceJobDetail o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblServiceJobDetail table.
	/// </summary>
	[Serializable]
	public partial class TblServiceJobDetail : ActiveRecord<TblServiceJobDetail>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblServiceJobDetail()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblServiceJobDetail(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblServiceJobDetail(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblServiceJobDetail(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblServiceJobDetail", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarServiceJobID = new TableSchema.TableColumn(schema);
				colvarServiceJobID.ColumnName = "ServiceJobID";
				colvarServiceJobID.DataType = DbType.Int32;
				colvarServiceJobID.MaxLength = 0;
				colvarServiceJobID.AutoIncrement = true;
				colvarServiceJobID.IsNullable = false;
				colvarServiceJobID.IsPrimaryKey = true;
				colvarServiceJobID.IsForeignKey = false;
				colvarServiceJobID.IsReadOnly = false;
				colvarServiceJobID.DefaultSetting = @"";
				colvarServiceJobID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServiceJobID);
				
				TableSchema.TableColumn colvarJobID = new TableSchema.TableColumn(schema);
				colvarJobID.ColumnName = "JobID";
				colvarJobID.DataType = DbType.Int32;
				colvarJobID.MaxLength = 0;
				colvarJobID.AutoIncrement = false;
				colvarJobID.IsNullable = false;
				colvarJobID.IsPrimaryKey = false;
				colvarJobID.IsForeignKey = true;
				colvarJobID.IsReadOnly = false;
				colvarJobID.DefaultSetting = @"";
				
					colvarJobID.ForeignKeyTableName = "tblJob";
				schema.Columns.Add(colvarJobID);
				
				TableSchema.TableColumn colvarWorkOrderNumber = new TableSchema.TableColumn(schema);
				colvarWorkOrderNumber.ColumnName = "WorkOrderNumber";
				colvarWorkOrderNumber.DataType = DbType.String;
				colvarWorkOrderNumber.MaxLength = 100;
				colvarWorkOrderNumber.AutoIncrement = false;
				colvarWorkOrderNumber.IsNullable = false;
				colvarWorkOrderNumber.IsPrimaryKey = false;
				colvarWorkOrderNumber.IsForeignKey = false;
				colvarWorkOrderNumber.IsReadOnly = false;
				colvarWorkOrderNumber.DefaultSetting = @"";
				colvarWorkOrderNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWorkOrderNumber);
				
				TableSchema.TableColumn colvarProductID = new TableSchema.TableColumn(schema);
				colvarProductID.ColumnName = "ProductID";
				colvarProductID.DataType = DbType.String;
				colvarProductID.MaxLength = 50;
				colvarProductID.AutoIncrement = false;
				colvarProductID.IsNullable = false;
				colvarProductID.IsPrimaryKey = false;
				colvarProductID.IsForeignKey = false;
				colvarProductID.IsReadOnly = false;
				colvarProductID.DefaultSetting = @"";
				colvarProductID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductID);
				
				TableSchema.TableColumn colvarGLCode = new TableSchema.TableColumn(schema);
				colvarGLCode.ColumnName = "GLCode";
				colvarGLCode.DataType = DbType.String;
				colvarGLCode.MaxLength = 10;
				colvarGLCode.AutoIncrement = false;
				colvarGLCode.IsNullable = true;
				colvarGLCode.IsPrimaryKey = false;
				colvarGLCode.IsForeignKey = false;
				colvarGLCode.IsReadOnly = false;
				colvarGLCode.DefaultSetting = @"";
				colvarGLCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGLCode);
				
				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.String;
				colvarDescription.MaxLength = 255;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);
				
				TableSchema.TableColumn colvarWorkOrderValues = new TableSchema.TableColumn(schema);
				colvarWorkOrderValues.ColumnName = "WorkOrderValues";
				colvarWorkOrderValues.DataType = DbType.Decimal;
				colvarWorkOrderValues.MaxLength = 0;
				colvarWorkOrderValues.AutoIncrement = false;
				colvarWorkOrderValues.IsNullable = false;
				colvarWorkOrderValues.IsPrimaryKey = false;
				colvarWorkOrderValues.IsForeignKey = false;
				colvarWorkOrderValues.IsReadOnly = false;
				colvarWorkOrderValues.DefaultSetting = @"";
				colvarWorkOrderValues.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWorkOrderValues);
				
				TableSchema.TableColumn colvarPricingID = new TableSchema.TableColumn(schema);
				colvarPricingID.ColumnName = "PricingID";
				colvarPricingID.DataType = DbType.Int32;
				colvarPricingID.MaxLength = 0;
				colvarPricingID.AutoIncrement = false;
				colvarPricingID.IsNullable = true;
				colvarPricingID.IsPrimaryKey = false;
				colvarPricingID.IsForeignKey = false;
				colvarPricingID.IsReadOnly = false;
				colvarPricingID.DefaultSetting = @"";
				colvarPricingID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPricingID);
				
				TableSchema.TableColumn colvarTaxID = new TableSchema.TableColumn(schema);
				colvarTaxID.ColumnName = "TaxID";
				colvarTaxID.DataType = DbType.Int16;
				colvarTaxID.MaxLength = 0;
				colvarTaxID.AutoIncrement = false;
				colvarTaxID.IsNullable = true;
				colvarTaxID.IsPrimaryKey = false;
				colvarTaxID.IsForeignKey = false;
				colvarTaxID.IsReadOnly = false;
				colvarTaxID.DefaultSetting = @"";
				colvarTaxID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTaxID);
				
				TableSchema.TableColumn colvarTaxPercentage = new TableSchema.TableColumn(schema);
				colvarTaxPercentage.ColumnName = "TaxPercentage";
				colvarTaxPercentage.DataType = DbType.Double;
				colvarTaxPercentage.MaxLength = 0;
				colvarTaxPercentage.AutoIncrement = false;
				colvarTaxPercentage.IsNullable = true;
				colvarTaxPercentage.IsPrimaryKey = false;
				colvarTaxPercentage.IsForeignKey = false;
				colvarTaxPercentage.IsReadOnly = false;
				colvarTaxPercentage.DefaultSetting = @"";
				colvarTaxPercentage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTaxPercentage);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("tblServiceJobDetail",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ServiceJobID")]
		[Bindable(true)]
		public int ServiceJobID 
		{
			get { return GetColumnValue<int>(Columns.ServiceJobID); }
			set { SetColumnValue(Columns.ServiceJobID, value); }
		}
		  
		[XmlAttribute("JobID")]
		[Bindable(true)]
		public int JobID 
		{
			get { return GetColumnValue<int>(Columns.JobID); }
			set { SetColumnValue(Columns.JobID, value); }
		}
		  
		[XmlAttribute("WorkOrderNumber")]
		[Bindable(true)]
		public string WorkOrderNumber 
		{
			get { return GetColumnValue<string>(Columns.WorkOrderNumber); }
			set { SetColumnValue(Columns.WorkOrderNumber, value); }
		}
		  
		[XmlAttribute("ProductID")]
		[Bindable(true)]
		public string ProductID 
		{
			get { return GetColumnValue<string>(Columns.ProductID); }
			set { SetColumnValue(Columns.ProductID, value); }
		}
		  
		[XmlAttribute("GLCode")]
		[Bindable(true)]
		public string GLCode 
		{
			get { return GetColumnValue<string>(Columns.GLCode); }
			set { SetColumnValue(Columns.GLCode, value); }
		}
		  
		[XmlAttribute("Description")]
		[Bindable(true)]
		public string Description 
		{
			get { return GetColumnValue<string>(Columns.Description); }
			set { SetColumnValue(Columns.Description, value); }
		}
		  
		[XmlAttribute("WorkOrderValues")]
		[Bindable(true)]
		public decimal WorkOrderValues 
		{
			get { return GetColumnValue<decimal>(Columns.WorkOrderValues); }
			set { SetColumnValue(Columns.WorkOrderValues, value); }
		}
		  
		[XmlAttribute("PricingID")]
		[Bindable(true)]
		public int? PricingID 
		{
			get { return GetColumnValue<int?>(Columns.PricingID); }
			set { SetColumnValue(Columns.PricingID, value); }
		}
		  
		[XmlAttribute("TaxID")]
		[Bindable(true)]
		public short? TaxID 
		{
			get { return GetColumnValue<short?>(Columns.TaxID); }
			set { SetColumnValue(Columns.TaxID, value); }
		}
		  
		[XmlAttribute("TaxPercentage")]
		[Bindable(true)]
		public double? TaxPercentage 
		{
			get { return GetColumnValue<double?>(Columns.TaxPercentage); }
			set { SetColumnValue(Columns.TaxPercentage, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblJob ActiveRecord object related to this TblServiceJobDetail
		/// 
		/// </summary>
		public SweetSoft.APEM.DataAccess.TblJob TblJob
		{
			get { return SweetSoft.APEM.DataAccess.TblJob.FetchByID(this.JobID); }
			set { SetColumnValue("JobID", value.JobID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varJobID,string varWorkOrderNumber,string varProductID,string varGLCode,string varDescription,decimal varWorkOrderValues,int? varPricingID,short? varTaxID,double? varTaxPercentage)
		{
			TblServiceJobDetail item = new TblServiceJobDetail();
			
			item.JobID = varJobID;
			
			item.WorkOrderNumber = varWorkOrderNumber;
			
			item.ProductID = varProductID;
			
			item.GLCode = varGLCode;
			
			item.Description = varDescription;
			
			item.WorkOrderValues = varWorkOrderValues;
			
			item.PricingID = varPricingID;
			
			item.TaxID = varTaxID;
			
			item.TaxPercentage = varTaxPercentage;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varServiceJobID,int varJobID,string varWorkOrderNumber,string varProductID,string varGLCode,string varDescription,decimal varWorkOrderValues,int? varPricingID,short? varTaxID,double? varTaxPercentage)
		{
			TblServiceJobDetail item = new TblServiceJobDetail();
			
				item.ServiceJobID = varServiceJobID;
			
				item.JobID = varJobID;
			
				item.WorkOrderNumber = varWorkOrderNumber;
			
				item.ProductID = varProductID;
			
				item.GLCode = varGLCode;
			
				item.Description = varDescription;
			
				item.WorkOrderValues = varWorkOrderValues;
			
				item.PricingID = varPricingID;
			
				item.TaxID = varTaxID;
			
				item.TaxPercentage = varTaxPercentage;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ServiceJobIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn JobIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn WorkOrderNumberColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ProductIDColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn GLCodeColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn WorkOrderValuesColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn PricingIDColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn TaxIDColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn TaxPercentageColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ServiceJobID = @"ServiceJobID";
			 public static string JobID = @"JobID";
			 public static string WorkOrderNumber = @"WorkOrderNumber";
			 public static string ProductID = @"ProductID";
			 public static string GLCode = @"GLCode";
			 public static string Description = @"Description";
			 public static string WorkOrderValues = @"WorkOrderValues";
			 public static string PricingID = @"PricingID";
			 public static string TaxID = @"TaxID";
			 public static string TaxPercentage = @"TaxPercentage";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
