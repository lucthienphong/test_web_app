using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
    /// <summary>
    /// Controller class for tblWorkFlowNode
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TblWorkFlowNodeController
    {
        // Preload our schema..
        TblWorkFlowNode thisSchemaLoad = new TblWorkFlowNode();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TblWorkFlowNodeCollection FetchAll()
        {
            TblWorkFlowNodeCollection coll = new TblWorkFlowNodeCollection();
            Query qry = new Query(TblWorkFlowNode.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblWorkFlowNodeCollection FetchByID(object Id)
        {
            TblWorkFlowNodeCollection coll = new TblWorkFlowNodeCollection().Where("ID", Id).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblWorkFlowNodeCollection FetchByQuery(Query qry)
        {
            TblWorkFlowNodeCollection coll = new TblWorkFlowNodeCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object Id)
        {
            return (TblWorkFlowNode.Delete(Id) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object Id)
        {
            return (TblWorkFlowNode.Destroy(Id) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(short DepartmentID,int? WorkTaskID,int? WorkFlowID,string NodeType,string WorkFlowListFromConnection,string WorkFlowListToConnection,bool? WorkFlowIsSend,bool? WorkFlowIsRoot,bool? WorkFlowIsConnectItseft,string WorkFlowDataGraphID,string WorkFlowCode,int? MachineryProduceTypeID,int? WorkFlowIDInXML,string Title,bool? UpdatePropertiesValues,string CreatedBy,DateTime? CreatedOn,string ModifiedBy,DateTime? ModifiedOn)
	    {
		    TblWorkFlowNode item = new TblWorkFlowNode();
		    
            item.DepartmentID = DepartmentID;
            
            item.WorkTaskID = WorkTaskID;
            
            item.WorkFlowID = WorkFlowID;
            
            item.NodeType = NodeType;
            
            item.WorkFlowListFromConnection = WorkFlowListFromConnection;
            
            item.WorkFlowListToConnection = WorkFlowListToConnection;
            
            item.WorkFlowIsSend = WorkFlowIsSend;
            
            item.WorkFlowIsRoot = WorkFlowIsRoot;
            
            item.WorkFlowIsConnectItseft = WorkFlowIsConnectItseft;
            
            item.WorkFlowDataGraphID = WorkFlowDataGraphID;
            
            item.WorkFlowCode = WorkFlowCode;
            
            item.MachineryProduceTypeID = MachineryProduceTypeID;
            
            item.WorkFlowIDInXML = WorkFlowIDInXML;
            
            item.Title = Title;
            
            item.UpdatePropertiesValues = UpdatePropertiesValues;
            
            item.CreatedBy = CreatedBy;
            
            item.CreatedOn = CreatedOn;
            
            item.ModifiedBy = ModifiedBy;
            
            item.ModifiedOn = ModifiedOn;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int Id,short DepartmentID,int? WorkTaskID,int? WorkFlowID,string NodeType,string WorkFlowListFromConnection,string WorkFlowListToConnection,bool? WorkFlowIsSend,bool? WorkFlowIsRoot,bool? WorkFlowIsConnectItseft,string WorkFlowDataGraphID,string WorkFlowCode,int? MachineryProduceTypeID,int? WorkFlowIDInXML,string Title,bool? UpdatePropertiesValues,string CreatedBy,DateTime? CreatedOn,string ModifiedBy,DateTime? ModifiedOn)
	    {
		    TblWorkFlowNode item = new TblWorkFlowNode();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.Id = Id;
				
			item.DepartmentID = DepartmentID;
				
			item.WorkTaskID = WorkTaskID;
				
			item.WorkFlowID = WorkFlowID;
				
			item.NodeType = NodeType;
				
			item.WorkFlowListFromConnection = WorkFlowListFromConnection;
				
			item.WorkFlowListToConnection = WorkFlowListToConnection;
				
			item.WorkFlowIsSend = WorkFlowIsSend;
				
			item.WorkFlowIsRoot = WorkFlowIsRoot;
				
			item.WorkFlowIsConnectItseft = WorkFlowIsConnectItseft;
				
			item.WorkFlowDataGraphID = WorkFlowDataGraphID;
				
			item.WorkFlowCode = WorkFlowCode;
				
			item.MachineryProduceTypeID = MachineryProduceTypeID;
				
			item.WorkFlowIDInXML = WorkFlowIDInXML;
				
			item.Title = Title;
				
			item.UpdatePropertiesValues = UpdatePropertiesValues;
				
			item.CreatedBy = CreatedBy;
				
			item.CreatedOn = CreatedOn;
				
			item.ModifiedBy = ModifiedBy;
				
			item.ModifiedOn = ModifiedOn;
				
	        item.Save(UserName);
	    }
    }
}
