using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblDeliveryOrder class.
	/// </summary>
    [Serializable]
	public partial class TblDeliveryOrderCollection : ActiveList<TblDeliveryOrder, TblDeliveryOrderCollection>
	{	   
		public TblDeliveryOrderCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblDeliveryOrderCollection</returns>
		public TblDeliveryOrderCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblDeliveryOrder o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblDeliveryOrder table.
	/// </summary>
	[Serializable]
	public partial class TblDeliveryOrder : ActiveRecord<TblDeliveryOrder>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblDeliveryOrder()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblDeliveryOrder(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblDeliveryOrder(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblDeliveryOrder(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblDeliveryOrder", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarJobID = new TableSchema.TableColumn(schema);
				colvarJobID.ColumnName = "JobID";
				colvarJobID.DataType = DbType.Int32;
				colvarJobID.MaxLength = 0;
				colvarJobID.AutoIncrement = false;
				colvarJobID.IsNullable = false;
				colvarJobID.IsPrimaryKey = true;
				colvarJobID.IsForeignKey = true;
				colvarJobID.IsReadOnly = false;
				colvarJobID.DefaultSetting = @"";
				
					colvarJobID.ForeignKeyTableName = "tblJob";
				schema.Columns.Add(colvarJobID);
				
				TableSchema.TableColumn colvarDONumber = new TableSchema.TableColumn(schema);
				colvarDONumber.ColumnName = "DONumber";
				colvarDONumber.DataType = DbType.AnsiString;
				colvarDONumber.MaxLength = 50;
				colvarDONumber.AutoIncrement = false;
				colvarDONumber.IsNullable = false;
				colvarDONumber.IsPrimaryKey = false;
				colvarDONumber.IsForeignKey = false;
				colvarDONumber.IsReadOnly = false;
				colvarDONumber.DefaultSetting = @"";
				colvarDONumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDONumber);
				
				TableSchema.TableColumn colvarCustomerPO1 = new TableSchema.TableColumn(schema);
				colvarCustomerPO1.ColumnName = "CustomerPO1";
				colvarCustomerPO1.DataType = DbType.String;
				colvarCustomerPO1.MaxLength = 50;
				colvarCustomerPO1.AutoIncrement = false;
				colvarCustomerPO1.IsNullable = true;
				colvarCustomerPO1.IsPrimaryKey = false;
				colvarCustomerPO1.IsForeignKey = false;
				colvarCustomerPO1.IsReadOnly = false;
				colvarCustomerPO1.DefaultSetting = @"";
				colvarCustomerPO1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerPO1);
				
				TableSchema.TableColumn colvarCustomerPO2 = new TableSchema.TableColumn(schema);
				colvarCustomerPO2.ColumnName = "CustomerPO2";
				colvarCustomerPO2.DataType = DbType.String;
				colvarCustomerPO2.MaxLength = 50;
				colvarCustomerPO2.AutoIncrement = false;
				colvarCustomerPO2.IsNullable = true;
				colvarCustomerPO2.IsPrimaryKey = false;
				colvarCustomerPO2.IsForeignKey = false;
				colvarCustomerPO2.IsReadOnly = false;
				colvarCustomerPO2.DefaultSetting = @"";
				colvarCustomerPO2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerPO2);
				
				TableSchema.TableColumn colvarContactPersonID = new TableSchema.TableColumn(schema);
				colvarContactPersonID.ColumnName = "ContactPersonID";
				colvarContactPersonID.DataType = DbType.Int32;
				colvarContactPersonID.MaxLength = 0;
				colvarContactPersonID.AutoIncrement = false;
				colvarContactPersonID.IsNullable = false;
				colvarContactPersonID.IsPrimaryKey = false;
				colvarContactPersonID.IsForeignKey = false;
				colvarContactPersonID.IsReadOnly = false;
				colvarContactPersonID.DefaultSetting = @"";
				colvarContactPersonID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContactPersonID);
				
				TableSchema.TableColumn colvarOrderDate = new TableSchema.TableColumn(schema);
				colvarOrderDate.ColumnName = "OrderDate";
				colvarOrderDate.DataType = DbType.DateTime;
				colvarOrderDate.MaxLength = 0;
				colvarOrderDate.AutoIncrement = false;
				colvarOrderDate.IsNullable = false;
				colvarOrderDate.IsPrimaryKey = false;
				colvarOrderDate.IsForeignKey = false;
				colvarOrderDate.IsReadOnly = false;
				colvarOrderDate.DefaultSetting = @"";
				colvarOrderDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderDate);
				
				TableSchema.TableColumn colvarOtherItem = new TableSchema.TableColumn(schema);
				colvarOtherItem.ColumnName = "OtherItem";
				colvarOtherItem.DataType = DbType.String;
				colvarOtherItem.MaxLength = 2000;
				colvarOtherItem.AutoIncrement = false;
				colvarOtherItem.IsNullable = true;
				colvarOtherItem.IsPrimaryKey = false;
				colvarOtherItem.IsForeignKey = false;
				colvarOtherItem.IsReadOnly = false;
				colvarOtherItem.DefaultSetting = @"";
				colvarOtherItem.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOtherItem);
				
				TableSchema.TableColumn colvarPackingID = new TableSchema.TableColumn(schema);
				colvarPackingID.ColumnName = "PackingID";
				colvarPackingID.DataType = DbType.Int32;
				colvarPackingID.MaxLength = 0;
				colvarPackingID.AutoIncrement = false;
				colvarPackingID.IsNullable = true;
				colvarPackingID.IsPrimaryKey = false;
				colvarPackingID.IsForeignKey = false;
				colvarPackingID.IsReadOnly = false;
				colvarPackingID.DefaultSetting = @"";
				colvarPackingID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPackingID);
				
				TableSchema.TableColumn colvarGrossWeigth = new TableSchema.TableColumn(schema);
				colvarGrossWeigth.ColumnName = "GrossWeigth";
				colvarGrossWeigth.DataType = DbType.String;
				colvarGrossWeigth.MaxLength = 50;
				colvarGrossWeigth.AutoIncrement = false;
				colvarGrossWeigth.IsNullable = true;
				colvarGrossWeigth.IsPrimaryKey = false;
				colvarGrossWeigth.IsForeignKey = false;
				colvarGrossWeigth.IsReadOnly = false;
				colvarGrossWeigth.DefaultSetting = @"";
				colvarGrossWeigth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGrossWeigth);
				
				TableSchema.TableColumn colvarNetWeight = new TableSchema.TableColumn(schema);
				colvarNetWeight.ColumnName = "NetWeight";
				colvarNetWeight.DataType = DbType.String;
				colvarNetWeight.MaxLength = 50;
				colvarNetWeight.AutoIncrement = false;
				colvarNetWeight.IsNullable = true;
				colvarNetWeight.IsPrimaryKey = false;
				colvarNetWeight.IsForeignKey = false;
				colvarNetWeight.IsReadOnly = false;
				colvarNetWeight.DefaultSetting = @"";
				colvarNetWeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNetWeight);
				
				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 100;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 100;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = true;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("tblDeliveryOrder",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("JobID")]
		[Bindable(true)]
		public int JobID 
		{
			get { return GetColumnValue<int>(Columns.JobID); }
			set { SetColumnValue(Columns.JobID, value); }
		}
		  
		[XmlAttribute("DONumber")]
		[Bindable(true)]
		public string DONumber 
		{
			get { return GetColumnValue<string>(Columns.DONumber); }
			set { SetColumnValue(Columns.DONumber, value); }
		}
		  
		[XmlAttribute("CustomerPO1")]
		[Bindable(true)]
		public string CustomerPO1 
		{
			get { return GetColumnValue<string>(Columns.CustomerPO1); }
			set { SetColumnValue(Columns.CustomerPO1, value); }
		}
		  
		[XmlAttribute("CustomerPO2")]
		[Bindable(true)]
		public string CustomerPO2 
		{
			get { return GetColumnValue<string>(Columns.CustomerPO2); }
			set { SetColumnValue(Columns.CustomerPO2, value); }
		}
		  
		[XmlAttribute("ContactPersonID")]
		[Bindable(true)]
		public int ContactPersonID 
		{
			get { return GetColumnValue<int>(Columns.ContactPersonID); }
			set { SetColumnValue(Columns.ContactPersonID, value); }
		}
		  
		[XmlAttribute("OrderDate")]
		[Bindable(true)]
		public DateTime OrderDate 
		{
			get { return GetColumnValue<DateTime>(Columns.OrderDate); }
			set { SetColumnValue(Columns.OrderDate, value); }
		}
		  
		[XmlAttribute("OtherItem")]
		[Bindable(true)]
		public string OtherItem 
		{
			get { return GetColumnValue<string>(Columns.OtherItem); }
			set { SetColumnValue(Columns.OtherItem, value); }
		}
		  
		[XmlAttribute("PackingID")]
		[Bindable(true)]
		public int? PackingID 
		{
			get { return GetColumnValue<int?>(Columns.PackingID); }
			set { SetColumnValue(Columns.PackingID, value); }
		}
		  
		[XmlAttribute("GrossWeigth")]
		[Bindable(true)]
		public string GrossWeigth 
		{
			get { return GetColumnValue<string>(Columns.GrossWeigth); }
			set { SetColumnValue(Columns.GrossWeigth, value); }
		}
		  
		[XmlAttribute("NetWeight")]
		[Bindable(true)]
		public string NetWeight 
		{
			get { return GetColumnValue<string>(Columns.NetWeight); }
			set { SetColumnValue(Columns.NetWeight, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public string CreatedBy 
		{
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedBy")]
		[Bindable(true)]
		public string ModifiedBy 
		{
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblJob ActiveRecord object related to this TblDeliveryOrder
		/// 
		/// </summary>
		public SweetSoft.APEM.DataAccess.TblJob TblJob
		{
			get { return SweetSoft.APEM.DataAccess.TblJob.FetchByID(this.JobID); }
			set { SetColumnValue("JobID", value.JobID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varJobID,string varDONumber,string varCustomerPO1,string varCustomerPO2,int varContactPersonID,DateTime varOrderDate,string varOtherItem,int? varPackingID,string varGrossWeigth,string varNetWeight,string varCreatedBy,DateTime? varCreatedOn,string varModifiedBy,DateTime? varModifiedOn)
		{
			TblDeliveryOrder item = new TblDeliveryOrder();
			
			item.JobID = varJobID;
			
			item.DONumber = varDONumber;
			
			item.CustomerPO1 = varCustomerPO1;
			
			item.CustomerPO2 = varCustomerPO2;
			
			item.ContactPersonID = varContactPersonID;
			
			item.OrderDate = varOrderDate;
			
			item.OtherItem = varOtherItem;
			
			item.PackingID = varPackingID;
			
			item.GrossWeigth = varGrossWeigth;
			
			item.NetWeight = varNetWeight;
			
			item.CreatedBy = varCreatedBy;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedBy = varModifiedBy;
			
			item.ModifiedOn = varModifiedOn;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varJobID,string varDONumber,string varCustomerPO1,string varCustomerPO2,int varContactPersonID,DateTime varOrderDate,string varOtherItem,int? varPackingID,string varGrossWeigth,string varNetWeight,string varCreatedBy,DateTime? varCreatedOn,string varModifiedBy,DateTime? varModifiedOn)
		{
			TblDeliveryOrder item = new TblDeliveryOrder();
			
				item.JobID = varJobID;
			
				item.DONumber = varDONumber;
			
				item.CustomerPO1 = varCustomerPO1;
			
				item.CustomerPO2 = varCustomerPO2;
			
				item.ContactPersonID = varContactPersonID;
			
				item.OrderDate = varOrderDate;
			
				item.OtherItem = varOtherItem;
			
				item.PackingID = varPackingID;
			
				item.GrossWeigth = varGrossWeigth;
			
				item.NetWeight = varNetWeight;
			
				item.CreatedBy = varCreatedBy;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedBy = varModifiedBy;
			
				item.ModifiedOn = varModifiedOn;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn JobIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn DONumberColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomerPO1Column
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomerPO2Column
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ContactPersonIDColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderDateColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn OtherItemColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn PackingIDColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn GrossWeigthColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn NetWeightColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedByColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string JobID = @"JobID";
			 public static string DONumber = @"DONumber";
			 public static string CustomerPO1 = @"CustomerPO1";
			 public static string CustomerPO2 = @"CustomerPO2";
			 public static string ContactPersonID = @"ContactPersonID";
			 public static string OrderDate = @"OrderDate";
			 public static string OtherItem = @"OtherItem";
			 public static string PackingID = @"PackingID";
			 public static string GrossWeigth = @"GrossWeigth";
			 public static string NetWeight = @"NetWeight";
			 public static string CreatedBy = @"CreatedBy";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedBy = @"ModifiedBy";
			 public static string ModifiedOn = @"ModifiedOn";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
