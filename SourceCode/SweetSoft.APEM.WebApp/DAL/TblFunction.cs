using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblFunction class.
	/// </summary>
    [Serializable]
	public partial class TblFunctionCollection : ActiveList<TblFunction, TblFunctionCollection>
	{	   
		public TblFunctionCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblFunctionCollection</returns>
		public TblFunctionCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblFunction o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblFunction table.
	/// </summary>
	[Serializable]
	public partial class TblFunction : ActiveRecord<TblFunction>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblFunction()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblFunction(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblFunction(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblFunction(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblFunction", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarFunctionID = new TableSchema.TableColumn(schema);
				colvarFunctionID.ColumnName = "FunctionID";
				colvarFunctionID.DataType = DbType.AnsiString;
				colvarFunctionID.MaxLength = 128;
				colvarFunctionID.AutoIncrement = false;
				colvarFunctionID.IsNullable = false;
				colvarFunctionID.IsPrimaryKey = true;
				colvarFunctionID.IsForeignKey = false;
				colvarFunctionID.IsReadOnly = false;
				colvarFunctionID.DefaultSetting = @"";
				colvarFunctionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFunctionID);
				
				TableSchema.TableColumn colvarParentID = new TableSchema.TableColumn(schema);
				colvarParentID.ColumnName = "ParentID";
				colvarParentID.DataType = DbType.AnsiString;
				colvarParentID.MaxLength = 128;
				colvarParentID.AutoIncrement = false;
				colvarParentID.IsNullable = true;
				colvarParentID.IsPrimaryKey = false;
				colvarParentID.IsForeignKey = false;
				colvarParentID.IsReadOnly = false;
				colvarParentID.DefaultSetting = @"";
				colvarParentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParentID);
				
				TableSchema.TableColumn colvarTitle = new TableSchema.TableColumn(schema);
				colvarTitle.ColumnName = "Title";
				colvarTitle.DataType = DbType.String;
				colvarTitle.MaxLength = 250;
				colvarTitle.AutoIncrement = false;
				colvarTitle.IsNullable = false;
				colvarTitle.IsPrimaryKey = false;
				colvarTitle.IsForeignKey = false;
				colvarTitle.IsReadOnly = false;
				colvarTitle.DefaultSetting = @"";
				colvarTitle.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTitle);
				
				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.String;
				colvarDescription.MaxLength = 500;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);
				
				TableSchema.TableColumn colvarDisplayOrder = new TableSchema.TableColumn(schema);
				colvarDisplayOrder.ColumnName = "DisplayOrder";
				colvarDisplayOrder.DataType = DbType.Int32;
				colvarDisplayOrder.MaxLength = 0;
				colvarDisplayOrder.AutoIncrement = false;
				colvarDisplayOrder.IsNullable = false;
				colvarDisplayOrder.IsPrimaryKey = false;
				colvarDisplayOrder.IsForeignKey = false;
				colvarDisplayOrder.IsReadOnly = false;
				colvarDisplayOrder.DefaultSetting = @"";
				colvarDisplayOrder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDisplayOrder);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("tblFunction",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("FunctionID")]
		[Bindable(true)]
		public string FunctionID 
		{
			get { return GetColumnValue<string>(Columns.FunctionID); }
			set { SetColumnValue(Columns.FunctionID, value); }
		}
		  
		[XmlAttribute("ParentID")]
		[Bindable(true)]
		public string ParentID 
		{
			get { return GetColumnValue<string>(Columns.ParentID); }
			set { SetColumnValue(Columns.ParentID, value); }
		}
		  
		[XmlAttribute("Title")]
		[Bindable(true)]
		public string Title 
		{
			get { return GetColumnValue<string>(Columns.Title); }
			set { SetColumnValue(Columns.Title, value); }
		}
		  
		[XmlAttribute("Description")]
		[Bindable(true)]
		public string Description 
		{
			get { return GetColumnValue<string>(Columns.Description); }
			set { SetColumnValue(Columns.Description, value); }
		}
		  
		[XmlAttribute("DisplayOrder")]
		[Bindable(true)]
		public int DisplayOrder 
		{
			get { return GetColumnValue<int>(Columns.DisplayOrder); }
			set { SetColumnValue(Columns.DisplayOrder, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		private SweetSoft.APEM.DataAccess.TblRolePermissionCollection colTblRolePermissionRecords;
		public SweetSoft.APEM.DataAccess.TblRolePermissionCollection TblRolePermissionRecords()
		{
			if(colTblRolePermissionRecords == null)
			{
				colTblRolePermissionRecords = new SweetSoft.APEM.DataAccess.TblRolePermissionCollection().Where(TblRolePermission.Columns.FunctionID, FunctionID).Load();
				colTblRolePermissionRecords.ListChanged += new ListChangedEventHandler(colTblRolePermissionRecords_ListChanged);
			}
			return colTblRolePermissionRecords;
		}
				
		void colTblRolePermissionRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colTblRolePermissionRecords[e.NewIndex].FunctionID = FunctionID;
            }
		}
		#endregion
		
			
		
		//no foreign key tables defined (0)
		
		
		
		#region Many To Many Helpers
		
		 
		public SweetSoft.APEM.DataAccess.TblRoleCollection GetTblRoleCollection() { return TblFunction.GetTblRoleCollection(this.FunctionID); }
		public static SweetSoft.APEM.DataAccess.TblRoleCollection GetTblRoleCollection(string varFunctionID)
		{
		    SubSonic.QueryCommand cmd = new SubSonic.QueryCommand("SELECT * FROM [dbo].[tblRole] INNER JOIN [tblRolePermission] ON [tblRole].[RoleID] = [tblRolePermission].[RoleID] WHERE [tblRolePermission].[FunctionID] = @FunctionID", TblFunction.Schema.Provider.Name);
			cmd.AddParameter("@FunctionID", varFunctionID, DbType.AnsiString);
			IDataReader rdr = SubSonic.DataService.GetReader(cmd);
			TblRoleCollection coll = new TblRoleCollection();
			coll.LoadAndCloseReader(rdr);
			return coll;
		}
		
		public static void SaveTblRoleMap(string varFunctionID, TblRoleCollection items)
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			QueryCommand cmdDel = new QueryCommand("DELETE FROM [tblRolePermission] WHERE [tblRolePermission].[FunctionID] = @FunctionID", TblFunction.Schema.Provider.Name);
			cmdDel.AddParameter("@FunctionID", varFunctionID, DbType.AnsiString);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (TblRole item in items)
			{
				TblRolePermission varTblRolePermission = new TblRolePermission();
				varTblRolePermission.SetColumnValue("FunctionID", varFunctionID);
				varTblRolePermission.SetColumnValue("RoleID", item.GetPrimaryKeyValue());
				varTblRolePermission.Save();
			}
		}
		public static void SaveTblRoleMap(string varFunctionID, System.Web.UI.WebControls.ListItemCollection itemList) 
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			 QueryCommand cmdDel = new QueryCommand("DELETE FROM [tblRolePermission] WHERE [tblRolePermission].[FunctionID] = @FunctionID", TblFunction.Schema.Provider.Name);
			cmdDel.AddParameter("@FunctionID", varFunctionID, DbType.AnsiString);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (System.Web.UI.WebControls.ListItem l in itemList) 
			{
				if (l.Selected) 
				{
					TblRolePermission varTblRolePermission = new TblRolePermission();
					varTblRolePermission.SetColumnValue("FunctionID", varFunctionID);
					varTblRolePermission.SetColumnValue("RoleID", l.Value);
					varTblRolePermission.Save();
				}
			}
		}
		public static void SaveTblRoleMap(string varFunctionID , int[] itemList) 
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			 QueryCommand cmdDel = new QueryCommand("DELETE FROM [tblRolePermission] WHERE [tblRolePermission].[FunctionID] = @FunctionID", TblFunction.Schema.Provider.Name);
			cmdDel.AddParameter("@FunctionID", varFunctionID, DbType.AnsiString);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (int item in itemList) 
			{
				TblRolePermission varTblRolePermission = new TblRolePermission();
				varTblRolePermission.SetColumnValue("FunctionID", varFunctionID);
				varTblRolePermission.SetColumnValue("RoleID", item);
				varTblRolePermission.Save();
			}
		}
		
		public static void DeleteTblRoleMap(string varFunctionID) 
		{
			QueryCommand cmdDel = new QueryCommand("DELETE FROM [tblRolePermission] WHERE [tblRolePermission].[FunctionID] = @FunctionID", TblFunction.Schema.Provider.Name);
			cmdDel.AddParameter("@FunctionID", varFunctionID, DbType.AnsiString);
			DataService.ExecuteQuery(cmdDel);
		}
		
		#endregion
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varFunctionID,string varParentID,string varTitle,string varDescription,int varDisplayOrder)
		{
			TblFunction item = new TblFunction();
			
			item.FunctionID = varFunctionID;
			
			item.ParentID = varParentID;
			
			item.Title = varTitle;
			
			item.Description = varDescription;
			
			item.DisplayOrder = varDisplayOrder;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varFunctionID,string varParentID,string varTitle,string varDescription,int varDisplayOrder)
		{
			TblFunction item = new TblFunction();
			
				item.FunctionID = varFunctionID;
			
				item.ParentID = varParentID;
			
				item.Title = varTitle;
			
				item.Description = varDescription;
			
				item.DisplayOrder = varDisplayOrder;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn FunctionIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ParentIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TitleColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn DisplayOrderColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string FunctionID = @"FunctionID";
			 public static string ParentID = @"ParentID";
			 public static string Title = @"Title";
			 public static string Description = @"Description";
			 public static string DisplayOrder = @"DisplayOrder";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
                if (colTblRolePermissionRecords != null)
                {
                    foreach (SweetSoft.APEM.DataAccess.TblRolePermission item in colTblRolePermissionRecords)
                    {
                        if (item.FunctionID != FunctionID)
                        {
                            item.FunctionID = FunctionID;
                        }
                    }
               }
		}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
                if (colTblRolePermissionRecords != null)
                {
                    colTblRolePermissionRecords.SaveAll();
               }
		}
        #endregion
	}
}
