using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblJobSheet class.
	/// </summary>
    [Serializable]
	public partial class TblJobSheetCollection : ActiveList<TblJobSheet, TblJobSheetCollection>
	{	   
		public TblJobSheetCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblJobSheetCollection</returns>
		public TblJobSheetCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblJobSheet o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblJobSheet table.
	/// </summary>
	[Serializable]
	public partial class TblJobSheet : ActiveRecord<TblJobSheet>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblJobSheet()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblJobSheet(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblJobSheet(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblJobSheet(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblJobSheet", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarJobID = new TableSchema.TableColumn(schema);
				colvarJobID.ColumnName = "JobID";
				colvarJobID.DataType = DbType.Int32;
				colvarJobID.MaxLength = 0;
				colvarJobID.AutoIncrement = false;
				colvarJobID.IsNullable = false;
				colvarJobID.IsPrimaryKey = true;
				colvarJobID.IsForeignKey = true;
				colvarJobID.IsReadOnly = false;
				colvarJobID.DefaultSetting = @"";
				
					colvarJobID.ForeignKeyTableName = "tblJob";
				schema.Columns.Add(colvarJobID);
				
				TableSchema.TableColumn colvarReproOperator = new TableSchema.TableColumn(schema);
				colvarReproOperator.ColumnName = "ReproOperator";
				colvarReproOperator.DataType = DbType.String;
				colvarReproOperator.MaxLength = 100;
				colvarReproOperator.AutoIncrement = false;
				colvarReproOperator.IsNullable = false;
				colvarReproOperator.IsPrimaryKey = false;
				colvarReproOperator.IsForeignKey = false;
				colvarReproOperator.IsReadOnly = false;
				colvarReproOperator.DefaultSetting = @"";
				colvarReproOperator.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReproOperator);
				
				TableSchema.TableColumn colvarCircumference = new TableSchema.TableColumn(schema);
				colvarCircumference.ColumnName = "Circumference";
				colvarCircumference.DataType = DbType.Double;
				colvarCircumference.MaxLength = 0;
				colvarCircumference.AutoIncrement = false;
				colvarCircumference.IsNullable = false;
				colvarCircumference.IsPrimaryKey = false;
				colvarCircumference.IsForeignKey = false;
				colvarCircumference.IsReadOnly = false;
				colvarCircumference.DefaultSetting = @"";
				colvarCircumference.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCircumference);
				
				TableSchema.TableColumn colvarFaceWidth = new TableSchema.TableColumn(schema);
				colvarFaceWidth.ColumnName = "FaceWidth";
				colvarFaceWidth.DataType = DbType.Double;
				colvarFaceWidth.MaxLength = 0;
				colvarFaceWidth.AutoIncrement = false;
				colvarFaceWidth.IsNullable = false;
				colvarFaceWidth.IsPrimaryKey = false;
				colvarFaceWidth.IsForeignKey = false;
				colvarFaceWidth.IsReadOnly = false;
				colvarFaceWidth.DefaultSetting = @"";
				colvarFaceWidth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFaceWidth);
				
				TableSchema.TableColumn colvarDiameter = new TableSchema.TableColumn(schema);
				colvarDiameter.ColumnName = "Diameter";
				colvarDiameter.DataType = DbType.Double;
				colvarDiameter.MaxLength = 0;
				colvarDiameter.AutoIncrement = false;
				colvarDiameter.IsNullable = false;
				colvarDiameter.IsPrimaryKey = false;
				colvarDiameter.IsForeignKey = false;
				colvarDiameter.IsReadOnly = false;
				colvarDiameter.DefaultSetting = @"";
				colvarDiameter.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDiameter);
				
				TableSchema.TableColumn colvarDiameterDiff = new TableSchema.TableColumn(schema);
				colvarDiameterDiff.ColumnName = "DiameterDiff";
				colvarDiameterDiff.DataType = DbType.Double;
				colvarDiameterDiff.MaxLength = 0;
				colvarDiameterDiff.AutoIncrement = false;
				colvarDiameterDiff.IsNullable = false;
				colvarDiameterDiff.IsPrimaryKey = false;
				colvarDiameterDiff.IsForeignKey = false;
				colvarDiameterDiff.IsReadOnly = false;
				colvarDiameterDiff.DefaultSetting = @"";
				colvarDiameterDiff.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDiameterDiff);
				
				TableSchema.TableColumn colvarReproDate = new TableSchema.TableColumn(schema);
				colvarReproDate.ColumnName = "ReproDate";
				colvarReproDate.DataType = DbType.DateTime;
				colvarReproDate.MaxLength = 0;
				colvarReproDate.AutoIncrement = false;
				colvarReproDate.IsNullable = true;
				colvarReproDate.IsPrimaryKey = false;
				colvarReproDate.IsForeignKey = false;
				colvarReproDate.IsReadOnly = false;
				colvarReproDate.DefaultSetting = @"";
				colvarReproDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReproDate);
				
				TableSchema.TableColumn colvarHasIrisProof = new TableSchema.TableColumn(schema);
				colvarHasIrisProof.ColumnName = "HasIrisProof";
				colvarHasIrisProof.DataType = DbType.Boolean;
				colvarHasIrisProof.MaxLength = 0;
				colvarHasIrisProof.AutoIncrement = false;
				colvarHasIrisProof.IsNullable = true;
				colvarHasIrisProof.IsPrimaryKey = false;
				colvarHasIrisProof.IsForeignKey = false;
				colvarHasIrisProof.IsReadOnly = false;
				colvarHasIrisProof.DefaultSetting = @"";
				colvarHasIrisProof.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasIrisProof);
				
				TableSchema.TableColumn colvarIrisProof = new TableSchema.TableColumn(schema);
				colvarIrisProof.ColumnName = "IrisProof";
				colvarIrisProof.DataType = DbType.Int32;
				colvarIrisProof.MaxLength = 0;
				colvarIrisProof.AutoIncrement = false;
				colvarIrisProof.IsNullable = true;
				colvarIrisProof.IsPrimaryKey = false;
				colvarIrisProof.IsForeignKey = false;
				colvarIrisProof.IsReadOnly = false;
				colvarIrisProof.DefaultSetting = @"";
				colvarIrisProof.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIrisProof);
				
				TableSchema.TableColumn colvarCylinderDate = new TableSchema.TableColumn(schema);
				colvarCylinderDate.ColumnName = "CylinderDate";
				colvarCylinderDate.DataType = DbType.DateTime;
				colvarCylinderDate.MaxLength = 0;
				colvarCylinderDate.AutoIncrement = false;
				colvarCylinderDate.IsNullable = true;
				colvarCylinderDate.IsPrimaryKey = false;
				colvarCylinderDate.IsForeignKey = false;
				colvarCylinderDate.IsReadOnly = false;
				colvarCylinderDate.DefaultSetting = @"";
				colvarCylinderDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCylinderDate);
				
				TableSchema.TableColumn colvarPreAppoval = new TableSchema.TableColumn(schema);
				colvarPreAppoval.ColumnName = "PreAppoval";
				colvarPreAppoval.DataType = DbType.Boolean;
				colvarPreAppoval.MaxLength = 0;
				colvarPreAppoval.AutoIncrement = false;
				colvarPreAppoval.IsNullable = false;
				colvarPreAppoval.IsPrimaryKey = false;
				colvarPreAppoval.IsForeignKey = false;
				colvarPreAppoval.IsReadOnly = false;
				colvarPreAppoval.DefaultSetting = @"";
				colvarPreAppoval.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreAppoval);
				
				TableSchema.TableColumn colvarLeavingAPE = new TableSchema.TableColumn(schema);
				colvarLeavingAPE.ColumnName = "LeavingAPE";
				colvarLeavingAPE.DataType = DbType.Boolean;
				colvarLeavingAPE.MaxLength = 0;
				colvarLeavingAPE.AutoIncrement = false;
				colvarLeavingAPE.IsNullable = false;
				colvarLeavingAPE.IsPrimaryKey = false;
				colvarLeavingAPE.IsForeignKey = false;
				colvarLeavingAPE.IsReadOnly = false;
				colvarLeavingAPE.DefaultSetting = @"";
				colvarLeavingAPE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeavingAPE);
				
				TableSchema.TableColumn colvarDeilveryNotes = new TableSchema.TableColumn(schema);
				colvarDeilveryNotes.ColumnName = "DeilveryNotes";
				colvarDeilveryNotes.DataType = DbType.String;
				colvarDeilveryNotes.MaxLength = 1000;
				colvarDeilveryNotes.AutoIncrement = false;
				colvarDeilveryNotes.IsNullable = true;
				colvarDeilveryNotes.IsPrimaryKey = false;
				colvarDeilveryNotes.IsForeignKey = false;
				colvarDeilveryNotes.IsReadOnly = false;
				colvarDeilveryNotes.DefaultSetting = @"";
				colvarDeilveryNotes.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeilveryNotes);
				
				TableSchema.TableColumn colvarEyeMark = new TableSchema.TableColumn(schema);
				colvarEyeMark.ColumnName = "EyeMark";
				colvarEyeMark.DataType = DbType.Boolean;
				colvarEyeMark.MaxLength = 0;
				colvarEyeMark.AutoIncrement = false;
				colvarEyeMark.IsNullable = true;
				colvarEyeMark.IsPrimaryKey = false;
				colvarEyeMark.IsForeignKey = false;
				colvarEyeMark.IsReadOnly = false;
				colvarEyeMark.DefaultSetting = @"";
				colvarEyeMark.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEyeMark);
				
				TableSchema.TableColumn colvarEMWidth = new TableSchema.TableColumn(schema);
				colvarEMWidth.ColumnName = "EMWidth";
				colvarEMWidth.DataType = DbType.Int32;
				colvarEMWidth.MaxLength = 0;
				colvarEMWidth.AutoIncrement = false;
				colvarEMWidth.IsNullable = true;
				colvarEMWidth.IsPrimaryKey = false;
				colvarEMWidth.IsForeignKey = false;
				colvarEMWidth.IsReadOnly = false;
				colvarEMWidth.DefaultSetting = @"";
				colvarEMWidth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEMWidth);
				
				TableSchema.TableColumn colvarEMHeight = new TableSchema.TableColumn(schema);
				colvarEMHeight.ColumnName = "EMHeight";
				colvarEMHeight.DataType = DbType.Int32;
				colvarEMHeight.MaxLength = 0;
				colvarEMHeight.AutoIncrement = false;
				colvarEMHeight.IsNullable = true;
				colvarEMHeight.IsPrimaryKey = false;
				colvarEMHeight.IsForeignKey = false;
				colvarEMHeight.IsReadOnly = false;
				colvarEMHeight.DefaultSetting = @"";
				colvarEMHeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEMHeight);
				
				TableSchema.TableColumn colvarEMColor = new TableSchema.TableColumn(schema);
				colvarEMColor.ColumnName = "EMColor";
				colvarEMColor.DataType = DbType.String;
				colvarEMColor.MaxLength = 50;
				colvarEMColor.AutoIncrement = false;
				colvarEMColor.IsNullable = true;
				colvarEMColor.IsPrimaryKey = false;
				colvarEMColor.IsForeignKey = false;
				colvarEMColor.IsReadOnly = false;
				colvarEMColor.DefaultSetting = @"";
				colvarEMColor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEMColor);
				
				TableSchema.TableColumn colvarBackingID = new TableSchema.TableColumn(schema);
				colvarBackingID.ColumnName = "BackingID";
				colvarBackingID.DataType = DbType.Int16;
				colvarBackingID.MaxLength = 0;
				colvarBackingID.AutoIncrement = false;
				colvarBackingID.IsNullable = true;
				colvarBackingID.IsPrimaryKey = false;
				colvarBackingID.IsForeignKey = true;
				colvarBackingID.IsReadOnly = false;
				colvarBackingID.DefaultSetting = @"";
				
					colvarBackingID.ForeignKeyTableName = "tblBacking";
				schema.Columns.Add(colvarBackingID);
				
				TableSchema.TableColumn colvarEMPonsition = new TableSchema.TableColumn(schema);
				colvarEMPonsition.ColumnName = "EMPonsition";
				colvarEMPonsition.DataType = DbType.Int16;
				colvarEMPonsition.MaxLength = 0;
				colvarEMPonsition.AutoIncrement = false;
				colvarEMPonsition.IsNullable = true;
				colvarEMPonsition.IsPrimaryKey = false;
				colvarEMPonsition.IsForeignKey = false;
				colvarEMPonsition.IsReadOnly = false;
				colvarEMPonsition.DefaultSetting = @"";
				colvarEMPonsition.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEMPonsition);
				
				TableSchema.TableColumn colvarUNSizeV = new TableSchema.TableColumn(schema);
				colvarUNSizeV.ColumnName = "UNSizeV";
				colvarUNSizeV.DataType = DbType.Double;
				colvarUNSizeV.MaxLength = 0;
				colvarUNSizeV.AutoIncrement = false;
				colvarUNSizeV.IsNullable = true;
				colvarUNSizeV.IsPrimaryKey = false;
				colvarUNSizeV.IsForeignKey = false;
				colvarUNSizeV.IsReadOnly = false;
				colvarUNSizeV.DefaultSetting = @"";
				colvarUNSizeV.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUNSizeV);
				
				TableSchema.TableColumn colvarUNSizeH = new TableSchema.TableColumn(schema);
				colvarUNSizeH.ColumnName = "UNSizeH";
				colvarUNSizeH.DataType = DbType.Double;
				colvarUNSizeH.MaxLength = 0;
				colvarUNSizeH.AutoIncrement = false;
				colvarUNSizeH.IsNullable = true;
				colvarUNSizeH.IsPrimaryKey = false;
				colvarUNSizeH.IsForeignKey = false;
				colvarUNSizeH.IsReadOnly = false;
				colvarUNSizeH.DefaultSetting = @"";
				colvarUNSizeH.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUNSizeH);
				
				TableSchema.TableColumn colvarOpaqueInk = new TableSchema.TableColumn(schema);
				colvarOpaqueInk.ColumnName = "OpaqueInk";
				colvarOpaqueInk.DataType = DbType.Boolean;
				colvarOpaqueInk.MaxLength = 0;
				colvarOpaqueInk.AutoIncrement = false;
				colvarOpaqueInk.IsNullable = false;
				colvarOpaqueInk.IsPrimaryKey = false;
				colvarOpaqueInk.IsForeignKey = false;
				colvarOpaqueInk.IsReadOnly = false;
				colvarOpaqueInk.DefaultSetting = @"";
				colvarOpaqueInk.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOpaqueInk);
				
				TableSchema.TableColumn colvarOpaqueInkRate = new TableSchema.TableColumn(schema);
				colvarOpaqueInkRate.ColumnName = "OpaqueInkRate";
				colvarOpaqueInkRate.DataType = DbType.Int32;
				colvarOpaqueInkRate.MaxLength = 0;
				colvarOpaqueInkRate.AutoIncrement = false;
				colvarOpaqueInkRate.IsNullable = true;
				colvarOpaqueInkRate.IsPrimaryKey = false;
				colvarOpaqueInkRate.IsForeignKey = false;
				colvarOpaqueInkRate.IsReadOnly = false;
				colvarOpaqueInkRate.DefaultSetting = @"";
				colvarOpaqueInkRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOpaqueInkRate);
				
				TableSchema.TableColumn colvarIsEndless = new TableSchema.TableColumn(schema);
				colvarIsEndless.ColumnName = "IsEndless";
				colvarIsEndless.DataType = DbType.Boolean;
				colvarIsEndless.MaxLength = 0;
				colvarIsEndless.AutoIncrement = false;
				colvarIsEndless.IsNullable = true;
				colvarIsEndless.IsPrimaryKey = false;
				colvarIsEndless.IsForeignKey = false;
				colvarIsEndless.IsReadOnly = false;
				colvarIsEndless.DefaultSetting = @"";
				colvarIsEndless.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsEndless);
				
				TableSchema.TableColumn colvarPrintingDirection = new TableSchema.TableColumn(schema);
				colvarPrintingDirection.ColumnName = "PrintingDirection";
				colvarPrintingDirection.DataType = DbType.AnsiString;
				colvarPrintingDirection.MaxLength = 1;
				colvarPrintingDirection.AutoIncrement = false;
				colvarPrintingDirection.IsNullable = true;
				colvarPrintingDirection.IsPrimaryKey = false;
				colvarPrintingDirection.IsForeignKey = false;
				colvarPrintingDirection.IsReadOnly = false;
				colvarPrintingDirection.DefaultSetting = @"";
				colvarPrintingDirection.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrintingDirection);
				
				TableSchema.TableColumn colvarBarcode = new TableSchema.TableColumn(schema);
				colvarBarcode.ColumnName = "Barcode";
				colvarBarcode.DataType = DbType.Boolean;
				colvarBarcode.MaxLength = 0;
				colvarBarcode.AutoIncrement = false;
				colvarBarcode.IsNullable = true;
				colvarBarcode.IsPrimaryKey = false;
				colvarBarcode.IsForeignKey = false;
				colvarBarcode.IsReadOnly = false;
				colvarBarcode.DefaultSetting = @"";
				colvarBarcode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBarcode);
				
				TableSchema.TableColumn colvarBarcodeSize = new TableSchema.TableColumn(schema);
				colvarBarcodeSize.ColumnName = "BarcodeSize";
				colvarBarcodeSize.DataType = DbType.Int32;
				colvarBarcodeSize.MaxLength = 0;
				colvarBarcodeSize.AutoIncrement = false;
				colvarBarcodeSize.IsNullable = true;
				colvarBarcodeSize.IsPrimaryKey = false;
				colvarBarcodeSize.IsForeignKey = false;
				colvarBarcodeSize.IsReadOnly = false;
				colvarBarcodeSize.DefaultSetting = @"";
				colvarBarcodeSize.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBarcodeSize);
				
				TableSchema.TableColumn colvarBarcodeColor = new TableSchema.TableColumn(schema);
				colvarBarcodeColor.ColumnName = "BarcodeColor";
				colvarBarcodeColor.DataType = DbType.String;
				colvarBarcodeColor.MaxLength = 50;
				colvarBarcodeColor.AutoIncrement = false;
				colvarBarcodeColor.IsNullable = true;
				colvarBarcodeColor.IsPrimaryKey = false;
				colvarBarcodeColor.IsForeignKey = false;
				colvarBarcodeColor.IsReadOnly = false;
				colvarBarcodeColor.DefaultSetting = @"";
				colvarBarcodeColor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBarcodeColor);
				
				TableSchema.TableColumn colvarBarcodeNo = new TableSchema.TableColumn(schema);
				colvarBarcodeNo.ColumnName = "BarcodeNo";
				colvarBarcodeNo.DataType = DbType.AnsiString;
				colvarBarcodeNo.MaxLength = 50;
				colvarBarcodeNo.AutoIncrement = false;
				colvarBarcodeNo.IsNullable = true;
				colvarBarcodeNo.IsPrimaryKey = false;
				colvarBarcodeNo.IsForeignKey = false;
				colvarBarcodeNo.IsReadOnly = false;
				colvarBarcodeNo.DefaultSetting = @"";
				colvarBarcodeNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBarcodeNo);
				
				TableSchema.TableColumn colvarSupplyID = new TableSchema.TableColumn(schema);
				colvarSupplyID.ColumnName = "SupplyID";
				colvarSupplyID.DataType = DbType.Int16;
				colvarSupplyID.MaxLength = 0;
				colvarSupplyID.AutoIncrement = false;
				colvarSupplyID.IsNullable = true;
				colvarSupplyID.IsPrimaryKey = false;
				colvarSupplyID.IsForeignKey = true;
				colvarSupplyID.IsReadOnly = false;
				colvarSupplyID.DefaultSetting = @"";
				
					colvarSupplyID.ForeignKeyTableName = "tblSupply";
				schema.Columns.Add(colvarSupplyID);
				
				TableSchema.TableColumn colvarBwr = new TableSchema.TableColumn(schema);
				colvarBwr.ColumnName = "BWR";
				colvarBwr.DataType = DbType.Double;
				colvarBwr.MaxLength = 0;
				colvarBwr.AutoIncrement = false;
				colvarBwr.IsNullable = true;
				colvarBwr.IsPrimaryKey = false;
				colvarBwr.IsForeignKey = false;
				colvarBwr.IsReadOnly = false;
				colvarBwr.DefaultSetting = @"";
				colvarBwr.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBwr);
				
				TableSchema.TableColumn colvarTraps = new TableSchema.TableColumn(schema);
				colvarTraps.ColumnName = "Traps";
				colvarTraps.DataType = DbType.Boolean;
				colvarTraps.MaxLength = 0;
				colvarTraps.AutoIncrement = false;
				colvarTraps.IsNullable = true;
				colvarTraps.IsPrimaryKey = false;
				colvarTraps.IsForeignKey = false;
				colvarTraps.IsReadOnly = false;
				colvarTraps.DefaultSetting = @"";
				colvarTraps.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTraps);
				
				TableSchema.TableColumn colvarSize = new TableSchema.TableColumn(schema);
				colvarSize.ColumnName = "Size";
				colvarSize.DataType = DbType.Double;
				colvarSize.MaxLength = 0;
				colvarSize.AutoIncrement = false;
				colvarSize.IsNullable = true;
				colvarSize.IsPrimaryKey = false;
				colvarSize.IsForeignKey = false;
				colvarSize.IsReadOnly = false;
				colvarSize.DefaultSetting = @"";
				colvarSize.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSize);
				
				TableSchema.TableColumn colvarColorTarget = new TableSchema.TableColumn(schema);
				colvarColorTarget.ColumnName = "ColorTarget";
				colvarColorTarget.DataType = DbType.String;
				colvarColorTarget.MaxLength = 500;
				colvarColorTarget.AutoIncrement = false;
				colvarColorTarget.IsNullable = true;
				colvarColorTarget.IsPrimaryKey = false;
				colvarColorTarget.IsForeignKey = false;
				colvarColorTarget.IsReadOnly = false;
				colvarColorTarget.DefaultSetting = @"";
				colvarColorTarget.ForeignKeyTableName = "";
				schema.Columns.Add(colvarColorTarget);
				
				TableSchema.TableColumn colvarTypeOfCylinder = new TableSchema.TableColumn(schema);
				colvarTypeOfCylinder.ColumnName = "TypeOfCylinder";
				colvarTypeOfCylinder.DataType = DbType.AnsiString;
				colvarTypeOfCylinder.MaxLength = 50;
				colvarTypeOfCylinder.AutoIncrement = false;
				colvarTypeOfCylinder.IsNullable = true;
				colvarTypeOfCylinder.IsPrimaryKey = false;
				colvarTypeOfCylinder.IsForeignKey = false;
				colvarTypeOfCylinder.IsReadOnly = false;
				colvarTypeOfCylinder.DefaultSetting = @"";
				colvarTypeOfCylinder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTypeOfCylinder);
				
				TableSchema.TableColumn colvarPrinting = new TableSchema.TableColumn(schema);
				colvarPrinting.ColumnName = "Printing";
				colvarPrinting.DataType = DbType.AnsiString;
				colvarPrinting.MaxLength = 50;
				colvarPrinting.AutoIncrement = false;
				colvarPrinting.IsNullable = true;
				colvarPrinting.IsPrimaryKey = false;
				colvarPrinting.IsForeignKey = false;
				colvarPrinting.IsReadOnly = false;
				colvarPrinting.DefaultSetting = @"";
				colvarPrinting.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrinting);
				
				TableSchema.TableColumn colvarProofingMaterial = new TableSchema.TableColumn(schema);
				colvarProofingMaterial.ColumnName = "ProofingMaterial";
				colvarProofingMaterial.DataType = DbType.String;
				colvarProofingMaterial.MaxLength = 50;
				colvarProofingMaterial.AutoIncrement = false;
				colvarProofingMaterial.IsNullable = true;
				colvarProofingMaterial.IsPrimaryKey = false;
				colvarProofingMaterial.IsForeignKey = false;
				colvarProofingMaterial.IsReadOnly = false;
				colvarProofingMaterial.DefaultSetting = @"";
				colvarProofingMaterial.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProofingMaterial);
				
				TableSchema.TableColumn colvarNumberOfRepeatH = new TableSchema.TableColumn(schema);
				colvarNumberOfRepeatH.ColumnName = "NumberOfRepeatH";
				colvarNumberOfRepeatH.DataType = DbType.Int32;
				colvarNumberOfRepeatH.MaxLength = 0;
				colvarNumberOfRepeatH.AutoIncrement = false;
				colvarNumberOfRepeatH.IsNullable = true;
				colvarNumberOfRepeatH.IsPrimaryKey = false;
				colvarNumberOfRepeatH.IsForeignKey = false;
				colvarNumberOfRepeatH.IsReadOnly = false;
				colvarNumberOfRepeatH.DefaultSetting = @"";
				colvarNumberOfRepeatH.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNumberOfRepeatH);
				
				TableSchema.TableColumn colvarNumberOfRepeatV = new TableSchema.TableColumn(schema);
				colvarNumberOfRepeatV.ColumnName = "NumberOfRepeatV";
				colvarNumberOfRepeatV.DataType = DbType.Int32;
				colvarNumberOfRepeatV.MaxLength = 0;
				colvarNumberOfRepeatV.AutoIncrement = false;
				colvarNumberOfRepeatV.IsNullable = true;
				colvarNumberOfRepeatV.IsPrimaryKey = false;
				colvarNumberOfRepeatV.IsForeignKey = false;
				colvarNumberOfRepeatV.IsReadOnly = false;
				colvarNumberOfRepeatV.DefaultSetting = @"";
				colvarNumberOfRepeatV.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNumberOfRepeatV);
				
				TableSchema.TableColumn colvarSRRemark = new TableSchema.TableColumn(schema);
				colvarSRRemark.ColumnName = "SRRemark";
				colvarSRRemark.DataType = DbType.String;
				colvarSRRemark.MaxLength = 1000;
				colvarSRRemark.AutoIncrement = false;
				colvarSRRemark.IsNullable = true;
				colvarSRRemark.IsPrimaryKey = false;
				colvarSRRemark.IsForeignKey = false;
				colvarSRRemark.IsReadOnly = false;
				colvarSRRemark.DefaultSetting = @"";
				colvarSRRemark.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSRRemark);
				
				TableSchema.TableColumn colvarActualPrintingMaterial = new TableSchema.TableColumn(schema);
				colvarActualPrintingMaterial.ColumnName = "ActualPrintingMaterial";
				colvarActualPrintingMaterial.DataType = DbType.String;
				colvarActualPrintingMaterial.MaxLength = 100;
				colvarActualPrintingMaterial.AutoIncrement = false;
				colvarActualPrintingMaterial.IsNullable = true;
				colvarActualPrintingMaterial.IsPrimaryKey = false;
				colvarActualPrintingMaterial.IsForeignKey = false;
				colvarActualPrintingMaterial.IsReadOnly = false;
				colvarActualPrintingMaterial.DefaultSetting = @"";
				colvarActualPrintingMaterial.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActualPrintingMaterial);
				
				TableSchema.TableColumn colvarMaterialWidth = new TableSchema.TableColumn(schema);
				colvarMaterialWidth.ColumnName = "MaterialWidth";
				colvarMaterialWidth.DataType = DbType.String;
				colvarMaterialWidth.MaxLength = 100;
				colvarMaterialWidth.AutoIncrement = false;
				colvarMaterialWidth.IsNullable = true;
				colvarMaterialWidth.IsPrimaryKey = false;
				colvarMaterialWidth.IsForeignKey = false;
				colvarMaterialWidth.IsReadOnly = false;
				colvarMaterialWidth.DefaultSetting = @"";
				colvarMaterialWidth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaterialWidth);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("tblJobSheet",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("JobID")]
		[Bindable(true)]
		public int JobID 
		{
			get { return GetColumnValue<int>(Columns.JobID); }
			set { SetColumnValue(Columns.JobID, value); }
		}
		  
		[XmlAttribute("ReproOperator")]
		[Bindable(true)]
		public string ReproOperator 
		{
			get { return GetColumnValue<string>(Columns.ReproOperator); }
			set { SetColumnValue(Columns.ReproOperator, value); }
		}
		  
		[XmlAttribute("Circumference")]
		[Bindable(true)]
		public double Circumference 
		{
			get { return GetColumnValue<double>(Columns.Circumference); }
			set { SetColumnValue(Columns.Circumference, value); }
		}
		  
		[XmlAttribute("FaceWidth")]
		[Bindable(true)]
		public double FaceWidth 
		{
			get { return GetColumnValue<double>(Columns.FaceWidth); }
			set { SetColumnValue(Columns.FaceWidth, value); }
		}
		  
		[XmlAttribute("Diameter")]
		[Bindable(true)]
		public double Diameter 
		{
			get { return GetColumnValue<double>(Columns.Diameter); }
			set { SetColumnValue(Columns.Diameter, value); }
		}
		  
		[XmlAttribute("DiameterDiff")]
		[Bindable(true)]
		public double DiameterDiff 
		{
			get { return GetColumnValue<double>(Columns.DiameterDiff); }
			set { SetColumnValue(Columns.DiameterDiff, value); }
		}
		  
		[XmlAttribute("ReproDate")]
		[Bindable(true)]
		public DateTime? ReproDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ReproDate); }
			set { SetColumnValue(Columns.ReproDate, value); }
		}
		  
		[XmlAttribute("HasIrisProof")]
		[Bindable(true)]
		public bool? HasIrisProof 
		{
			get { return GetColumnValue<bool?>(Columns.HasIrisProof); }
			set { SetColumnValue(Columns.HasIrisProof, value); }
		}
		  
		[XmlAttribute("IrisProof")]
		[Bindable(true)]
		public int? IrisProof 
		{
			get { return GetColumnValue<int?>(Columns.IrisProof); }
			set { SetColumnValue(Columns.IrisProof, value); }
		}
		  
		[XmlAttribute("CylinderDate")]
		[Bindable(true)]
		public DateTime? CylinderDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CylinderDate); }
			set { SetColumnValue(Columns.CylinderDate, value); }
		}
		  
		[XmlAttribute("PreAppoval")]
		[Bindable(true)]
		public bool PreAppoval 
		{
			get { return GetColumnValue<bool>(Columns.PreAppoval); }
			set { SetColumnValue(Columns.PreAppoval, value); }
		}
		  
		[XmlAttribute("LeavingAPE")]
		[Bindable(true)]
		public bool LeavingAPE 
		{
			get { return GetColumnValue<bool>(Columns.LeavingAPE); }
			set { SetColumnValue(Columns.LeavingAPE, value); }
		}
		  
		[XmlAttribute("DeilveryNotes")]
		[Bindable(true)]
		public string DeilveryNotes 
		{
			get { return GetColumnValue<string>(Columns.DeilveryNotes); }
			set { SetColumnValue(Columns.DeilveryNotes, value); }
		}
		  
		[XmlAttribute("EyeMark")]
		[Bindable(true)]
		public bool? EyeMark 
		{
			get { return GetColumnValue<bool?>(Columns.EyeMark); }
			set { SetColumnValue(Columns.EyeMark, value); }
		}
		  
		[XmlAttribute("EMWidth")]
		[Bindable(true)]
		public int? EMWidth 
		{
			get { return GetColumnValue<int?>(Columns.EMWidth); }
			set { SetColumnValue(Columns.EMWidth, value); }
		}
		  
		[XmlAttribute("EMHeight")]
		[Bindable(true)]
		public int? EMHeight 
		{
			get { return GetColumnValue<int?>(Columns.EMHeight); }
			set { SetColumnValue(Columns.EMHeight, value); }
		}
		  
		[XmlAttribute("EMColor")]
		[Bindable(true)]
		public string EMColor 
		{
			get { return GetColumnValue<string>(Columns.EMColor); }
			set { SetColumnValue(Columns.EMColor, value); }
		}
		  
		[XmlAttribute("BackingID")]
		[Bindable(true)]
		public short? BackingID 
		{
			get { return GetColumnValue<short?>(Columns.BackingID); }
			set { SetColumnValue(Columns.BackingID, value); }
		}
		  
		[XmlAttribute("EMPonsition")]
		[Bindable(true)]
		public short? EMPonsition 
		{
			get { return GetColumnValue<short?>(Columns.EMPonsition); }
			set { SetColumnValue(Columns.EMPonsition, value); }
		}
		  
		[XmlAttribute("UNSizeV")]
		[Bindable(true)]
		public double? UNSizeV 
		{
			get { return GetColumnValue<double?>(Columns.UNSizeV); }
			set { SetColumnValue(Columns.UNSizeV, value); }
		}
		  
		[XmlAttribute("UNSizeH")]
		[Bindable(true)]
		public double? UNSizeH 
		{
			get { return GetColumnValue<double?>(Columns.UNSizeH); }
			set { SetColumnValue(Columns.UNSizeH, value); }
		}
		  
		[XmlAttribute("OpaqueInk")]
		[Bindable(true)]
		public bool OpaqueInk 
		{
			get { return GetColumnValue<bool>(Columns.OpaqueInk); }
			set { SetColumnValue(Columns.OpaqueInk, value); }
		}
		  
		[XmlAttribute("OpaqueInkRate")]
		[Bindable(true)]
		public int? OpaqueInkRate 
		{
			get { return GetColumnValue<int?>(Columns.OpaqueInkRate); }
			set { SetColumnValue(Columns.OpaqueInkRate, value); }
		}
		  
		[XmlAttribute("IsEndless")]
		[Bindable(true)]
		public bool? IsEndless 
		{
			get { return GetColumnValue<bool?>(Columns.IsEndless); }
			set { SetColumnValue(Columns.IsEndless, value); }
		}
		  
		[XmlAttribute("PrintingDirection")]
		[Bindable(true)]
		public string PrintingDirection 
		{
			get { return GetColumnValue<string>(Columns.PrintingDirection); }
			set { SetColumnValue(Columns.PrintingDirection, value); }
		}
		  
		[XmlAttribute("Barcode")]
		[Bindable(true)]
		public bool? Barcode 
		{
			get { return GetColumnValue<bool?>(Columns.Barcode); }
			set { SetColumnValue(Columns.Barcode, value); }
		}
		  
		[XmlAttribute("BarcodeSize")]
		[Bindable(true)]
		public int? BarcodeSize 
		{
			get { return GetColumnValue<int?>(Columns.BarcodeSize); }
			set { SetColumnValue(Columns.BarcodeSize, value); }
		}
		  
		[XmlAttribute("BarcodeColor")]
		[Bindable(true)]
		public string BarcodeColor 
		{
			get { return GetColumnValue<string>(Columns.BarcodeColor); }
			set { SetColumnValue(Columns.BarcodeColor, value); }
		}
		  
		[XmlAttribute("BarcodeNo")]
		[Bindable(true)]
		public string BarcodeNo 
		{
			get { return GetColumnValue<string>(Columns.BarcodeNo); }
			set { SetColumnValue(Columns.BarcodeNo, value); }
		}
		  
		[XmlAttribute("SupplyID")]
		[Bindable(true)]
		public short? SupplyID 
		{
			get { return GetColumnValue<short?>(Columns.SupplyID); }
			set { SetColumnValue(Columns.SupplyID, value); }
		}
		  
		[XmlAttribute("Bwr")]
		[Bindable(true)]
		public double? Bwr 
		{
			get { return GetColumnValue<double?>(Columns.Bwr); }
			set { SetColumnValue(Columns.Bwr, value); }
		}
		  
		[XmlAttribute("Traps")]
		[Bindable(true)]
		public bool? Traps 
		{
			get { return GetColumnValue<bool?>(Columns.Traps); }
			set { SetColumnValue(Columns.Traps, value); }
		}
		  
		[XmlAttribute("Size")]
		[Bindable(true)]
		public double? Size 
		{
			get { return GetColumnValue<double?>(Columns.Size); }
			set { SetColumnValue(Columns.Size, value); }
		}
		  
		[XmlAttribute("ColorTarget")]
		[Bindable(true)]
		public string ColorTarget 
		{
			get { return GetColumnValue<string>(Columns.ColorTarget); }
			set { SetColumnValue(Columns.ColorTarget, value); }
		}
		  
		[XmlAttribute("TypeOfCylinder")]
		[Bindable(true)]
		public string TypeOfCylinder 
		{
			get { return GetColumnValue<string>(Columns.TypeOfCylinder); }
			set { SetColumnValue(Columns.TypeOfCylinder, value); }
		}
		  
		[XmlAttribute("Printing")]
		[Bindable(true)]
		public string Printing 
		{
			get { return GetColumnValue<string>(Columns.Printing); }
			set { SetColumnValue(Columns.Printing, value); }
		}
		  
		[XmlAttribute("ProofingMaterial")]
		[Bindable(true)]
		public string ProofingMaterial 
		{
			get { return GetColumnValue<string>(Columns.ProofingMaterial); }
			set { SetColumnValue(Columns.ProofingMaterial, value); }
		}
		  
		[XmlAttribute("NumberOfRepeatH")]
		[Bindable(true)]
		public int? NumberOfRepeatH 
		{
			get { return GetColumnValue<int?>(Columns.NumberOfRepeatH); }
			set { SetColumnValue(Columns.NumberOfRepeatH, value); }
		}
		  
		[XmlAttribute("NumberOfRepeatV")]
		[Bindable(true)]
		public int? NumberOfRepeatV 
		{
			get { return GetColumnValue<int?>(Columns.NumberOfRepeatV); }
			set { SetColumnValue(Columns.NumberOfRepeatV, value); }
		}
		  
		[XmlAttribute("SRRemark")]
		[Bindable(true)]
		public string SRRemark 
		{
			get { return GetColumnValue<string>(Columns.SRRemark); }
			set { SetColumnValue(Columns.SRRemark, value); }
		}
		  
		[XmlAttribute("ActualPrintingMaterial")]
		[Bindable(true)]
		public string ActualPrintingMaterial 
		{
			get { return GetColumnValue<string>(Columns.ActualPrintingMaterial); }
			set { SetColumnValue(Columns.ActualPrintingMaterial, value); }
		}
		  
		[XmlAttribute("MaterialWidth")]
		[Bindable(true)]
		public string MaterialWidth 
		{
			get { return GetColumnValue<string>(Columns.MaterialWidth); }
			set { SetColumnValue(Columns.MaterialWidth, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblBacking ActiveRecord object related to this TblJobSheet
		/// 
		/// </summary>
		public SweetSoft.APEM.DataAccess.TblBacking TblBacking
		{
			get { return SweetSoft.APEM.DataAccess.TblBacking.FetchByID(this.BackingID); }
			set { SetColumnValue("BackingID", value.BackingID); }
		}
		
		
		/// <summary>
		/// Returns a TblJob ActiveRecord object related to this TblJobSheet
		/// 
		/// </summary>
		public SweetSoft.APEM.DataAccess.TblJob TblJob
		{
			get { return SweetSoft.APEM.DataAccess.TblJob.FetchByID(this.JobID); }
			set { SetColumnValue("JobID", value.JobID); }
		}
		
		
		/// <summary>
		/// Returns a TblSupply ActiveRecord object related to this TblJobSheet
		/// 
		/// </summary>
		public SweetSoft.APEM.DataAccess.TblSupply TblSupply
		{
			get { return SweetSoft.APEM.DataAccess.TblSupply.FetchByID(this.SupplyID); }
			set { SetColumnValue("SupplyID", value.SupplyID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varJobID,string varReproOperator,double varCircumference,double varFaceWidth,double varDiameter,double varDiameterDiff,DateTime? varReproDate,bool? varHasIrisProof,int? varIrisProof,DateTime? varCylinderDate,bool varPreAppoval,bool varLeavingAPE,string varDeilveryNotes,bool? varEyeMark,int? varEMWidth,int? varEMHeight,string varEMColor,short? varBackingID,short? varEMPonsition,double? varUNSizeV,double? varUNSizeH,bool varOpaqueInk,int? varOpaqueInkRate,bool? varIsEndless,string varPrintingDirection,bool? varBarcode,int? varBarcodeSize,string varBarcodeColor,string varBarcodeNo,short? varSupplyID,double? varBwr,bool? varTraps,double? varSize,string varColorTarget,string varTypeOfCylinder,string varPrinting,string varProofingMaterial,int? varNumberOfRepeatH,int? varNumberOfRepeatV,string varSRRemark,string varActualPrintingMaterial,string varMaterialWidth)
		{
			TblJobSheet item = new TblJobSheet();
			
			item.JobID = varJobID;
			
			item.ReproOperator = varReproOperator;
			
			item.Circumference = varCircumference;
			
			item.FaceWidth = varFaceWidth;
			
			item.Diameter = varDiameter;
			
			item.DiameterDiff = varDiameterDiff;
			
			item.ReproDate = varReproDate;
			
			item.HasIrisProof = varHasIrisProof;
			
			item.IrisProof = varIrisProof;
			
			item.CylinderDate = varCylinderDate;
			
			item.PreAppoval = varPreAppoval;
			
			item.LeavingAPE = varLeavingAPE;
			
			item.DeilveryNotes = varDeilveryNotes;
			
			item.EyeMark = varEyeMark;
			
			item.EMWidth = varEMWidth;
			
			item.EMHeight = varEMHeight;
			
			item.EMColor = varEMColor;
			
			item.BackingID = varBackingID;
			
			item.EMPonsition = varEMPonsition;
			
			item.UNSizeV = varUNSizeV;
			
			item.UNSizeH = varUNSizeH;
			
			item.OpaqueInk = varOpaqueInk;
			
			item.OpaqueInkRate = varOpaqueInkRate;
			
			item.IsEndless = varIsEndless;
			
			item.PrintingDirection = varPrintingDirection;
			
			item.Barcode = varBarcode;
			
			item.BarcodeSize = varBarcodeSize;
			
			item.BarcodeColor = varBarcodeColor;
			
			item.BarcodeNo = varBarcodeNo;
			
			item.SupplyID = varSupplyID;
			
			item.Bwr = varBwr;
			
			item.Traps = varTraps;
			
			item.Size = varSize;
			
			item.ColorTarget = varColorTarget;
			
			item.TypeOfCylinder = varTypeOfCylinder;
			
			item.Printing = varPrinting;
			
			item.ProofingMaterial = varProofingMaterial;
			
			item.NumberOfRepeatH = varNumberOfRepeatH;
			
			item.NumberOfRepeatV = varNumberOfRepeatV;
			
			item.SRRemark = varSRRemark;
			
			item.ActualPrintingMaterial = varActualPrintingMaterial;
			
			item.MaterialWidth = varMaterialWidth;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varJobID,string varReproOperator,double varCircumference,double varFaceWidth,double varDiameter,double varDiameterDiff,DateTime? varReproDate,bool? varHasIrisProof,int? varIrisProof,DateTime? varCylinderDate,bool varPreAppoval,bool varLeavingAPE,string varDeilveryNotes,bool? varEyeMark,int? varEMWidth,int? varEMHeight,string varEMColor,short? varBackingID,short? varEMPonsition,double? varUNSizeV,double? varUNSizeH,bool varOpaqueInk,int? varOpaqueInkRate,bool? varIsEndless,string varPrintingDirection,bool? varBarcode,int? varBarcodeSize,string varBarcodeColor,string varBarcodeNo,short? varSupplyID,double? varBwr,bool? varTraps,double? varSize,string varColorTarget,string varTypeOfCylinder,string varPrinting,string varProofingMaterial,int? varNumberOfRepeatH,int? varNumberOfRepeatV,string varSRRemark,string varActualPrintingMaterial,string varMaterialWidth)
		{
			TblJobSheet item = new TblJobSheet();
			
				item.JobID = varJobID;
			
				item.ReproOperator = varReproOperator;
			
				item.Circumference = varCircumference;
			
				item.FaceWidth = varFaceWidth;
			
				item.Diameter = varDiameter;
			
				item.DiameterDiff = varDiameterDiff;
			
				item.ReproDate = varReproDate;
			
				item.HasIrisProof = varHasIrisProof;
			
				item.IrisProof = varIrisProof;
			
				item.CylinderDate = varCylinderDate;
			
				item.PreAppoval = varPreAppoval;
			
				item.LeavingAPE = varLeavingAPE;
			
				item.DeilveryNotes = varDeilveryNotes;
			
				item.EyeMark = varEyeMark;
			
				item.EMWidth = varEMWidth;
			
				item.EMHeight = varEMHeight;
			
				item.EMColor = varEMColor;
			
				item.BackingID = varBackingID;
			
				item.EMPonsition = varEMPonsition;
			
				item.UNSizeV = varUNSizeV;
			
				item.UNSizeH = varUNSizeH;
			
				item.OpaqueInk = varOpaqueInk;
			
				item.OpaqueInkRate = varOpaqueInkRate;
			
				item.IsEndless = varIsEndless;
			
				item.PrintingDirection = varPrintingDirection;
			
				item.Barcode = varBarcode;
			
				item.BarcodeSize = varBarcodeSize;
			
				item.BarcodeColor = varBarcodeColor;
			
				item.BarcodeNo = varBarcodeNo;
			
				item.SupplyID = varSupplyID;
			
				item.Bwr = varBwr;
			
				item.Traps = varTraps;
			
				item.Size = varSize;
			
				item.ColorTarget = varColorTarget;
			
				item.TypeOfCylinder = varTypeOfCylinder;
			
				item.Printing = varPrinting;
			
				item.ProofingMaterial = varProofingMaterial;
			
				item.NumberOfRepeatH = varNumberOfRepeatH;
			
				item.NumberOfRepeatV = varNumberOfRepeatV;
			
				item.SRRemark = varSRRemark;
			
				item.ActualPrintingMaterial = varActualPrintingMaterial;
			
				item.MaterialWidth = varMaterialWidth;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn JobIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ReproOperatorColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn CircumferenceColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn FaceWidthColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn DiameterColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn DiameterDiffColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ReproDateColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn HasIrisProofColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn IrisProofColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn CylinderDateColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn PreAppovalColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn LeavingAPEColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn DeilveryNotesColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn EyeMarkColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn EMWidthColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn EMHeightColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn EMColorColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn BackingIDColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn EMPonsitionColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn UNSizeVColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn UNSizeHColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn OpaqueInkColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn OpaqueInkRateColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn IsEndlessColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn PrintingDirectionColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn BarcodeColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn BarcodeSizeColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn BarcodeColorColumn
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        public static TableSchema.TableColumn BarcodeNoColumn
        {
            get { return Schema.Columns[28]; }
        }
        
        
        
        public static TableSchema.TableColumn SupplyIDColumn
        {
            get { return Schema.Columns[29]; }
        }
        
        
        
        public static TableSchema.TableColumn BwrColumn
        {
            get { return Schema.Columns[30]; }
        }
        
        
        
        public static TableSchema.TableColumn TrapsColumn
        {
            get { return Schema.Columns[31]; }
        }
        
        
        
        public static TableSchema.TableColumn SizeColumn
        {
            get { return Schema.Columns[32]; }
        }
        
        
        
        public static TableSchema.TableColumn ColorTargetColumn
        {
            get { return Schema.Columns[33]; }
        }
        
        
        
        public static TableSchema.TableColumn TypeOfCylinderColumn
        {
            get { return Schema.Columns[34]; }
        }
        
        
        
        public static TableSchema.TableColumn PrintingColumn
        {
            get { return Schema.Columns[35]; }
        }
        
        
        
        public static TableSchema.TableColumn ProofingMaterialColumn
        {
            get { return Schema.Columns[36]; }
        }
        
        
        
        public static TableSchema.TableColumn NumberOfRepeatHColumn
        {
            get { return Schema.Columns[37]; }
        }
        
        
        
        public static TableSchema.TableColumn NumberOfRepeatVColumn
        {
            get { return Schema.Columns[38]; }
        }
        
        
        
        public static TableSchema.TableColumn SRRemarkColumn
        {
            get { return Schema.Columns[39]; }
        }
        
        
        
        public static TableSchema.TableColumn ActualPrintingMaterialColumn
        {
            get { return Schema.Columns[40]; }
        }
        
        
        
        public static TableSchema.TableColumn MaterialWidthColumn
        {
            get { return Schema.Columns[41]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string JobID = @"JobID";
			 public static string ReproOperator = @"ReproOperator";
			 public static string Circumference = @"Circumference";
			 public static string FaceWidth = @"FaceWidth";
			 public static string Diameter = @"Diameter";
			 public static string DiameterDiff = @"DiameterDiff";
			 public static string ReproDate = @"ReproDate";
			 public static string HasIrisProof = @"HasIrisProof";
			 public static string IrisProof = @"IrisProof";
			 public static string CylinderDate = @"CylinderDate";
			 public static string PreAppoval = @"PreAppoval";
			 public static string LeavingAPE = @"LeavingAPE";
			 public static string DeilveryNotes = @"DeilveryNotes";
			 public static string EyeMark = @"EyeMark";
			 public static string EMWidth = @"EMWidth";
			 public static string EMHeight = @"EMHeight";
			 public static string EMColor = @"EMColor";
			 public static string BackingID = @"BackingID";
			 public static string EMPonsition = @"EMPonsition";
			 public static string UNSizeV = @"UNSizeV";
			 public static string UNSizeH = @"UNSizeH";
			 public static string OpaqueInk = @"OpaqueInk";
			 public static string OpaqueInkRate = @"OpaqueInkRate";
			 public static string IsEndless = @"IsEndless";
			 public static string PrintingDirection = @"PrintingDirection";
			 public static string Barcode = @"Barcode";
			 public static string BarcodeSize = @"BarcodeSize";
			 public static string BarcodeColor = @"BarcodeColor";
			 public static string BarcodeNo = @"BarcodeNo";
			 public static string SupplyID = @"SupplyID";
			 public static string Bwr = @"BWR";
			 public static string Traps = @"Traps";
			 public static string Size = @"Size";
			 public static string ColorTarget = @"ColorTarget";
			 public static string TypeOfCylinder = @"TypeOfCylinder";
			 public static string Printing = @"Printing";
			 public static string ProofingMaterial = @"ProofingMaterial";
			 public static string NumberOfRepeatH = @"NumberOfRepeatH";
			 public static string NumberOfRepeatV = @"NumberOfRepeatV";
			 public static string SRRemark = @"SRRemark";
			 public static string ActualPrintingMaterial = @"ActualPrintingMaterial";
			 public static string MaterialWidth = @"MaterialWidth";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
