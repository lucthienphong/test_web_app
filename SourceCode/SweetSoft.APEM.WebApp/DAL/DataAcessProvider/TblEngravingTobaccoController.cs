using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
    /// <summary>
    /// Controller class for tblEngravingTobacco
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TblEngravingTobaccoController
    {
        // Preload our schema..
        TblEngravingTobacco thisSchemaLoad = new TblEngravingTobacco();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TblEngravingTobaccoCollection FetchAll()
        {
            TblEngravingTobaccoCollection coll = new TblEngravingTobaccoCollection();
            Query qry = new Query(TblEngravingTobacco.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblEngravingTobaccoCollection FetchByID(object EngravingID)
        {
            TblEngravingTobaccoCollection coll = new TblEngravingTobaccoCollection().Where("EngravingID", EngravingID).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblEngravingTobaccoCollection FetchByQuery(Query qry)
        {
            TblEngravingTobaccoCollection coll = new TblEngravingTobaccoCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object EngravingID)
        {
            return (TblEngravingTobacco.Delete(EngravingID) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object EngravingID)
        {
            return (TblEngravingTobacco.Destroy(EngravingID) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(int CylinderID,int Sequence,int JobID,int? Stylus,string Screen,byte? MasterScreen,string Angle,string Elongation,string Distotion,string Resolution,int? Hexagonal,byte? ImageSmoothness,string UnsharpMasking,string Antialiasing,string LineworkWidening,string EngravingStart,string EngravingWidth,int? CellShape,int? Gradation,string Gamma,byte? LaserA,byte? LaserB,string CellWidth,string ChannelWidth,string CellDepth,string EngravingTime,string Beam,string Threshold,string CheckedBy,DateTime? CheckedOn,byte IsCopy,string Color)
	    {
		    TblEngravingTobacco item = new TblEngravingTobacco();
		    
            item.CylinderID = CylinderID;
            
            item.Sequence = Sequence;
            
            item.JobID = JobID;
            
            item.Stylus = Stylus;
            
            item.Screen = Screen;
            
            item.MasterScreen = MasterScreen;
            
            item.Angle = Angle;
            
            item.Elongation = Elongation;
            
            item.Distotion = Distotion;
            
            item.Resolution = Resolution;
            
            item.Hexagonal = Hexagonal;
            
            item.ImageSmoothness = ImageSmoothness;
            
            item.UnsharpMasking = UnsharpMasking;
            
            item.Antialiasing = Antialiasing;
            
            item.LineworkWidening = LineworkWidening;
            
            item.EngravingStart = EngravingStart;
            
            item.EngravingWidth = EngravingWidth;
            
            item.CellShape = CellShape;
            
            item.Gradation = Gradation;
            
            item.Gamma = Gamma;
            
            item.LaserA = LaserA;
            
            item.LaserB = LaserB;
            
            item.CellWidth = CellWidth;
            
            item.ChannelWidth = ChannelWidth;
            
            item.CellDepth = CellDepth;
            
            item.EngravingTime = EngravingTime;
            
            item.Beam = Beam;
            
            item.Threshold = Threshold;
            
            item.CheckedBy = CheckedBy;
            
            item.CheckedOn = CheckedOn;
            
            item.IsCopy = IsCopy;
            
            item.Color = Color;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int EngravingID,int CylinderID,int Sequence,int JobID,int? Stylus,string Screen,byte? MasterScreen,string Angle,string Elongation,string Distotion,string Resolution,int? Hexagonal,byte? ImageSmoothness,string UnsharpMasking,string Antialiasing,string LineworkWidening,string EngravingStart,string EngravingWidth,int? CellShape,int? Gradation,string Gamma,byte? LaserA,byte? LaserB,string CellWidth,string ChannelWidth,string CellDepth,string EngravingTime,string Beam,string Threshold,string CheckedBy,DateTime? CheckedOn,byte IsCopy,string Color)
	    {
		    TblEngravingTobacco item = new TblEngravingTobacco();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.EngravingID = EngravingID;
				
			item.CylinderID = CylinderID;
				
			item.Sequence = Sequence;
				
			item.JobID = JobID;
				
			item.Stylus = Stylus;
				
			item.Screen = Screen;
				
			item.MasterScreen = MasterScreen;
				
			item.Angle = Angle;
				
			item.Elongation = Elongation;
				
			item.Distotion = Distotion;
				
			item.Resolution = Resolution;
				
			item.Hexagonal = Hexagonal;
				
			item.ImageSmoothness = ImageSmoothness;
				
			item.UnsharpMasking = UnsharpMasking;
				
			item.Antialiasing = Antialiasing;
				
			item.LineworkWidening = LineworkWidening;
				
			item.EngravingStart = EngravingStart;
				
			item.EngravingWidth = EngravingWidth;
				
			item.CellShape = CellShape;
				
			item.Gradation = Gradation;
				
			item.Gamma = Gamma;
				
			item.LaserA = LaserA;
				
			item.LaserB = LaserB;
				
			item.CellWidth = CellWidth;
				
			item.ChannelWidth = ChannelWidth;
				
			item.CellDepth = CellDepth;
				
			item.EngravingTime = EngravingTime;
				
			item.Beam = Beam;
				
			item.Threshold = Threshold;
				
			item.CheckedBy = CheckedBy;
				
			item.CheckedOn = CheckedOn;
				
			item.IsCopy = IsCopy;
				
			item.Color = Color;
				
	        item.Save(UserName);
	    }
    }
}
