using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblRole class.
	/// </summary>
    [Serializable]
	public partial class TblRoleCollection : ActiveList<TblRole, TblRoleCollection>
	{	   
		public TblRoleCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblRoleCollection</returns>
		public TblRoleCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblRole o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblRole table.
	/// </summary>
	[Serializable]
	public partial class TblRole : ActiveRecord<TblRole>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblRole()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblRole(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblRole(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblRole(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblRole", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarRoleID = new TableSchema.TableColumn(schema);
				colvarRoleID.ColumnName = "RoleID";
				colvarRoleID.DataType = DbType.Int32;
				colvarRoleID.MaxLength = 0;
				colvarRoleID.AutoIncrement = true;
				colvarRoleID.IsNullable = false;
				colvarRoleID.IsPrimaryKey = true;
				colvarRoleID.IsForeignKey = false;
				colvarRoleID.IsReadOnly = false;
				colvarRoleID.DefaultSetting = @"";
				colvarRoleID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRoleID);
				
				TableSchema.TableColumn colvarRoleName = new TableSchema.TableColumn(schema);
				colvarRoleName.ColumnName = "RoleName";
				colvarRoleName.DataType = DbType.String;
				colvarRoleName.MaxLength = 250;
				colvarRoleName.AutoIncrement = false;
				colvarRoleName.IsNullable = false;
				colvarRoleName.IsPrimaryKey = false;
				colvarRoleName.IsForeignKey = false;
				colvarRoleName.IsReadOnly = false;
				colvarRoleName.DefaultSetting = @"";
				colvarRoleName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRoleName);
				
				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.String;
				colvarDescription.MaxLength = 500;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);
				
				TableSchema.TableColumn colvarIsObsolete = new TableSchema.TableColumn(schema);
				colvarIsObsolete.ColumnName = "IsObsolete";
				colvarIsObsolete.DataType = DbType.Boolean;
				colvarIsObsolete.MaxLength = 0;
				colvarIsObsolete.AutoIncrement = false;
				colvarIsObsolete.IsNullable = false;
				colvarIsObsolete.IsPrimaryKey = false;
				colvarIsObsolete.IsForeignKey = false;
				colvarIsObsolete.IsReadOnly = false;
				colvarIsObsolete.DefaultSetting = @"";
				colvarIsObsolete.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsObsolete);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("tblRole",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("RoleID")]
		[Bindable(true)]
		public int RoleID 
		{
			get { return GetColumnValue<int>(Columns.RoleID); }
			set { SetColumnValue(Columns.RoleID, value); }
		}
		  
		[XmlAttribute("RoleName")]
		[Bindable(true)]
		public string RoleName 
		{
			get { return GetColumnValue<string>(Columns.RoleName); }
			set { SetColumnValue(Columns.RoleName, value); }
		}
		  
		[XmlAttribute("Description")]
		[Bindable(true)]
		public string Description 
		{
			get { return GetColumnValue<string>(Columns.Description); }
			set { SetColumnValue(Columns.Description, value); }
		}
		  
		[XmlAttribute("IsObsolete")]
		[Bindable(true)]
		public bool IsObsolete 
		{
			get { return GetColumnValue<bool>(Columns.IsObsolete); }
			set { SetColumnValue(Columns.IsObsolete, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		private SweetSoft.APEM.DataAccess.TblRolePermissionCollection colTblRolePermissionRecords;
		public SweetSoft.APEM.DataAccess.TblRolePermissionCollection TblRolePermissionRecords()
		{
			if(colTblRolePermissionRecords == null)
			{
				colTblRolePermissionRecords = new SweetSoft.APEM.DataAccess.TblRolePermissionCollection().Where(TblRolePermission.Columns.RoleID, RoleID).Load();
				colTblRolePermissionRecords.ListChanged += new ListChangedEventHandler(colTblRolePermissionRecords_ListChanged);
			}
			return colTblRolePermissionRecords;
		}
				
		void colTblRolePermissionRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colTblRolePermissionRecords[e.NewIndex].RoleID = RoleID;
            }
		}
		private SweetSoft.APEM.DataAccess.TblUserRoleCollection colTblUserRoleRecords;
		public SweetSoft.APEM.DataAccess.TblUserRoleCollection TblUserRoleRecords()
		{
			if(colTblUserRoleRecords == null)
			{
				colTblUserRoleRecords = new SweetSoft.APEM.DataAccess.TblUserRoleCollection().Where(TblUserRole.Columns.RoleID, RoleID).Load();
				colTblUserRoleRecords.ListChanged += new ListChangedEventHandler(colTblUserRoleRecords_ListChanged);
			}
			return colTblUserRoleRecords;
		}
				
		void colTblUserRoleRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colTblUserRoleRecords[e.NewIndex].RoleID = RoleID;
            }
		}
		#endregion
		
			
		
		//no foreign key tables defined (0)
		
		
		
		#region Many To Many Helpers
		
		 
		public SweetSoft.APEM.DataAccess.TblUserCollection GetTblUserCollection() { return TblRole.GetTblUserCollection(this.RoleID); }
		public static SweetSoft.APEM.DataAccess.TblUserCollection GetTblUserCollection(int varRoleID)
		{
		    SubSonic.QueryCommand cmd = new SubSonic.QueryCommand("SELECT * FROM [dbo].[tblUser] INNER JOIN [tblUserRole] ON [tblUser].[UserID] = [tblUserRole].[UserID] WHERE [tblUserRole].[RoleID] = @RoleID", TblRole.Schema.Provider.Name);
			cmd.AddParameter("@RoleID", varRoleID, DbType.Int32);
			IDataReader rdr = SubSonic.DataService.GetReader(cmd);
			TblUserCollection coll = new TblUserCollection();
			coll.LoadAndCloseReader(rdr);
			return coll;
		}
		
		public static void SaveTblUserMap(int varRoleID, TblUserCollection items)
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			QueryCommand cmdDel = new QueryCommand("DELETE FROM [tblUserRole] WHERE [tblUserRole].[RoleID] = @RoleID", TblRole.Schema.Provider.Name);
			cmdDel.AddParameter("@RoleID", varRoleID, DbType.Int32);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (TblUser item in items)
			{
				TblUserRole varTblUserRole = new TblUserRole();
				varTblUserRole.SetColumnValue("RoleID", varRoleID);
				varTblUserRole.SetColumnValue("UserID", item.GetPrimaryKeyValue());
				varTblUserRole.Save();
			}
		}
		public static void SaveTblUserMap(int varRoleID, System.Web.UI.WebControls.ListItemCollection itemList) 
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			 QueryCommand cmdDel = new QueryCommand("DELETE FROM [tblUserRole] WHERE [tblUserRole].[RoleID] = @RoleID", TblRole.Schema.Provider.Name);
			cmdDel.AddParameter("@RoleID", varRoleID, DbType.Int32);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (System.Web.UI.WebControls.ListItem l in itemList) 
			{
				if (l.Selected) 
				{
					TblUserRole varTblUserRole = new TblUserRole();
					varTblUserRole.SetColumnValue("RoleID", varRoleID);
					varTblUserRole.SetColumnValue("UserID", l.Value);
					varTblUserRole.Save();
				}
			}
		}
		public static void SaveTblUserMap(int varRoleID , int[] itemList) 
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			 QueryCommand cmdDel = new QueryCommand("DELETE FROM [tblUserRole] WHERE [tblUserRole].[RoleID] = @RoleID", TblRole.Schema.Provider.Name);
			cmdDel.AddParameter("@RoleID", varRoleID, DbType.Int32);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (int item in itemList) 
			{
				TblUserRole varTblUserRole = new TblUserRole();
				varTblUserRole.SetColumnValue("RoleID", varRoleID);
				varTblUserRole.SetColumnValue("UserID", item);
				varTblUserRole.Save();
			}
		}
		
		public static void DeleteTblUserMap(int varRoleID) 
		{
			QueryCommand cmdDel = new QueryCommand("DELETE FROM [tblUserRole] WHERE [tblUserRole].[RoleID] = @RoleID", TblRole.Schema.Provider.Name);
			cmdDel.AddParameter("@RoleID", varRoleID, DbType.Int32);
			DataService.ExecuteQuery(cmdDel);
		}
		
		 
		public SweetSoft.APEM.DataAccess.TblFunctionCollection GetTblFunctionCollection() { return TblRole.GetTblFunctionCollection(this.RoleID); }
		public static SweetSoft.APEM.DataAccess.TblFunctionCollection GetTblFunctionCollection(int varRoleID)
		{
		    SubSonic.QueryCommand cmd = new SubSonic.QueryCommand("SELECT * FROM [dbo].[tblFunction] INNER JOIN [tblRolePermission] ON [tblFunction].[FunctionID] = [tblRolePermission].[FunctionID] WHERE [tblRolePermission].[RoleID] = @RoleID", TblRole.Schema.Provider.Name);
			cmd.AddParameter("@RoleID", varRoleID, DbType.Int32);
			IDataReader rdr = SubSonic.DataService.GetReader(cmd);
			TblFunctionCollection coll = new TblFunctionCollection();
			coll.LoadAndCloseReader(rdr);
			return coll;
		}
		
		public static void SaveTblFunctionMap(int varRoleID, TblFunctionCollection items)
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			QueryCommand cmdDel = new QueryCommand("DELETE FROM [tblRolePermission] WHERE [tblRolePermission].[RoleID] = @RoleID", TblRole.Schema.Provider.Name);
			cmdDel.AddParameter("@RoleID", varRoleID, DbType.Int32);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (TblFunction item in items)
			{
				TblRolePermission varTblRolePermission = new TblRolePermission();
				varTblRolePermission.SetColumnValue("RoleID", varRoleID);
				varTblRolePermission.SetColumnValue("FunctionID", item.GetPrimaryKeyValue());
				varTblRolePermission.Save();
			}
		}
		public static void SaveTblFunctionMap(int varRoleID, System.Web.UI.WebControls.ListItemCollection itemList) 
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			 QueryCommand cmdDel = new QueryCommand("DELETE FROM [tblRolePermission] WHERE [tblRolePermission].[RoleID] = @RoleID", TblRole.Schema.Provider.Name);
			cmdDel.AddParameter("@RoleID", varRoleID, DbType.Int32);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (System.Web.UI.WebControls.ListItem l in itemList) 
			{
				if (l.Selected) 
				{
					TblRolePermission varTblRolePermission = new TblRolePermission();
					varTblRolePermission.SetColumnValue("RoleID", varRoleID);
					varTblRolePermission.SetColumnValue("FunctionID", l.Value);
					varTblRolePermission.Save();
				}
			}
		}
		public static void SaveTblFunctionMap(int varRoleID , string[] itemList) 
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			 QueryCommand cmdDel = new QueryCommand("DELETE FROM [tblRolePermission] WHERE [tblRolePermission].[RoleID] = @RoleID", TblRole.Schema.Provider.Name);
			cmdDel.AddParameter("@RoleID", varRoleID, DbType.Int32);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (string item in itemList) 
			{
				TblRolePermission varTblRolePermission = new TblRolePermission();
				varTblRolePermission.SetColumnValue("RoleID", varRoleID);
				varTblRolePermission.SetColumnValue("FunctionID", item);
				varTblRolePermission.Save();
			}
		}
		
		public static void DeleteTblFunctionMap(int varRoleID) 
		{
			QueryCommand cmdDel = new QueryCommand("DELETE FROM [tblRolePermission] WHERE [tblRolePermission].[RoleID] = @RoleID", TblRole.Schema.Provider.Name);
			cmdDel.AddParameter("@RoleID", varRoleID, DbType.Int32);
			DataService.ExecuteQuery(cmdDel);
		}
		
		#endregion
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varRoleName,string varDescription,bool varIsObsolete)
		{
			TblRole item = new TblRole();
			
			item.RoleName = varRoleName;
			
			item.Description = varDescription;
			
			item.IsObsolete = varIsObsolete;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varRoleID,string varRoleName,string varDescription,bool varIsObsolete)
		{
			TblRole item = new TblRole();
			
				item.RoleID = varRoleID;
			
				item.RoleName = varRoleName;
			
				item.Description = varDescription;
			
				item.IsObsolete = varIsObsolete;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn RoleIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn RoleNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn IsObsoleteColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string RoleID = @"RoleID";
			 public static string RoleName = @"RoleName";
			 public static string Description = @"Description";
			 public static string IsObsolete = @"IsObsolete";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
                if (colTblRolePermissionRecords != null)
                {
                    foreach (SweetSoft.APEM.DataAccess.TblRolePermission item in colTblRolePermissionRecords)
                    {
                        if (item.RoleID != RoleID)
                        {
                            item.RoleID = RoleID;
                        }
                    }
               }
		
                if (colTblUserRoleRecords != null)
                {
                    foreach (SweetSoft.APEM.DataAccess.TblUserRole item in colTblUserRoleRecords)
                    {
                        if (item.RoleID != RoleID)
                        {
                            item.RoleID = RoleID;
                        }
                    }
               }
		}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
                if (colTblRolePermissionRecords != null)
                {
                    colTblRolePermissionRecords.SaveAll();
               }
		
                if (colTblUserRoleRecords != null)
                {
                    colTblUserRoleRecords.SaveAll();
               }
		}
        #endregion
	}
}
