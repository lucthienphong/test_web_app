using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblCylinder class.
	/// </summary>
    [Serializable]
	public partial class TblCylinderCollection : ActiveList<TblCylinder, TblCylinderCollection>
	{	   
		public TblCylinderCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblCylinderCollection</returns>
		public TblCylinderCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblCylinder o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblCylinder table.
	/// </summary>
	[Serializable]
	public partial class TblCylinder : ActiveRecord<TblCylinder>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblCylinder()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblCylinder(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblCylinder(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblCylinder(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblCylinder", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarCylinderID = new TableSchema.TableColumn(schema);
				colvarCylinderID.ColumnName = "CylinderID";
				colvarCylinderID.DataType = DbType.Int32;
				colvarCylinderID.MaxLength = 0;
				colvarCylinderID.AutoIncrement = true;
				colvarCylinderID.IsNullable = false;
				colvarCylinderID.IsPrimaryKey = true;
				colvarCylinderID.IsForeignKey = false;
				colvarCylinderID.IsReadOnly = false;
				colvarCylinderID.DefaultSetting = @"";
				colvarCylinderID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCylinderID);
				
				TableSchema.TableColumn colvarSequence = new TableSchema.TableColumn(schema);
				colvarSequence.ColumnName = "Sequence";
				colvarSequence.DataType = DbType.Int32;
				colvarSequence.MaxLength = 0;
				colvarSequence.AutoIncrement = false;
				colvarSequence.IsNullable = false;
				colvarSequence.IsPrimaryKey = false;
				colvarSequence.IsForeignKey = false;
				colvarSequence.IsReadOnly = false;
				colvarSequence.DefaultSetting = @"";
				colvarSequence.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSequence);
				
				TableSchema.TableColumn colvarCylinderNo = new TableSchema.TableColumn(schema);
				colvarCylinderNo.ColumnName = "CylinderNo";
				colvarCylinderNo.DataType = DbType.String;
				colvarCylinderNo.MaxLength = 50;
				colvarCylinderNo.AutoIncrement = false;
				colvarCylinderNo.IsNullable = true;
				colvarCylinderNo.IsPrimaryKey = false;
				colvarCylinderNo.IsForeignKey = false;
				colvarCylinderNo.IsReadOnly = false;
				colvarCylinderNo.DefaultSetting = @"";
				colvarCylinderNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCylinderNo);
				
				TableSchema.TableColumn colvarCusCylinderID = new TableSchema.TableColumn(schema);
				colvarCusCylinderID.ColumnName = "CusCylinderID";
				colvarCusCylinderID.DataType = DbType.String;
				colvarCusCylinderID.MaxLength = 50;
				colvarCusCylinderID.AutoIncrement = false;
				colvarCusCylinderID.IsNullable = true;
				colvarCusCylinderID.IsPrimaryKey = false;
				colvarCusCylinderID.IsForeignKey = false;
				colvarCusCylinderID.IsReadOnly = false;
				colvarCusCylinderID.DefaultSetting = @"";
				colvarCusCylinderID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCusCylinderID);
				
				TableSchema.TableColumn colvarCusSteelBaseID = new TableSchema.TableColumn(schema);
				colvarCusSteelBaseID.ColumnName = "CusSteelBaseID";
				colvarCusSteelBaseID.DataType = DbType.String;
				colvarCusSteelBaseID.MaxLength = 50;
				colvarCusSteelBaseID.AutoIncrement = false;
				colvarCusSteelBaseID.IsNullable = true;
				colvarCusSteelBaseID.IsPrimaryKey = false;
				colvarCusSteelBaseID.IsForeignKey = false;
				colvarCusSteelBaseID.IsReadOnly = false;
				colvarCusSteelBaseID.DefaultSetting = @"";
				colvarCusSteelBaseID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCusSteelBaseID);
				
				TableSchema.TableColumn colvarCylinderBarcode = new TableSchema.TableColumn(schema);
				colvarCylinderBarcode.ColumnName = "CylinderBarcode";
				colvarCylinderBarcode.DataType = DbType.String;
				colvarCylinderBarcode.MaxLength = 50;
				colvarCylinderBarcode.AutoIncrement = false;
				colvarCylinderBarcode.IsNullable = true;
				colvarCylinderBarcode.IsPrimaryKey = false;
				colvarCylinderBarcode.IsForeignKey = false;
				colvarCylinderBarcode.IsReadOnly = false;
				colvarCylinderBarcode.DefaultSetting = @"";
				colvarCylinderBarcode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCylinderBarcode);
				
				TableSchema.TableColumn colvarSteelBase = new TableSchema.TableColumn(schema);
				colvarSteelBase.ColumnName = "SteelBase";
				colvarSteelBase.DataType = DbType.Byte;
				colvarSteelBase.MaxLength = 0;
				colvarSteelBase.AutoIncrement = false;
				colvarSteelBase.IsNullable = false;
				colvarSteelBase.IsPrimaryKey = false;
				colvarSteelBase.IsForeignKey = false;
				colvarSteelBase.IsReadOnly = false;
				colvarSteelBase.DefaultSetting = @"";
				colvarSteelBase.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSteelBase);
				
				TableSchema.TableColumn colvarColor = new TableSchema.TableColumn(schema);
				colvarColor.ColumnName = "Color";
				colvarColor.DataType = DbType.String;
				colvarColor.MaxLength = 50;
				colvarColor.AutoIncrement = false;
				colvarColor.IsNullable = false;
				colvarColor.IsPrimaryKey = false;
				colvarColor.IsForeignKey = false;
				colvarColor.IsReadOnly = false;
				colvarColor.DefaultSetting = @"";
				colvarColor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarColor);
				
				TableSchema.TableColumn colvarProtocol = new TableSchema.TableColumn(schema);
				colvarProtocol.ColumnName = "Protocol";
				colvarProtocol.DataType = DbType.String;
				colvarProtocol.MaxLength = 50;
				colvarProtocol.AutoIncrement = false;
				colvarProtocol.IsNullable = true;
				colvarProtocol.IsPrimaryKey = false;
				colvarProtocol.IsForeignKey = false;
				colvarProtocol.IsReadOnly = false;
				colvarProtocol.DefaultSetting = @"";
				colvarProtocol.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProtocol);
				
				TableSchema.TableColumn colvarProductTypeID = new TableSchema.TableColumn(schema);
				colvarProductTypeID.ColumnName = "ProductTypeID";
				colvarProductTypeID.DataType = DbType.Int32;
				colvarProductTypeID.MaxLength = 0;
				colvarProductTypeID.AutoIncrement = false;
				colvarProductTypeID.IsNullable = true;
				colvarProductTypeID.IsPrimaryKey = false;
				colvarProductTypeID.IsForeignKey = false;
				colvarProductTypeID.IsReadOnly = false;
				colvarProductTypeID.DefaultSetting = @"";
				colvarProductTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductTypeID);
				
				TableSchema.TableColumn colvarProcessTypeID = new TableSchema.TableColumn(schema);
				colvarProcessTypeID.ColumnName = "ProcessTypeID";
				colvarProcessTypeID.DataType = DbType.Int32;
				colvarProcessTypeID.MaxLength = 0;
				colvarProcessTypeID.AutoIncrement = false;
				colvarProcessTypeID.IsNullable = true;
				colvarProcessTypeID.IsPrimaryKey = false;
				colvarProcessTypeID.IsForeignKey = false;
				colvarProcessTypeID.IsReadOnly = false;
				colvarProcessTypeID.DefaultSetting = @"";
				colvarProcessTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProcessTypeID);
				
				TableSchema.TableColumn colvarPricingID = new TableSchema.TableColumn(schema);
				colvarPricingID.ColumnName = "PricingID";
				colvarPricingID.DataType = DbType.Int16;
				colvarPricingID.MaxLength = 0;
				colvarPricingID.AutoIncrement = false;
				colvarPricingID.IsNullable = false;
				colvarPricingID.IsPrimaryKey = false;
				colvarPricingID.IsForeignKey = false;
				colvarPricingID.IsReadOnly = false;
				colvarPricingID.DefaultSetting = @"";
				colvarPricingID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPricingID);
				
				TableSchema.TableColumn colvarCylinderStatusID = new TableSchema.TableColumn(schema);
				colvarCylinderStatusID.ColumnName = "CylinderStatusID";
				colvarCylinderStatusID.DataType = DbType.Int16;
				colvarCylinderStatusID.MaxLength = 0;
				colvarCylinderStatusID.AutoIncrement = false;
				colvarCylinderStatusID.IsNullable = true;
				colvarCylinderStatusID.IsPrimaryKey = false;
				colvarCylinderStatusID.IsForeignKey = false;
				colvarCylinderStatusID.IsReadOnly = false;
				colvarCylinderStatusID.DefaultSetting = @"";
				colvarCylinderStatusID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCylinderStatusID);
				
				TableSchema.TableColumn colvarCircumference = new TableSchema.TableColumn(schema);
				colvarCircumference.ColumnName = "Circumference";
				colvarCircumference.DataType = DbType.Double;
				colvarCircumference.MaxLength = 0;
				colvarCircumference.AutoIncrement = false;
				colvarCircumference.IsNullable = false;
				colvarCircumference.IsPrimaryKey = false;
				colvarCircumference.IsForeignKey = false;
				colvarCircumference.IsReadOnly = false;
				colvarCircumference.DefaultSetting = @"";
				colvarCircumference.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCircumference);
				
				TableSchema.TableColumn colvarFaceWidth = new TableSchema.TableColumn(schema);
				colvarFaceWidth.ColumnName = "FaceWidth";
				colvarFaceWidth.DataType = DbType.Double;
				colvarFaceWidth.MaxLength = 0;
				colvarFaceWidth.AutoIncrement = false;
				colvarFaceWidth.IsNullable = false;
				colvarFaceWidth.IsPrimaryKey = false;
				colvarFaceWidth.IsForeignKey = false;
				colvarFaceWidth.IsReadOnly = false;
				colvarFaceWidth.DefaultSetting = @"";
				colvarFaceWidth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFaceWidth);
				
				TableSchema.TableColumn colvarDirameter = new TableSchema.TableColumn(schema);
				colvarDirameter.ColumnName = "Dirameter";
				colvarDirameter.DataType = DbType.Double;
				colvarDirameter.MaxLength = 0;
				colvarDirameter.AutoIncrement = false;
				colvarDirameter.IsNullable = false;
				colvarDirameter.IsPrimaryKey = false;
				colvarDirameter.IsForeignKey = false;
				colvarDirameter.IsReadOnly = false;
				colvarDirameter.DefaultSetting = @"";
				colvarDirameter.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDirameter);
				
				TableSchema.TableColumn colvarDept = new TableSchema.TableColumn(schema);
				colvarDept.ColumnName = "Dept";
				colvarDept.DataType = DbType.String;
				colvarDept.MaxLength = 20;
				colvarDept.AutoIncrement = false;
				colvarDept.IsNullable = false;
				colvarDept.IsPrimaryKey = false;
				colvarDept.IsForeignKey = false;
				colvarDept.IsReadOnly = false;
				colvarDept.DefaultSetting = @"";
				colvarDept.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDept);
				
				TableSchema.TableColumn colvarIsPivotCylinder = new TableSchema.TableColumn(schema);
				colvarIsPivotCylinder.ColumnName = "IsPivotCylinder";
				colvarIsPivotCylinder.DataType = DbType.Byte;
				colvarIsPivotCylinder.MaxLength = 0;
				colvarIsPivotCylinder.AutoIncrement = false;
				colvarIsPivotCylinder.IsNullable = true;
				colvarIsPivotCylinder.IsPrimaryKey = false;
				colvarIsPivotCylinder.IsForeignKey = false;
				colvarIsPivotCylinder.IsReadOnly = false;
				colvarIsPivotCylinder.DefaultSetting = @"";
				colvarIsPivotCylinder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsPivotCylinder);
				
				TableSchema.TableColumn colvarPOUnitPrice = new TableSchema.TableColumn(schema);
				colvarPOUnitPrice.ColumnName = "POUnitPrice";
				colvarPOUnitPrice.DataType = DbType.Decimal;
				colvarPOUnitPrice.MaxLength = 0;
				colvarPOUnitPrice.AutoIncrement = false;
				colvarPOUnitPrice.IsNullable = true;
				colvarPOUnitPrice.IsPrimaryKey = false;
				colvarPOUnitPrice.IsForeignKey = false;
				colvarPOUnitPrice.IsReadOnly = false;
				colvarPOUnitPrice.DefaultSetting = @"";
				colvarPOUnitPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPOUnitPrice);
				
				TableSchema.TableColumn colvarPOQuantity = new TableSchema.TableColumn(schema);
				colvarPOQuantity.ColumnName = "POQuantity";
				colvarPOQuantity.DataType = DbType.Int32;
				colvarPOQuantity.MaxLength = 0;
				colvarPOQuantity.AutoIncrement = false;
				colvarPOQuantity.IsNullable = true;
				colvarPOQuantity.IsPrimaryKey = false;
				colvarPOQuantity.IsForeignKey = false;
				colvarPOQuantity.IsReadOnly = false;
				colvarPOQuantity.DefaultSetting = @"";
				colvarPOQuantity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPOQuantity);
				
				TableSchema.TableColumn colvarUnitPrice = new TableSchema.TableColumn(schema);
				colvarUnitPrice.ColumnName = "UnitPrice";
				colvarUnitPrice.DataType = DbType.Decimal;
				colvarUnitPrice.MaxLength = 0;
				colvarUnitPrice.AutoIncrement = false;
				colvarUnitPrice.IsNullable = true;
				colvarUnitPrice.IsPrimaryKey = false;
				colvarUnitPrice.IsForeignKey = false;
				colvarUnitPrice.IsReadOnly = false;
				colvarUnitPrice.DefaultSetting = @"";
				colvarUnitPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnitPrice);
				
				TableSchema.TableColumn colvarQuantity = new TableSchema.TableColumn(schema);
				colvarQuantity.ColumnName = "Quantity";
				colvarQuantity.DataType = DbType.Int32;
				colvarQuantity.MaxLength = 0;
				colvarQuantity.AutoIncrement = false;
				colvarQuantity.IsNullable = true;
				colvarQuantity.IsPrimaryKey = false;
				colvarQuantity.IsForeignKey = false;
				colvarQuantity.IsReadOnly = false;
				colvarQuantity.DefaultSetting = @"";
				colvarQuantity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuantity);
				
				TableSchema.TableColumn colvarTaxID = new TableSchema.TableColumn(schema);
				colvarTaxID.ColumnName = "TaxID";
				colvarTaxID.DataType = DbType.Int16;
				colvarTaxID.MaxLength = 0;
				colvarTaxID.AutoIncrement = false;
				colvarTaxID.IsNullable = true;
				colvarTaxID.IsPrimaryKey = false;
				colvarTaxID.IsForeignKey = true;
				colvarTaxID.IsReadOnly = false;
				colvarTaxID.DefaultSetting = @"";
				
					colvarTaxID.ForeignKeyTableName = "tblTax";
				schema.Columns.Add(colvarTaxID);
				
				TableSchema.TableColumn colvarTaxPercentage = new TableSchema.TableColumn(schema);
				colvarTaxPercentage.ColumnName = "TaxPercentage";
				colvarTaxPercentage.DataType = DbType.Double;
				colvarTaxPercentage.MaxLength = 0;
				colvarTaxPercentage.AutoIncrement = false;
				colvarTaxPercentage.IsNullable = true;
				colvarTaxPercentage.IsPrimaryKey = false;
				colvarTaxPercentage.IsForeignKey = false;
				colvarTaxPercentage.IsReadOnly = false;
				colvarTaxPercentage.DefaultSetting = @"";
				colvarTaxPercentage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTaxPercentage);
				
				TableSchema.TableColumn colvarJobID = new TableSchema.TableColumn(schema);
				colvarJobID.ColumnName = "JobID";
				colvarJobID.DataType = DbType.Int32;
				colvarJobID.MaxLength = 0;
				colvarJobID.AutoIncrement = false;
				colvarJobID.IsNullable = false;
				colvarJobID.IsPrimaryKey = false;
				colvarJobID.IsForeignKey = true;
				colvarJobID.IsReadOnly = false;
				colvarJobID.DefaultSetting = @"";
				
					colvarJobID.ForeignKeyTableName = "tblJob";
				schema.Columns.Add(colvarJobID);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("tblCylinder",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("CylinderID")]
		[Bindable(true)]
		public int CylinderID 
		{
			get { return GetColumnValue<int>(Columns.CylinderID); }
			set { SetColumnValue(Columns.CylinderID, value); }
		}
		  
		[XmlAttribute("Sequence")]
		[Bindable(true)]
		public int Sequence 
		{
			get { return GetColumnValue<int>(Columns.Sequence); }
			set { SetColumnValue(Columns.Sequence, value); }
		}
		  
		[XmlAttribute("CylinderNo")]
		[Bindable(true)]
		public string CylinderNo 
		{
			get { return GetColumnValue<string>(Columns.CylinderNo); }
			set { SetColumnValue(Columns.CylinderNo, value); }
		}
		  
		[XmlAttribute("CusCylinderID")]
		[Bindable(true)]
		public string CusCylinderID 
		{
			get { return GetColumnValue<string>(Columns.CusCylinderID); }
			set { SetColumnValue(Columns.CusCylinderID, value); }
		}
		  
		[XmlAttribute("CusSteelBaseID")]
		[Bindable(true)]
		public string CusSteelBaseID 
		{
			get { return GetColumnValue<string>(Columns.CusSteelBaseID); }
			set { SetColumnValue(Columns.CusSteelBaseID, value); }
		}
		  
		[XmlAttribute("CylinderBarcode")]
		[Bindable(true)]
		public string CylinderBarcode 
		{
			get { return GetColumnValue<string>(Columns.CylinderBarcode); }
			set { SetColumnValue(Columns.CylinderBarcode, value); }
		}
		  
		[XmlAttribute("SteelBase")]
		[Bindable(true)]
		public byte SteelBase 
		{
			get { return GetColumnValue<byte>(Columns.SteelBase); }
			set { SetColumnValue(Columns.SteelBase, value); }
		}
		  
		[XmlAttribute("Color")]
		[Bindable(true)]
		public string Color 
		{
			get { return GetColumnValue<string>(Columns.Color); }
			set { SetColumnValue(Columns.Color, value); }
		}
		  
		[XmlAttribute("Protocol")]
		[Bindable(true)]
		public string Protocol 
		{
			get { return GetColumnValue<string>(Columns.Protocol); }
			set { SetColumnValue(Columns.Protocol, value); }
		}
		  
		[XmlAttribute("ProductTypeID")]
		[Bindable(true)]
		public int? ProductTypeID 
		{
			get { return GetColumnValue<int?>(Columns.ProductTypeID); }
			set { SetColumnValue(Columns.ProductTypeID, value); }
		}
		  
		[XmlAttribute("ProcessTypeID")]
		[Bindable(true)]
		public int? ProcessTypeID 
		{
			get { return GetColumnValue<int?>(Columns.ProcessTypeID); }
			set { SetColumnValue(Columns.ProcessTypeID, value); }
		}
		  
		[XmlAttribute("PricingID")]
		[Bindable(true)]
		public short PricingID 
		{
			get { return GetColumnValue<short>(Columns.PricingID); }
			set { SetColumnValue(Columns.PricingID, value); }
		}
		  
		[XmlAttribute("CylinderStatusID")]
		[Bindable(true)]
		public short? CylinderStatusID 
		{
			get { return GetColumnValue<short?>(Columns.CylinderStatusID); }
			set { SetColumnValue(Columns.CylinderStatusID, value); }
		}
		  
		[XmlAttribute("Circumference")]
		[Bindable(true)]
		public double Circumference 
		{
			get { return GetColumnValue<double>(Columns.Circumference); }
			set { SetColumnValue(Columns.Circumference, value); }
		}
		  
		[XmlAttribute("FaceWidth")]
		[Bindable(true)]
		public double FaceWidth 
		{
			get { return GetColumnValue<double>(Columns.FaceWidth); }
			set { SetColumnValue(Columns.FaceWidth, value); }
		}
		  
		[XmlAttribute("Dirameter")]
		[Bindable(true)]
		public double Dirameter 
		{
			get { return GetColumnValue<double>(Columns.Dirameter); }
			set { SetColumnValue(Columns.Dirameter, value); }
		}
		  
		[XmlAttribute("Dept")]
		[Bindable(true)]
		public string Dept 
		{
			get { return GetColumnValue<string>(Columns.Dept); }
			set { SetColumnValue(Columns.Dept, value); }
		}
		  
		[XmlAttribute("IsPivotCylinder")]
		[Bindable(true)]
		public byte? IsPivotCylinder 
		{
			get { return GetColumnValue<byte?>(Columns.IsPivotCylinder); }
			set { SetColumnValue(Columns.IsPivotCylinder, value); }
		}
		  
		[XmlAttribute("POUnitPrice")]
		[Bindable(true)]
		public decimal? POUnitPrice 
		{
			get { return GetColumnValue<decimal?>(Columns.POUnitPrice); }
			set { SetColumnValue(Columns.POUnitPrice, value); }
		}
		  
		[XmlAttribute("POQuantity")]
		[Bindable(true)]
		public int? POQuantity 
		{
			get { return GetColumnValue<int?>(Columns.POQuantity); }
			set { SetColumnValue(Columns.POQuantity, value); }
		}
		  
		[XmlAttribute("UnitPrice")]
		[Bindable(true)]
		public decimal? UnitPrice 
		{
			get { return GetColumnValue<decimal?>(Columns.UnitPrice); }
			set { SetColumnValue(Columns.UnitPrice, value); }
		}
		  
		[XmlAttribute("Quantity")]
		[Bindable(true)]
		public int? Quantity 
		{
			get { return GetColumnValue<int?>(Columns.Quantity); }
			set { SetColumnValue(Columns.Quantity, value); }
		}
		  
		[XmlAttribute("TaxID")]
		[Bindable(true)]
		public short? TaxID 
		{
			get { return GetColumnValue<short?>(Columns.TaxID); }
			set { SetColumnValue(Columns.TaxID, value); }
		}
		  
		[XmlAttribute("TaxPercentage")]
		[Bindable(true)]
		public double? TaxPercentage 
		{
			get { return GetColumnValue<double?>(Columns.TaxPercentage); }
			set { SetColumnValue(Columns.TaxPercentage, value); }
		}
		  
		[XmlAttribute("JobID")]
		[Bindable(true)]
		public int JobID 
		{
			get { return GetColumnValue<int>(Columns.JobID); }
			set { SetColumnValue(Columns.JobID, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		private SweetSoft.APEM.DataAccess.TblEngravingDetailCollection colTblEngravingDetailRecords;
		public SweetSoft.APEM.DataAccess.TblEngravingDetailCollection TblEngravingDetailRecords()
		{
			if(colTblEngravingDetailRecords == null)
			{
				colTblEngravingDetailRecords = new SweetSoft.APEM.DataAccess.TblEngravingDetailCollection().Where(TblEngravingDetail.Columns.CylinderID, CylinderID).Load();
				colTblEngravingDetailRecords.ListChanged += new ListChangedEventHandler(colTblEngravingDetailRecords_ListChanged);
			}
			return colTblEngravingDetailRecords;
		}
				
		void colTblEngravingDetailRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colTblEngravingDetailRecords[e.NewIndex].CylinderID = CylinderID;
            }
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblJob ActiveRecord object related to this TblCylinder
		/// 
		/// </summary>
		public SweetSoft.APEM.DataAccess.TblJob TblJob
		{
			get { return SweetSoft.APEM.DataAccess.TblJob.FetchByID(this.JobID); }
			set { SetColumnValue("JobID", value.JobID); }
		}
		
		
		/// <summary>
		/// Returns a TblTax ActiveRecord object related to this TblCylinder
		/// 
		/// </summary>
		public SweetSoft.APEM.DataAccess.TblTax TblTax
		{
			get { return SweetSoft.APEM.DataAccess.TblTax.FetchByID(this.TaxID); }
			set { SetColumnValue("TaxID", value.TaxID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varSequence,string varCylinderNo,string varCusCylinderID,string varCusSteelBaseID,string varCylinderBarcode,byte varSteelBase,string varColor,string varProtocol,int? varProductTypeID,int? varProcessTypeID,short varPricingID,short? varCylinderStatusID,double varCircumference,double varFaceWidth,double varDirameter,string varDept,byte? varIsPivotCylinder,decimal? varPOUnitPrice,int? varPOQuantity,decimal? varUnitPrice,int? varQuantity,short? varTaxID,double? varTaxPercentage,int varJobID)
		{
			TblCylinder item = new TblCylinder();
			
			item.Sequence = varSequence;
			
			item.CylinderNo = varCylinderNo;
			
			item.CusCylinderID = varCusCylinderID;
			
			item.CusSteelBaseID = varCusSteelBaseID;
			
			item.CylinderBarcode = varCylinderBarcode;
			
			item.SteelBase = varSteelBase;
			
			item.Color = varColor;
			
			item.Protocol = varProtocol;
			
			item.ProductTypeID = varProductTypeID;
			
			item.ProcessTypeID = varProcessTypeID;
			
			item.PricingID = varPricingID;
			
			item.CylinderStatusID = varCylinderStatusID;
			
			item.Circumference = varCircumference;
			
			item.FaceWidth = varFaceWidth;
			
			item.Dirameter = varDirameter;
			
			item.Dept = varDept;
			
			item.IsPivotCylinder = varIsPivotCylinder;
			
			item.POUnitPrice = varPOUnitPrice;
			
			item.POQuantity = varPOQuantity;
			
			item.UnitPrice = varUnitPrice;
			
			item.Quantity = varQuantity;
			
			item.TaxID = varTaxID;
			
			item.TaxPercentage = varTaxPercentage;
			
			item.JobID = varJobID;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varCylinderID,int varSequence,string varCylinderNo,string varCusCylinderID,string varCusSteelBaseID,string varCylinderBarcode,byte varSteelBase,string varColor,string varProtocol,int? varProductTypeID,int? varProcessTypeID,short varPricingID,short? varCylinderStatusID,double varCircumference,double varFaceWidth,double varDirameter,string varDept,byte? varIsPivotCylinder,decimal? varPOUnitPrice,int? varPOQuantity,decimal? varUnitPrice,int? varQuantity,short? varTaxID,double? varTaxPercentage,int varJobID)
		{
			TblCylinder item = new TblCylinder();
			
				item.CylinderID = varCylinderID;
			
				item.Sequence = varSequence;
			
				item.CylinderNo = varCylinderNo;
			
				item.CusCylinderID = varCusCylinderID;
			
				item.CusSteelBaseID = varCusSteelBaseID;
			
				item.CylinderBarcode = varCylinderBarcode;
			
				item.SteelBase = varSteelBase;
			
				item.Color = varColor;
			
				item.Protocol = varProtocol;
			
				item.ProductTypeID = varProductTypeID;
			
				item.ProcessTypeID = varProcessTypeID;
			
				item.PricingID = varPricingID;
			
				item.CylinderStatusID = varCylinderStatusID;
			
				item.Circumference = varCircumference;
			
				item.FaceWidth = varFaceWidth;
			
				item.Dirameter = varDirameter;
			
				item.Dept = varDept;
			
				item.IsPivotCylinder = varIsPivotCylinder;
			
				item.POUnitPrice = varPOUnitPrice;
			
				item.POQuantity = varPOQuantity;
			
				item.UnitPrice = varUnitPrice;
			
				item.Quantity = varQuantity;
			
				item.TaxID = varTaxID;
			
				item.TaxPercentage = varTaxPercentage;
			
				item.JobID = varJobID;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn CylinderIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn SequenceColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn CylinderNoColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CusCylinderIDColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CusSteelBaseIDColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CylinderBarcodeColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn SteelBaseColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ColorColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ProtocolColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ProductTypeIDColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ProcessTypeIDColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn PricingIDColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn CylinderStatusIDColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn CircumferenceColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn FaceWidthColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn DirameterColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn DeptColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn IsPivotCylinderColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn POUnitPriceColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn POQuantityColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn UnitPriceColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn QuantityColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn TaxIDColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn TaxPercentageColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn JobIDColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string CylinderID = @"CylinderID";
			 public static string Sequence = @"Sequence";
			 public static string CylinderNo = @"CylinderNo";
			 public static string CusCylinderID = @"CusCylinderID";
			 public static string CusSteelBaseID = @"CusSteelBaseID";
			 public static string CylinderBarcode = @"CylinderBarcode";
			 public static string SteelBase = @"SteelBase";
			 public static string Color = @"Color";
			 public static string Protocol = @"Protocol";
			 public static string ProductTypeID = @"ProductTypeID";
			 public static string ProcessTypeID = @"ProcessTypeID";
			 public static string PricingID = @"PricingID";
			 public static string CylinderStatusID = @"CylinderStatusID";
			 public static string Circumference = @"Circumference";
			 public static string FaceWidth = @"FaceWidth";
			 public static string Dirameter = @"Dirameter";
			 public static string Dept = @"Dept";
			 public static string IsPivotCylinder = @"IsPivotCylinder";
			 public static string POUnitPrice = @"POUnitPrice";
			 public static string POQuantity = @"POQuantity";
			 public static string UnitPrice = @"UnitPrice";
			 public static string Quantity = @"Quantity";
			 public static string TaxID = @"TaxID";
			 public static string TaxPercentage = @"TaxPercentage";
			 public static string JobID = @"JobID";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
                if (colTblEngravingDetailRecords != null)
                {
                    foreach (SweetSoft.APEM.DataAccess.TblEngravingDetail item in colTblEngravingDetailRecords)
                    {
                        if (item.CylinderID != CylinderID)
                        {
                            item.CylinderID = CylinderID;
                        }
                    }
               }
		}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
                if (colTblEngravingDetailRecords != null)
                {
                    colTblEngravingDetailRecords.SaveAll();
               }
		}
        #endregion
	}
}
