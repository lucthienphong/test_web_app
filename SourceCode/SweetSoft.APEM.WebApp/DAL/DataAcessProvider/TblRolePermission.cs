using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblRolePermission class.
	/// </summary>
    [Serializable]
	public partial class TblRolePermissionCollection : ActiveList<TblRolePermission, TblRolePermissionCollection>
	{	   
		public TblRolePermissionCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblRolePermissionCollection</returns>
		public TblRolePermissionCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblRolePermission o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblRolePermission table.
	/// </summary>
	[Serializable]
	public partial class TblRolePermission : ActiveRecord<TblRolePermission>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblRolePermission()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblRolePermission(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblRolePermission(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblRolePermission(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblRolePermission", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarRoleID = new TableSchema.TableColumn(schema);
				colvarRoleID.ColumnName = "RoleID";
				colvarRoleID.DataType = DbType.Int32;
				colvarRoleID.MaxLength = 0;
				colvarRoleID.AutoIncrement = false;
				colvarRoleID.IsNullable = false;
				colvarRoleID.IsPrimaryKey = true;
				colvarRoleID.IsForeignKey = true;
				colvarRoleID.IsReadOnly = false;
				colvarRoleID.DefaultSetting = @"";
				
					colvarRoleID.ForeignKeyTableName = "tblRole";
				schema.Columns.Add(colvarRoleID);
				
				TableSchema.TableColumn colvarFunctionID = new TableSchema.TableColumn(schema);
				colvarFunctionID.ColumnName = "FunctionID";
				colvarFunctionID.DataType = DbType.AnsiString;
				colvarFunctionID.MaxLength = 128;
				colvarFunctionID.AutoIncrement = false;
				colvarFunctionID.IsNullable = false;
				colvarFunctionID.IsPrimaryKey = true;
				colvarFunctionID.IsForeignKey = true;
				colvarFunctionID.IsReadOnly = false;
				colvarFunctionID.DefaultSetting = @"";
				
					colvarFunctionID.ForeignKeyTableName = "tblFunction";
				schema.Columns.Add(colvarFunctionID);
				
				TableSchema.TableColumn colvarAllowAdd = new TableSchema.TableColumn(schema);
				colvarAllowAdd.ColumnName = "AllowAdd";
				colvarAllowAdd.DataType = DbType.Boolean;
				colvarAllowAdd.MaxLength = 0;
				colvarAllowAdd.AutoIncrement = false;
				colvarAllowAdd.IsNullable = false;
				colvarAllowAdd.IsPrimaryKey = false;
				colvarAllowAdd.IsForeignKey = false;
				colvarAllowAdd.IsReadOnly = false;
				colvarAllowAdd.DefaultSetting = @"";
				colvarAllowAdd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAllowAdd);
				
				TableSchema.TableColumn colvarAllowEdit = new TableSchema.TableColumn(schema);
				colvarAllowEdit.ColumnName = "AllowEdit";
				colvarAllowEdit.DataType = DbType.Boolean;
				colvarAllowEdit.MaxLength = 0;
				colvarAllowEdit.AutoIncrement = false;
				colvarAllowEdit.IsNullable = false;
				colvarAllowEdit.IsPrimaryKey = false;
				colvarAllowEdit.IsForeignKey = false;
				colvarAllowEdit.IsReadOnly = false;
				colvarAllowEdit.DefaultSetting = @"";
				colvarAllowEdit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAllowEdit);
				
				TableSchema.TableColumn colvarAllowDelete = new TableSchema.TableColumn(schema);
				colvarAllowDelete.ColumnName = "AllowDelete";
				colvarAllowDelete.DataType = DbType.Boolean;
				colvarAllowDelete.MaxLength = 0;
				colvarAllowDelete.AutoIncrement = false;
				colvarAllowDelete.IsNullable = false;
				colvarAllowDelete.IsPrimaryKey = false;
				colvarAllowDelete.IsForeignKey = false;
				colvarAllowDelete.IsReadOnly = false;
				colvarAllowDelete.DefaultSetting = @"";
				colvarAllowDelete.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAllowDelete);
				
				TableSchema.TableColumn colvarAllowUpdateStatus = new TableSchema.TableColumn(schema);
				colvarAllowUpdateStatus.ColumnName = "AllowUpdateStatus";
				colvarAllowUpdateStatus.DataType = DbType.Boolean;
				colvarAllowUpdateStatus.MaxLength = 0;
				colvarAllowUpdateStatus.AutoIncrement = false;
				colvarAllowUpdateStatus.IsNullable = false;
				colvarAllowUpdateStatus.IsPrimaryKey = false;
				colvarAllowUpdateStatus.IsForeignKey = false;
				colvarAllowUpdateStatus.IsReadOnly = false;
				colvarAllowUpdateStatus.DefaultSetting = @"";
				colvarAllowUpdateStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAllowUpdateStatus);
				
				TableSchema.TableColumn colvarAllowOther = new TableSchema.TableColumn(schema);
				colvarAllowOther.ColumnName = "AllowOther";
				colvarAllowOther.DataType = DbType.Boolean;
				colvarAllowOther.MaxLength = 0;
				colvarAllowOther.AutoIncrement = false;
				colvarAllowOther.IsNullable = false;
				colvarAllowOther.IsPrimaryKey = false;
				colvarAllowOther.IsForeignKey = false;
				colvarAllowOther.IsReadOnly = false;
				colvarAllowOther.DefaultSetting = @"";
				colvarAllowOther.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAllowOther);
				
				TableSchema.TableColumn colvarAllowLockUnlock = new TableSchema.TableColumn(schema);
				colvarAllowLockUnlock.ColumnName = "AllowLockUnlock";
				colvarAllowLockUnlock.DataType = DbType.Boolean;
				colvarAllowLockUnlock.MaxLength = 0;
				colvarAllowLockUnlock.AutoIncrement = false;
				colvarAllowLockUnlock.IsNullable = false;
				colvarAllowLockUnlock.IsPrimaryKey = false;
				colvarAllowLockUnlock.IsForeignKey = false;
				colvarAllowLockUnlock.IsReadOnly = false;
				
						colvarAllowLockUnlock.DefaultSetting = @"((0))";
				colvarAllowLockUnlock.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAllowLockUnlock);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("tblRolePermission",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("RoleID")]
		[Bindable(true)]
		public int RoleID 
		{
			get { return GetColumnValue<int>(Columns.RoleID); }
			set { SetColumnValue(Columns.RoleID, value); }
		}
		  
		[XmlAttribute("FunctionID")]
		[Bindable(true)]
		public string FunctionID 
		{
			get { return GetColumnValue<string>(Columns.FunctionID); }
			set { SetColumnValue(Columns.FunctionID, value); }
		}
		  
		[XmlAttribute("AllowAdd")]
		[Bindable(true)]
		public bool AllowAdd 
		{
			get { return GetColumnValue<bool>(Columns.AllowAdd); }
			set { SetColumnValue(Columns.AllowAdd, value); }
		}
		  
		[XmlAttribute("AllowEdit")]
		[Bindable(true)]
		public bool AllowEdit 
		{
			get { return GetColumnValue<bool>(Columns.AllowEdit); }
			set { SetColumnValue(Columns.AllowEdit, value); }
		}
		  
		[XmlAttribute("AllowDelete")]
		[Bindable(true)]
		public bool AllowDelete 
		{
			get { return GetColumnValue<bool>(Columns.AllowDelete); }
			set { SetColumnValue(Columns.AllowDelete, value); }
		}
		  
		[XmlAttribute("AllowUpdateStatus")]
		[Bindable(true)]
		public bool AllowUpdateStatus 
		{
			get { return GetColumnValue<bool>(Columns.AllowUpdateStatus); }
			set { SetColumnValue(Columns.AllowUpdateStatus, value); }
		}
		  
		[XmlAttribute("AllowOther")]
		[Bindable(true)]
		public bool AllowOther 
		{
			get { return GetColumnValue<bool>(Columns.AllowOther); }
			set { SetColumnValue(Columns.AllowOther, value); }
		}
		  
		[XmlAttribute("AllowLockUnlock")]
		[Bindable(true)]
		public bool AllowLockUnlock 
		{
			get { return GetColumnValue<bool>(Columns.AllowLockUnlock); }
			set { SetColumnValue(Columns.AllowLockUnlock, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblFunction ActiveRecord object related to this TblRolePermission
		/// 
		/// </summary>
		public SweetSoft.APEM.DataAccess.TblFunction TblFunction
		{
			get { return SweetSoft.APEM.DataAccess.TblFunction.FetchByID(this.FunctionID); }
			set { SetColumnValue("FunctionID", value.FunctionID); }
		}
		
		
		/// <summary>
		/// Returns a TblRole ActiveRecord object related to this TblRolePermission
		/// 
		/// </summary>
		public SweetSoft.APEM.DataAccess.TblRole TblRole
		{
			get { return SweetSoft.APEM.DataAccess.TblRole.FetchByID(this.RoleID); }
			set { SetColumnValue("RoleID", value.RoleID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varRoleID,string varFunctionID,bool varAllowAdd,bool varAllowEdit,bool varAllowDelete,bool varAllowUpdateStatus,bool varAllowOther,bool varAllowLockUnlock)
		{
			TblRolePermission item = new TblRolePermission();
			
			item.RoleID = varRoleID;
			
			item.FunctionID = varFunctionID;
			
			item.AllowAdd = varAllowAdd;
			
			item.AllowEdit = varAllowEdit;
			
			item.AllowDelete = varAllowDelete;
			
			item.AllowUpdateStatus = varAllowUpdateStatus;
			
			item.AllowOther = varAllowOther;
			
			item.AllowLockUnlock = varAllowLockUnlock;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varRoleID,string varFunctionID,bool varAllowAdd,bool varAllowEdit,bool varAllowDelete,bool varAllowUpdateStatus,bool varAllowOther,bool varAllowLockUnlock)
		{
			TblRolePermission item = new TblRolePermission();
			
				item.RoleID = varRoleID;
			
				item.FunctionID = varFunctionID;
			
				item.AllowAdd = varAllowAdd;
			
				item.AllowEdit = varAllowEdit;
			
				item.AllowDelete = varAllowDelete;
			
				item.AllowUpdateStatus = varAllowUpdateStatus;
			
				item.AllowOther = varAllowOther;
			
				item.AllowLockUnlock = varAllowLockUnlock;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn RoleIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn FunctionIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn AllowAddColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn AllowEditColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn AllowDeleteColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn AllowUpdateStatusColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn AllowOtherColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn AllowLockUnlockColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string RoleID = @"RoleID";
			 public static string FunctionID = @"FunctionID";
			 public static string AllowAdd = @"AllowAdd";
			 public static string AllowEdit = @"AllowEdit";
			 public static string AllowDelete = @"AllowDelete";
			 public static string AllowUpdateStatus = @"AllowUpdateStatus";
			 public static string AllowOther = @"AllowOther";
			 public static string AllowLockUnlock = @"AllowLockUnlock";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
