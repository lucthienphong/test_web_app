using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblDepartment class.
	/// </summary>
    [Serializable]
	public partial class TblDepartmentCollection : ActiveList<TblDepartment, TblDepartmentCollection>
	{	   
		public TblDepartmentCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblDepartmentCollection</returns>
		public TblDepartmentCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblDepartment o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblDepartment table.
	/// </summary>
	[Serializable]
	public partial class TblDepartment : ActiveRecord<TblDepartment>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblDepartment()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblDepartment(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblDepartment(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblDepartment(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblDepartment", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarDepartmentID = new TableSchema.TableColumn(schema);
				colvarDepartmentID.ColumnName = "DepartmentID";
				colvarDepartmentID.DataType = DbType.Int16;
				colvarDepartmentID.MaxLength = 0;
				colvarDepartmentID.AutoIncrement = true;
				colvarDepartmentID.IsNullable = false;
				colvarDepartmentID.IsPrimaryKey = true;
				colvarDepartmentID.IsForeignKey = false;
				colvarDepartmentID.IsReadOnly = false;
				colvarDepartmentID.DefaultSetting = @"";
				colvarDepartmentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepartmentID);
				
				TableSchema.TableColumn colvarDepartmentName = new TableSchema.TableColumn(schema);
				colvarDepartmentName.ColumnName = "DepartmentName";
				colvarDepartmentName.DataType = DbType.String;
				colvarDepartmentName.MaxLength = 100;
				colvarDepartmentName.AutoIncrement = false;
				colvarDepartmentName.IsNullable = false;
				colvarDepartmentName.IsPrimaryKey = false;
				colvarDepartmentName.IsForeignKey = false;
				colvarDepartmentName.IsReadOnly = false;
				colvarDepartmentName.DefaultSetting = @"";
				colvarDepartmentName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepartmentName);
				
				TableSchema.TableColumn colvarShowInWorkFlow = new TableSchema.TableColumn(schema);
				colvarShowInWorkFlow.ColumnName = "ShowInWorkFlow";
				colvarShowInWorkFlow.DataType = DbType.Byte;
				colvarShowInWorkFlow.MaxLength = 0;
				colvarShowInWorkFlow.AutoIncrement = false;
				colvarShowInWorkFlow.IsNullable = true;
				colvarShowInWorkFlow.IsPrimaryKey = false;
				colvarShowInWorkFlow.IsForeignKey = false;
				colvarShowInWorkFlow.IsReadOnly = false;
				
						colvarShowInWorkFlow.DefaultSetting = @"((1))";
				colvarShowInWorkFlow.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShowInWorkFlow);
				
				TableSchema.TableColumn colvarProcessTypeID = new TableSchema.TableColumn(schema);
				colvarProcessTypeID.ColumnName = "ProcessTypeID";
				colvarProcessTypeID.DataType = DbType.Int16;
				colvarProcessTypeID.MaxLength = 0;
				colvarProcessTypeID.AutoIncrement = false;
				colvarProcessTypeID.IsNullable = true;
				colvarProcessTypeID.IsPrimaryKey = false;
				colvarProcessTypeID.IsForeignKey = false;
				colvarProcessTypeID.IsReadOnly = false;
				colvarProcessTypeID.DefaultSetting = @"";
				colvarProcessTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProcessTypeID);
				
				TableSchema.TableColumn colvarProductTypeID = new TableSchema.TableColumn(schema);
				colvarProductTypeID.ColumnName = "ProductTypeID";
				colvarProductTypeID.DataType = DbType.AnsiString;
				colvarProductTypeID.MaxLength = 100;
				colvarProductTypeID.AutoIncrement = false;
				colvarProductTypeID.IsNullable = true;
				colvarProductTypeID.IsPrimaryKey = false;
				colvarProductTypeID.IsForeignKey = false;
				colvarProductTypeID.IsReadOnly = false;
				colvarProductTypeID.DefaultSetting = @"";
				colvarProductTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductTypeID);
				
				TableSchema.TableColumn colvarTimelineOrder = new TableSchema.TableColumn(schema);
				colvarTimelineOrder.ColumnName = "TimelineOrder";
				colvarTimelineOrder.DataType = DbType.Byte;
				colvarTimelineOrder.MaxLength = 0;
				colvarTimelineOrder.AutoIncrement = false;
				colvarTimelineOrder.IsNullable = true;
				colvarTimelineOrder.IsPrimaryKey = false;
				colvarTimelineOrder.IsForeignKey = false;
				colvarTimelineOrder.IsReadOnly = false;
				
						colvarTimelineOrder.DefaultSetting = @"((1))";
				colvarTimelineOrder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTimelineOrder);
				
				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.String;
				colvarDescription.MaxLength = 500;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);
				
				TableSchema.TableColumn colvarIsObsolete = new TableSchema.TableColumn(schema);
				colvarIsObsolete.ColumnName = "IsObsolete";
				colvarIsObsolete.DataType = DbType.Byte;
				colvarIsObsolete.MaxLength = 0;
				colvarIsObsolete.AutoIncrement = false;
				colvarIsObsolete.IsNullable = true;
				colvarIsObsolete.IsPrimaryKey = false;
				colvarIsObsolete.IsForeignKey = false;
				colvarIsObsolete.IsReadOnly = false;
				colvarIsObsolete.DefaultSetting = @"";
				colvarIsObsolete.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsObsolete);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("tblDepartment",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("DepartmentID")]
		[Bindable(true)]
		public short DepartmentID 
		{
			get { return GetColumnValue<short>(Columns.DepartmentID); }
			set { SetColumnValue(Columns.DepartmentID, value); }
		}
		  
		[XmlAttribute("DepartmentName")]
		[Bindable(true)]
		public string DepartmentName 
		{
			get { return GetColumnValue<string>(Columns.DepartmentName); }
			set { SetColumnValue(Columns.DepartmentName, value); }
		}
		  
		[XmlAttribute("ShowInWorkFlow")]
		[Bindable(true)]
		public byte? ShowInWorkFlow 
		{
			get { return GetColumnValue<byte?>(Columns.ShowInWorkFlow); }
			set { SetColumnValue(Columns.ShowInWorkFlow, value); }
		}
		  
		[XmlAttribute("ProcessTypeID")]
		[Bindable(true)]
		public short? ProcessTypeID 
		{
			get { return GetColumnValue<short?>(Columns.ProcessTypeID); }
			set { SetColumnValue(Columns.ProcessTypeID, value); }
		}
		  
		[XmlAttribute("ProductTypeID")]
		[Bindable(true)]
		public string ProductTypeID 
		{
			get { return GetColumnValue<string>(Columns.ProductTypeID); }
			set { SetColumnValue(Columns.ProductTypeID, value); }
		}
		  
		[XmlAttribute("TimelineOrder")]
		[Bindable(true)]
		public byte? TimelineOrder 
		{
			get { return GetColumnValue<byte?>(Columns.TimelineOrder); }
			set { SetColumnValue(Columns.TimelineOrder, value); }
		}
		  
		[XmlAttribute("Description")]
		[Bindable(true)]
		public string Description 
		{
			get { return GetColumnValue<string>(Columns.Description); }
			set { SetColumnValue(Columns.Description, value); }
		}
		  
		[XmlAttribute("IsObsolete")]
		[Bindable(true)]
		public byte? IsObsolete 
		{
			get { return GetColumnValue<byte?>(Columns.IsObsolete); }
			set { SetColumnValue(Columns.IsObsolete, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		private SweetSoft.APEM.DataAccess.TblStaffCollection colTblStaffRecords;
		public SweetSoft.APEM.DataAccess.TblStaffCollection TblStaffRecords()
		{
			if(colTblStaffRecords == null)
			{
				colTblStaffRecords = new SweetSoft.APEM.DataAccess.TblStaffCollection().Where(TblStaff.Columns.DepartmentID, DepartmentID).Load();
				colTblStaffRecords.ListChanged += new ListChangedEventHandler(colTblStaffRecords_ListChanged);
			}
			return colTblStaffRecords;
		}
				
		void colTblStaffRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colTblStaffRecords[e.NewIndex].DepartmentID = DepartmentID;
            }
		}
		private SweetSoft.APEM.DataAccess.TblWorkTaskCollection colTblWorkTaskRecords;
		public SweetSoft.APEM.DataAccess.TblWorkTaskCollection TblWorkTaskRecords()
		{
			if(colTblWorkTaskRecords == null)
			{
				colTblWorkTaskRecords = new SweetSoft.APEM.DataAccess.TblWorkTaskCollection().Where(TblWorkTask.Columns.DepartmentID, DepartmentID).Load();
				colTblWorkTaskRecords.ListChanged += new ListChangedEventHandler(colTblWorkTaskRecords_ListChanged);
			}
			return colTblWorkTaskRecords;
		}
				
		void colTblWorkTaskRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colTblWorkTaskRecords[e.NewIndex].DepartmentID = DepartmentID;
            }
		}
		#endregion
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varDepartmentName,byte? varShowInWorkFlow,short? varProcessTypeID,string varProductTypeID,byte? varTimelineOrder,string varDescription,byte? varIsObsolete)
		{
			TblDepartment item = new TblDepartment();
			
			item.DepartmentName = varDepartmentName;
			
			item.ShowInWorkFlow = varShowInWorkFlow;
			
			item.ProcessTypeID = varProcessTypeID;
			
			item.ProductTypeID = varProductTypeID;
			
			item.TimelineOrder = varTimelineOrder;
			
			item.Description = varDescription;
			
			item.IsObsolete = varIsObsolete;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(short varDepartmentID,string varDepartmentName,byte? varShowInWorkFlow,short? varProcessTypeID,string varProductTypeID,byte? varTimelineOrder,string varDescription,byte? varIsObsolete)
		{
			TblDepartment item = new TblDepartment();
			
				item.DepartmentID = varDepartmentID;
			
				item.DepartmentName = varDepartmentName;
			
				item.ShowInWorkFlow = varShowInWorkFlow;
			
				item.ProcessTypeID = varProcessTypeID;
			
				item.ProductTypeID = varProductTypeID;
			
				item.TimelineOrder = varTimelineOrder;
			
				item.Description = varDescription;
			
				item.IsObsolete = varIsObsolete;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn DepartmentIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn DepartmentNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ShowInWorkFlowColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ProcessTypeIDColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ProductTypeIDColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn TimelineOrderColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn IsObsoleteColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string DepartmentID = @"DepartmentID";
			 public static string DepartmentName = @"DepartmentName";
			 public static string ShowInWorkFlow = @"ShowInWorkFlow";
			 public static string ProcessTypeID = @"ProcessTypeID";
			 public static string ProductTypeID = @"ProductTypeID";
			 public static string TimelineOrder = @"TimelineOrder";
			 public static string Description = @"Description";
			 public static string IsObsolete = @"IsObsolete";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
                if (colTblStaffRecords != null)
                {
                    foreach (SweetSoft.APEM.DataAccess.TblStaff item in colTblStaffRecords)
                    {
                        if (item.DepartmentID == null ||item.DepartmentID != DepartmentID)
                        {
                            item.DepartmentID = DepartmentID;
                        }
                    }
               }
		
                if (colTblWorkTaskRecords != null)
                {
                    foreach (SweetSoft.APEM.DataAccess.TblWorkTask item in colTblWorkTaskRecords)
                    {
                        if (item.DepartmentID == null ||item.DepartmentID != DepartmentID)
                        {
                            item.DepartmentID = DepartmentID;
                        }
                    }
               }
		}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
                if (colTblStaffRecords != null)
                {
                    colTblStaffRecords.SaveAll();
               }
		
                if (colTblWorkTaskRecords != null)
                {
                    colTblWorkTaskRecords.SaveAll();
               }
		}
        #endregion
	}
}
