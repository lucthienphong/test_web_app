using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
    /// <summary>
    /// Controller class for tblJob
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TblJobController
    {
        // Preload our schema..
        TblJob thisSchemaLoad = new TblJob();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TblJobCollection FetchAll()
        {
            TblJobCollection coll = new TblJobCollection();
            Query qry = new Query(TblJob.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblJobCollection FetchByID(object JobID)
        {
            TblJobCollection coll = new TblJobCollection().Where("JobID", JobID).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblJobCollection FetchByQuery(Query qry)
        {
            TblJobCollection coll = new TblJobCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object JobID)
        {
            return (TblJob.Delete(JobID) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object JobID)
        {
            return (TblJob.Destroy(JobID) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(string JobNumber,int RevNumber,string JobBarcode,string JobBarcodeImage,string JobName,string Design,string DrawingNumber,int? RootJobID,string RootJobNo,string RootJobRevNumber,string CommonJobNumber,string CustomerPO1,string CustomerPO2,int CustomerID,int? ShipToParty,int? BrandOwner,int ContactPersonID,int? SalesRepID,int? CoordinatorID,short? CurrencyID,int? ProductTypeID,string Status,string Remark,int? RevisionFromJob,int? RevisionRootNumber,string InternalExternal,string RevisionDetail,string PaymentTerms,string TypeOfOrder,byte IsServiceJob,byte IsOutsource,int SupplierID,byte IsClosed,string CreatedBy,DateTime? CreatedOn,string ModifiedBy,DateTime? ModifiedOn,string ItemCode)
	    {
		    TblJob item = new TblJob();
		    
            item.JobNumber = JobNumber;
            
            item.RevNumber = RevNumber;
            
            item.JobBarcode = JobBarcode;
            
            item.JobBarcodeImage = JobBarcodeImage;
            
            item.JobName = JobName;
            
            item.Design = Design;
            
            item.DrawingNumber = DrawingNumber;
            
            item.RootJobID = RootJobID;
            
            item.RootJobNo = RootJobNo;
            
            item.RootJobRevNumber = RootJobRevNumber;
            
            item.CommonJobNumber = CommonJobNumber;
            
            item.CustomerPO1 = CustomerPO1;
            
            item.CustomerPO2 = CustomerPO2;
            
            item.CustomerID = CustomerID;
            
            item.ShipToParty = ShipToParty;
            
            item.BrandOwner = BrandOwner;
            
            item.ContactPersonID = ContactPersonID;
            
            item.SalesRepID = SalesRepID;
            
            item.CoordinatorID = CoordinatorID;
            
            item.CurrencyID = CurrencyID;
            
            item.ProductTypeID = ProductTypeID;
            
            item.Status = Status;
            
            item.Remark = Remark;
            
            item.RevisionFromJob = RevisionFromJob;
            
            item.RevisionRootNumber = RevisionRootNumber;
            
            item.InternalExternal = InternalExternal;
            
            item.RevisionDetail = RevisionDetail;
            
            item.PaymentTerms = PaymentTerms;
            
            item.TypeOfOrder = TypeOfOrder;
            
            item.IsServiceJob = IsServiceJob;
            
            item.IsOutsource = IsOutsource;
            
            item.SupplierID = SupplierID;
            
            item.IsClosed = IsClosed;
            
            item.CreatedBy = CreatedBy;
            
            item.CreatedOn = CreatedOn;
            
            item.ModifiedBy = ModifiedBy;
            
            item.ModifiedOn = ModifiedOn;
            
            item.ItemCode = ItemCode;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int JobID,string JobNumber,int RevNumber,string JobBarcode,string JobBarcodeImage,string JobName,string Design,string DrawingNumber,int? RootJobID,string RootJobNo,string RootJobRevNumber,string CommonJobNumber,string CustomerPO1,string CustomerPO2,int CustomerID,int? ShipToParty,int? BrandOwner,int ContactPersonID,int? SalesRepID,int? CoordinatorID,short? CurrencyID,int? ProductTypeID,string Status,string Remark,int? RevisionFromJob,int? RevisionRootNumber,string InternalExternal,string RevisionDetail,string PaymentTerms,string TypeOfOrder,byte IsServiceJob,byte IsOutsource,int SupplierID,byte IsClosed,string CreatedBy,DateTime? CreatedOn,string ModifiedBy,DateTime? ModifiedOn,string ItemCode)
	    {
		    TblJob item = new TblJob();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.JobID = JobID;
				
			item.JobNumber = JobNumber;
				
			item.RevNumber = RevNumber;
				
			item.JobBarcode = JobBarcode;
				
			item.JobBarcodeImage = JobBarcodeImage;
				
			item.JobName = JobName;
				
			item.Design = Design;
				
			item.DrawingNumber = DrawingNumber;
				
			item.RootJobID = RootJobID;
				
			item.RootJobNo = RootJobNo;
				
			item.RootJobRevNumber = RootJobRevNumber;
				
			item.CommonJobNumber = CommonJobNumber;
				
			item.CustomerPO1 = CustomerPO1;
				
			item.CustomerPO2 = CustomerPO2;
				
			item.CustomerID = CustomerID;
				
			item.ShipToParty = ShipToParty;
				
			item.BrandOwner = BrandOwner;
				
			item.ContactPersonID = ContactPersonID;
				
			item.SalesRepID = SalesRepID;
				
			item.CoordinatorID = CoordinatorID;
				
			item.CurrencyID = CurrencyID;
				
			item.ProductTypeID = ProductTypeID;
				
			item.Status = Status;
				
			item.Remark = Remark;
				
			item.RevisionFromJob = RevisionFromJob;
				
			item.RevisionRootNumber = RevisionRootNumber;
				
			item.InternalExternal = InternalExternal;
				
			item.RevisionDetail = RevisionDetail;
				
			item.PaymentTerms = PaymentTerms;
				
			item.TypeOfOrder = TypeOfOrder;
				
			item.IsServiceJob = IsServiceJob;
				
			item.IsOutsource = IsOutsource;
				
			item.SupplierID = SupplierID;
				
			item.IsClosed = IsClosed;
				
			item.CreatedBy = CreatedBy;
				
			item.CreatedOn = CreatedOn;
				
			item.ModifiedBy = ModifiedBy;
				
			item.ModifiedOn = ModifiedOn;
				
			item.ItemCode = ItemCode;
				
	        item.Save(UserName);
	    }
    }
}
