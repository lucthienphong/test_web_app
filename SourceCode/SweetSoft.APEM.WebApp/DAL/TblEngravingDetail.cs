using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblEngravingDetail class.
	/// </summary>
    [Serializable]
	public partial class TblEngravingDetailCollection : ActiveList<TblEngravingDetail, TblEngravingDetailCollection>
	{	   
		public TblEngravingDetailCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblEngravingDetailCollection</returns>
		public TblEngravingDetailCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblEngravingDetail o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblEngravingDetail table.
	/// </summary>
	[Serializable]
	public partial class TblEngravingDetail : ActiveRecord<TblEngravingDetail>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblEngravingDetail()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblEngravingDetail(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblEngravingDetail(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblEngravingDetail(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblEngravingDetail", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarEngravingID = new TableSchema.TableColumn(schema);
				colvarEngravingID.ColumnName = "EngravingID";
				colvarEngravingID.DataType = DbType.Int32;
				colvarEngravingID.MaxLength = 0;
				colvarEngravingID.AutoIncrement = true;
				colvarEngravingID.IsNullable = false;
				colvarEngravingID.IsPrimaryKey = true;
				colvarEngravingID.IsForeignKey = false;
				colvarEngravingID.IsReadOnly = false;
				colvarEngravingID.DefaultSetting = @"";
				colvarEngravingID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEngravingID);
				
				TableSchema.TableColumn colvarCylinderID = new TableSchema.TableColumn(schema);
				colvarCylinderID.ColumnName = "CylinderID";
				colvarCylinderID.DataType = DbType.Int32;
				colvarCylinderID.MaxLength = 0;
				colvarCylinderID.AutoIncrement = false;
				colvarCylinderID.IsNullable = false;
				colvarCylinderID.IsPrimaryKey = false;
				colvarCylinderID.IsForeignKey = true;
				colvarCylinderID.IsReadOnly = false;
				colvarCylinderID.DefaultSetting = @"";
				
					colvarCylinderID.ForeignKeyTableName = "tblCylinder";
				schema.Columns.Add(colvarCylinderID);
				
				TableSchema.TableColumn colvarSequence = new TableSchema.TableColumn(schema);
				colvarSequence.ColumnName = "Sequence";
				colvarSequence.DataType = DbType.Int32;
				colvarSequence.MaxLength = 0;
				colvarSequence.AutoIncrement = false;
				colvarSequence.IsNullable = false;
				colvarSequence.IsPrimaryKey = false;
				colvarSequence.IsForeignKey = false;
				colvarSequence.IsReadOnly = false;
				colvarSequence.DefaultSetting = @"";
				colvarSequence.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSequence);
				
				TableSchema.TableColumn colvarJobID = new TableSchema.TableColumn(schema);
				colvarJobID.ColumnName = "JobID";
				colvarJobID.DataType = DbType.Int32;
				colvarJobID.MaxLength = 0;
				colvarJobID.AutoIncrement = false;
				colvarJobID.IsNullable = false;
				colvarJobID.IsPrimaryKey = false;
				colvarJobID.IsForeignKey = true;
				colvarJobID.IsReadOnly = false;
				colvarJobID.DefaultSetting = @"";
				
					colvarJobID.ForeignKeyTableName = "tblEngraving";
				schema.Columns.Add(colvarJobID);
				
				TableSchema.TableColumn colvarStylus = new TableSchema.TableColumn(schema);
				colvarStylus.ColumnName = "Stylus";
				colvarStylus.DataType = DbType.Int32;
				colvarStylus.MaxLength = 0;
				colvarStylus.AutoIncrement = false;
				colvarStylus.IsNullable = true;
				colvarStylus.IsPrimaryKey = false;
				colvarStylus.IsForeignKey = false;
				colvarStylus.IsReadOnly = false;
				colvarStylus.DefaultSetting = @"";
				colvarStylus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStylus);
				
				TableSchema.TableColumn colvarScreen = new TableSchema.TableColumn(schema);
				colvarScreen.ColumnName = "Screen";
				colvarScreen.DataType = DbType.String;
				colvarScreen.MaxLength = 20;
				colvarScreen.AutoIncrement = false;
				colvarScreen.IsNullable = true;
				colvarScreen.IsPrimaryKey = false;
				colvarScreen.IsForeignKey = false;
				colvarScreen.IsReadOnly = false;
				colvarScreen.DefaultSetting = @"";
				colvarScreen.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScreen);
				
				TableSchema.TableColumn colvarAngle = new TableSchema.TableColumn(schema);
				colvarAngle.ColumnName = "Angle";
				colvarAngle.DataType = DbType.Int32;
				colvarAngle.MaxLength = 0;
				colvarAngle.AutoIncrement = false;
				colvarAngle.IsNullable = true;
				colvarAngle.IsPrimaryKey = false;
				colvarAngle.IsForeignKey = false;
				colvarAngle.IsReadOnly = false;
				colvarAngle.DefaultSetting = @"";
				colvarAngle.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAngle);
				
				TableSchema.TableColumn colvarWall = new TableSchema.TableColumn(schema);
				colvarWall.ColumnName = "Wall";
				colvarWall.DataType = DbType.Int32;
				colvarWall.MaxLength = 0;
				colvarWall.AutoIncrement = false;
				colvarWall.IsNullable = true;
				colvarWall.IsPrimaryKey = false;
				colvarWall.IsForeignKey = false;
				colvarWall.IsReadOnly = false;
				colvarWall.DefaultSetting = @"";
				colvarWall.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWall);
				
				TableSchema.TableColumn colvarGamma = new TableSchema.TableColumn(schema);
				colvarGamma.ColumnName = "Gamma";
				colvarGamma.DataType = DbType.Int32;
				colvarGamma.MaxLength = 0;
				colvarGamma.AutoIncrement = false;
				colvarGamma.IsNullable = true;
				colvarGamma.IsPrimaryKey = false;
				colvarGamma.IsForeignKey = false;
				colvarGamma.IsReadOnly = false;
				colvarGamma.DefaultSetting = @"";
				colvarGamma.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGamma);
				
				TableSchema.TableColumn colvarSh = new TableSchema.TableColumn(schema);
				colvarSh.ColumnName = "Sh";
				colvarSh.DataType = DbType.Int32;
				colvarSh.MaxLength = 0;
				colvarSh.AutoIncrement = false;
				colvarSh.IsNullable = true;
				colvarSh.IsPrimaryKey = false;
				colvarSh.IsForeignKey = false;
				colvarSh.IsReadOnly = false;
				colvarSh.DefaultSetting = @"";
				colvarSh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSh);
				
				TableSchema.TableColumn colvarHl = new TableSchema.TableColumn(schema);
				colvarHl.ColumnName = "Hl";
				colvarHl.DataType = DbType.Int32;
				colvarHl.MaxLength = 0;
				colvarHl.AutoIncrement = false;
				colvarHl.IsNullable = true;
				colvarHl.IsPrimaryKey = false;
				colvarHl.IsForeignKey = false;
				colvarHl.IsReadOnly = false;
				colvarHl.DefaultSetting = @"";
				colvarHl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHl);
				
				TableSchema.TableColumn colvarCh = new TableSchema.TableColumn(schema);
				colvarCh.ColumnName = "Ch";
				colvarCh.DataType = DbType.Int32;
				colvarCh.MaxLength = 0;
				colvarCh.AutoIncrement = false;
				colvarCh.IsNullable = true;
				colvarCh.IsPrimaryKey = false;
				colvarCh.IsForeignKey = false;
				colvarCh.IsReadOnly = false;
				colvarCh.DefaultSetting = @"";
				colvarCh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCh);
				
				TableSchema.TableColumn colvarMt = new TableSchema.TableColumn(schema);
				colvarMt.ColumnName = "Mt";
				colvarMt.DataType = DbType.Int32;
				colvarMt.MaxLength = 0;
				colvarMt.AutoIncrement = false;
				colvarMt.IsNullable = true;
				colvarMt.IsPrimaryKey = false;
				colvarMt.IsForeignKey = false;
				colvarMt.IsReadOnly = false;
				colvarMt.DefaultSetting = @"";
				colvarMt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMt);
				
				TableSchema.TableColumn colvarCopperSh = new TableSchema.TableColumn(schema);
				colvarCopperSh.ColumnName = "CopperSh";
				colvarCopperSh.DataType = DbType.Int32;
				colvarCopperSh.MaxLength = 0;
				colvarCopperSh.AutoIncrement = false;
				colvarCopperSh.IsNullable = true;
				colvarCopperSh.IsPrimaryKey = false;
				colvarCopperSh.IsForeignKey = false;
				colvarCopperSh.IsReadOnly = false;
				colvarCopperSh.DefaultSetting = @"";
				colvarCopperSh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCopperSh);
				
				TableSchema.TableColumn colvarChromeSh = new TableSchema.TableColumn(schema);
				colvarChromeSh.ColumnName = "ChromeSh";
				colvarChromeSh.DataType = DbType.Int32;
				colvarChromeSh.MaxLength = 0;
				colvarChromeSh.AutoIncrement = false;
				colvarChromeSh.IsNullable = true;
				colvarChromeSh.IsPrimaryKey = false;
				colvarChromeSh.IsForeignKey = false;
				colvarChromeSh.IsReadOnly = false;
				colvarChromeSh.DefaultSetting = @"";
				colvarChromeSh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarChromeSh);
				
				TableSchema.TableColumn colvarCopperCh = new TableSchema.TableColumn(schema);
				colvarCopperCh.ColumnName = "CopperCh";
				colvarCopperCh.DataType = DbType.Int32;
				colvarCopperCh.MaxLength = 0;
				colvarCopperCh.AutoIncrement = false;
				colvarCopperCh.IsNullable = true;
				colvarCopperCh.IsPrimaryKey = false;
				colvarCopperCh.IsForeignKey = false;
				colvarCopperCh.IsReadOnly = false;
				colvarCopperCh.DefaultSetting = @"";
				colvarCopperCh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCopperCh);
				
				TableSchema.TableColumn colvarChromeCh = new TableSchema.TableColumn(schema);
				colvarChromeCh.ColumnName = "ChromeCh";
				colvarChromeCh.DataType = DbType.Int32;
				colvarChromeCh.MaxLength = 0;
				colvarChromeCh.AutoIncrement = false;
				colvarChromeCh.IsNullable = true;
				colvarChromeCh.IsPrimaryKey = false;
				colvarChromeCh.IsForeignKey = false;
				colvarChromeCh.IsReadOnly = false;
				colvarChromeCh.DefaultSetting = @"";
				colvarChromeCh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarChromeCh);
				
				TableSchema.TableColumn colvarCellDepth = new TableSchema.TableColumn(schema);
				colvarCellDepth.ColumnName = "CellDepth";
				colvarCellDepth.DataType = DbType.Double;
				colvarCellDepth.MaxLength = 0;
				colvarCellDepth.AutoIncrement = false;
				colvarCellDepth.IsNullable = true;
				colvarCellDepth.IsPrimaryKey = false;
				colvarCellDepth.IsForeignKey = false;
				colvarCellDepth.IsReadOnly = false;
				colvarCellDepth.DefaultSetting = @"";
				colvarCellDepth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellDepth);
				
				TableSchema.TableColumn colvarIsCopy = new TableSchema.TableColumn(schema);
				colvarIsCopy.ColumnName = "IsCopy";
				colvarIsCopy.DataType = DbType.Byte;
				colvarIsCopy.MaxLength = 0;
				colvarIsCopy.AutoIncrement = false;
				colvarIsCopy.IsNullable = false;
				colvarIsCopy.IsPrimaryKey = false;
				colvarIsCopy.IsForeignKey = false;
				colvarIsCopy.IsReadOnly = false;
				colvarIsCopy.DefaultSetting = @"";
				colvarIsCopy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCopy);
				
				TableSchema.TableColumn colvarColor = new TableSchema.TableColumn(schema);
				colvarColor.ColumnName = "Color";
				colvarColor.DataType = DbType.String;
				colvarColor.MaxLength = 100;
				colvarColor.AutoIncrement = false;
				colvarColor.IsNullable = true;
				colvarColor.IsPrimaryKey = false;
				colvarColor.IsForeignKey = false;
				colvarColor.IsReadOnly = false;
				colvarColor.DefaultSetting = @"";
				colvarColor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarColor);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("tblEngravingDetail",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("EngravingID")]
		[Bindable(true)]
		public int EngravingID 
		{
			get { return GetColumnValue<int>(Columns.EngravingID); }
			set { SetColumnValue(Columns.EngravingID, value); }
		}
		  
		[XmlAttribute("CylinderID")]
		[Bindable(true)]
		public int CylinderID 
		{
			get { return GetColumnValue<int>(Columns.CylinderID); }
			set { SetColumnValue(Columns.CylinderID, value); }
		}
		  
		[XmlAttribute("Sequence")]
		[Bindable(true)]
		public int Sequence 
		{
			get { return GetColumnValue<int>(Columns.Sequence); }
			set { SetColumnValue(Columns.Sequence, value); }
		}
		  
		[XmlAttribute("JobID")]
		[Bindable(true)]
		public int JobID 
		{
			get { return GetColumnValue<int>(Columns.JobID); }
			set { SetColumnValue(Columns.JobID, value); }
		}
		  
		[XmlAttribute("Stylus")]
		[Bindable(true)]
		public int? Stylus 
		{
			get { return GetColumnValue<int?>(Columns.Stylus); }
			set { SetColumnValue(Columns.Stylus, value); }
		}
		  
		[XmlAttribute("Screen")]
		[Bindable(true)]
		public string Screen 
		{
			get { return GetColumnValue<string>(Columns.Screen); }
			set { SetColumnValue(Columns.Screen, value); }
		}
		  
		[XmlAttribute("Angle")]
		[Bindable(true)]
		public int? Angle 
		{
			get { return GetColumnValue<int?>(Columns.Angle); }
			set { SetColumnValue(Columns.Angle, value); }
		}
		  
		[XmlAttribute("Wall")]
		[Bindable(true)]
		public int? Wall 
		{
			get { return GetColumnValue<int?>(Columns.Wall); }
			set { SetColumnValue(Columns.Wall, value); }
		}
		  
		[XmlAttribute("Gamma")]
		[Bindable(true)]
		public int? Gamma 
		{
			get { return GetColumnValue<int?>(Columns.Gamma); }
			set { SetColumnValue(Columns.Gamma, value); }
		}
		  
		[XmlAttribute("Sh")]
		[Bindable(true)]
		public int? Sh 
		{
			get { return GetColumnValue<int?>(Columns.Sh); }
			set { SetColumnValue(Columns.Sh, value); }
		}
		  
		[XmlAttribute("Hl")]
		[Bindable(true)]
		public int? Hl 
		{
			get { return GetColumnValue<int?>(Columns.Hl); }
			set { SetColumnValue(Columns.Hl, value); }
		}
		  
		[XmlAttribute("Ch")]
		[Bindable(true)]
		public int? Ch 
		{
			get { return GetColumnValue<int?>(Columns.Ch); }
			set { SetColumnValue(Columns.Ch, value); }
		}
		  
		[XmlAttribute("Mt")]
		[Bindable(true)]
		public int? Mt 
		{
			get { return GetColumnValue<int?>(Columns.Mt); }
			set { SetColumnValue(Columns.Mt, value); }
		}
		  
		[XmlAttribute("CopperSh")]
		[Bindable(true)]
		public int? CopperSh 
		{
			get { return GetColumnValue<int?>(Columns.CopperSh); }
			set { SetColumnValue(Columns.CopperSh, value); }
		}
		  
		[XmlAttribute("ChromeSh")]
		[Bindable(true)]
		public int? ChromeSh 
		{
			get { return GetColumnValue<int?>(Columns.ChromeSh); }
			set { SetColumnValue(Columns.ChromeSh, value); }
		}
		  
		[XmlAttribute("CopperCh")]
		[Bindable(true)]
		public int? CopperCh 
		{
			get { return GetColumnValue<int?>(Columns.CopperCh); }
			set { SetColumnValue(Columns.CopperCh, value); }
		}
		  
		[XmlAttribute("ChromeCh")]
		[Bindable(true)]
		public int? ChromeCh 
		{
			get { return GetColumnValue<int?>(Columns.ChromeCh); }
			set { SetColumnValue(Columns.ChromeCh, value); }
		}
		  
		[XmlAttribute("CellDepth")]
		[Bindable(true)]
		public double? CellDepth 
		{
			get { return GetColumnValue<double?>(Columns.CellDepth); }
			set { SetColumnValue(Columns.CellDepth, value); }
		}
		  
		[XmlAttribute("IsCopy")]
		[Bindable(true)]
		public byte IsCopy 
		{
			get { return GetColumnValue<byte>(Columns.IsCopy); }
			set { SetColumnValue(Columns.IsCopy, value); }
		}
		  
		[XmlAttribute("Color")]
		[Bindable(true)]
		public string Color 
		{
			get { return GetColumnValue<string>(Columns.Color); }
			set { SetColumnValue(Columns.Color, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblCylinder ActiveRecord object related to this TblEngravingDetail
		/// 
		/// </summary>
		public SweetSoft.APEM.DataAccess.TblCylinder TblCylinder
		{
			get { return SweetSoft.APEM.DataAccess.TblCylinder.FetchByID(this.CylinderID); }
			set { SetColumnValue("CylinderID", value.CylinderID); }
		}
		
		
		/// <summary>
		/// Returns a TblEngraving ActiveRecord object related to this TblEngravingDetail
		/// 
		/// </summary>
		public SweetSoft.APEM.DataAccess.TblEngraving TblEngraving
		{
			get { return SweetSoft.APEM.DataAccess.TblEngraving.FetchByID(this.JobID); }
			set { SetColumnValue("JobID", value.JobID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varCylinderID,int varSequence,int varJobID,int? varStylus,string varScreen,int? varAngle,int? varWall,int? varGamma,int? varSh,int? varHl,int? varCh,int? varMt,int? varCopperSh,int? varChromeSh,int? varCopperCh,int? varChromeCh,double? varCellDepth,byte varIsCopy,string varColor)
		{
			TblEngravingDetail item = new TblEngravingDetail();
			
			item.CylinderID = varCylinderID;
			
			item.Sequence = varSequence;
			
			item.JobID = varJobID;
			
			item.Stylus = varStylus;
			
			item.Screen = varScreen;
			
			item.Angle = varAngle;
			
			item.Wall = varWall;
			
			item.Gamma = varGamma;
			
			item.Sh = varSh;
			
			item.Hl = varHl;
			
			item.Ch = varCh;
			
			item.Mt = varMt;
			
			item.CopperSh = varCopperSh;
			
			item.ChromeSh = varChromeSh;
			
			item.CopperCh = varCopperCh;
			
			item.ChromeCh = varChromeCh;
			
			item.CellDepth = varCellDepth;
			
			item.IsCopy = varIsCopy;
			
			item.Color = varColor;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varEngravingID,int varCylinderID,int varSequence,int varJobID,int? varStylus,string varScreen,int? varAngle,int? varWall,int? varGamma,int? varSh,int? varHl,int? varCh,int? varMt,int? varCopperSh,int? varChromeSh,int? varCopperCh,int? varChromeCh,double? varCellDepth,byte varIsCopy,string varColor)
		{
			TblEngravingDetail item = new TblEngravingDetail();
			
				item.EngravingID = varEngravingID;
			
				item.CylinderID = varCylinderID;
			
				item.Sequence = varSequence;
			
				item.JobID = varJobID;
			
				item.Stylus = varStylus;
			
				item.Screen = varScreen;
			
				item.Angle = varAngle;
			
				item.Wall = varWall;
			
				item.Gamma = varGamma;
			
				item.Sh = varSh;
			
				item.Hl = varHl;
			
				item.Ch = varCh;
			
				item.Mt = varMt;
			
				item.CopperSh = varCopperSh;
			
				item.ChromeSh = varChromeSh;
			
				item.CopperCh = varCopperCh;
			
				item.ChromeCh = varChromeCh;
			
				item.CellDepth = varCellDepth;
			
				item.IsCopy = varIsCopy;
			
				item.Color = varColor;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn EngravingIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CylinderIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn SequenceColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn JobIDColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn StylusColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ScreenColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn AngleColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn WallColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn GammaColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ShColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn HlColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ChColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn MtColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn CopperShColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn ChromeShColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn CopperChColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn ChromeChColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn CellDepthColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn IsCopyColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn ColorColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string EngravingID = @"EngravingID";
			 public static string CylinderID = @"CylinderID";
			 public static string Sequence = @"Sequence";
			 public static string JobID = @"JobID";
			 public static string Stylus = @"Stylus";
			 public static string Screen = @"Screen";
			 public static string Angle = @"Angle";
			 public static string Wall = @"Wall";
			 public static string Gamma = @"Gamma";
			 public static string Sh = @"Sh";
			 public static string Hl = @"Hl";
			 public static string Ch = @"Ch";
			 public static string Mt = @"Mt";
			 public static string CopperSh = @"CopperSh";
			 public static string ChromeSh = @"ChromeSh";
			 public static string CopperCh = @"CopperCh";
			 public static string ChromeCh = @"ChromeCh";
			 public static string CellDepth = @"CellDepth";
			 public static string IsCopy = @"IsCopy";
			 public static string Color = @"Color";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
