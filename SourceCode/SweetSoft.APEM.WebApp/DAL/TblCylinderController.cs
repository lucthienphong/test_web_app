using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
    /// <summary>
    /// Controller class for tblCylinder
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TblCylinderController
    {
        // Preload our schema..
        TblCylinder thisSchemaLoad = new TblCylinder();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TblCylinderCollection FetchAll()
        {
            TblCylinderCollection coll = new TblCylinderCollection();
            Query qry = new Query(TblCylinder.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblCylinderCollection FetchByID(object CylinderID)
        {
            TblCylinderCollection coll = new TblCylinderCollection().Where("CylinderID", CylinderID).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblCylinderCollection FetchByQuery(Query qry)
        {
            TblCylinderCollection coll = new TblCylinderCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object CylinderID)
        {
            return (TblCylinder.Delete(CylinderID) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object CylinderID)
        {
            return (TblCylinder.Destroy(CylinderID) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(int Sequence,string CylinderNo,string CusCylinderID,string CylinderBarcode,byte SteelBase,string Color,string Protocol,int? ProductTypeID,int? ProcessTypeID,short PricingID,short? CylinderStatusID,double Circumference,double FaceWidth,double Dirameter,string Dept,byte? IsPivotCylinder,decimal? POUnitPrice,int? POQuantity,decimal? UnitPrice,int? Quantity,short? TaxID,double? TaxPercentage,int JobID,string CusSteelBaseID)
	    {
		    TblCylinder item = new TblCylinder();
		    
            item.Sequence = Sequence;
            
            item.CylinderNo = CylinderNo;
            
            item.CusCylinderID = CusCylinderID;
            
            item.CylinderBarcode = CylinderBarcode;
            
            item.SteelBase = SteelBase;
            
            item.Color = Color;
            
            item.Protocol = Protocol;
            
            item.ProductTypeID = ProductTypeID;
            
            item.ProcessTypeID = ProcessTypeID;
            
            item.PricingID = PricingID;
            
            item.CylinderStatusID = CylinderStatusID;
            
            item.Circumference = Circumference;
            
            item.FaceWidth = FaceWidth;
            
            item.Dirameter = Dirameter;
            
            item.Dept = Dept;
            
            item.IsPivotCylinder = IsPivotCylinder;
            
            item.POUnitPrice = POUnitPrice;
            
            item.POQuantity = POQuantity;
            
            item.UnitPrice = UnitPrice;
            
            item.Quantity = Quantity;
            
            item.TaxID = TaxID;
            
            item.TaxPercentage = TaxPercentage;
            
            item.JobID = JobID;
            
            item.CusSteelBaseID = CusSteelBaseID;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int CylinderID,int Sequence,string CylinderNo,string CusCylinderID,string CylinderBarcode,byte SteelBase,string Color,string Protocol,int? ProductTypeID,int? ProcessTypeID,short PricingID,short? CylinderStatusID,double Circumference,double FaceWidth,double Dirameter,string Dept,byte? IsPivotCylinder,decimal? POUnitPrice,int? POQuantity,decimal? UnitPrice,int? Quantity,short? TaxID,double? TaxPercentage,int JobID,string CusSteelBaseID)
	    {
		    TblCylinder item = new TblCylinder();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.CylinderID = CylinderID;
				
			item.Sequence = Sequence;
				
			item.CylinderNo = CylinderNo;
				
			item.CusCylinderID = CusCylinderID;
				
			item.CylinderBarcode = CylinderBarcode;
				
			item.SteelBase = SteelBase;
				
			item.Color = Color;
				
			item.Protocol = Protocol;
				
			item.ProductTypeID = ProductTypeID;
				
			item.ProcessTypeID = ProcessTypeID;
				
			item.PricingID = PricingID;
				
			item.CylinderStatusID = CylinderStatusID;
				
			item.Circumference = Circumference;
				
			item.FaceWidth = FaceWidth;
				
			item.Dirameter = Dirameter;
				
			item.Dept = Dept;
				
			item.IsPivotCylinder = IsPivotCylinder;
				
			item.POUnitPrice = POUnitPrice;
				
			item.POQuantity = POQuantity;
				
			item.UnitPrice = UnitPrice;
				
			item.Quantity = Quantity;
				
			item.TaxID = TaxID;
				
			item.TaxPercentage = TaxPercentage;
				
			item.JobID = JobID;
				
			item.CusSteelBaseID = CusSteelBaseID;
				
	        item.Save(UserName);
	    }
    }
}
