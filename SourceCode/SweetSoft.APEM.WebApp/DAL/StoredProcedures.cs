using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess{
    public partial class SPs{
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_AnyDataInTables Procedure
        /// </summary>
        public static StoredProcedure AspnetAnyDataInTables(int? TablesToCheck)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_AnyDataInTables", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@TablesToCheck", TablesToCheck, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Applications_CreateApplication Procedure
        /// </summary>
        public static StoredProcedure AspnetApplicationsCreateApplication(string ApplicationName, Guid? ApplicationId)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Applications_CreateApplication", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddOutputParameter("@ApplicationId", DbType.Guid, null, null);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_CheckSchemaVersion Procedure
        /// </summary>
        public static StoredProcedure AspnetCheckSchemaVersion(string Feature, string CompatibleSchemaVersion)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_CheckSchemaVersion", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@Feature", Feature, DbType.String, null, null);
        	
            sp.Command.AddParameter("@CompatibleSchemaVersion", CompatibleSchemaVersion, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_ChangePasswordQuestionAndAnswer Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipChangePasswordQuestionAndAnswer(string ApplicationName, string UserName, string NewPasswordQuestion, string NewPasswordAnswer)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_ChangePasswordQuestionAndAnswer", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@NewPasswordQuestion", NewPasswordQuestion, DbType.String, null, null);
        	
            sp.Command.AddParameter("@NewPasswordAnswer", NewPasswordAnswer, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_CreateUser Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipCreateUser(string ApplicationName, string UserName, string Password, string PasswordSalt, string Email, string PasswordQuestion, string PasswordAnswer, bool? IsApproved, DateTime? CurrentTimeUtc, DateTime? CreateDate, int? UniqueEmail, int? PasswordFormat, Guid? UserId)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_CreateUser", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Password", Password, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PasswordSalt", PasswordSalt, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Email", Email, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PasswordQuestion", PasswordQuestion, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PasswordAnswer", PasswordAnswer, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IsApproved", IsApproved, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@CreateDate", CreateDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@UniqueEmail", UniqueEmail, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PasswordFormat", PasswordFormat, DbType.Int32, 0, 10);
        	
            sp.Command.AddOutputParameter("@UserId", DbType.Guid, null, null);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_FindUsersByEmail Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipFindUsersByEmail(string ApplicationName, string EmailToMatch, int? PageIndex, int? PageSize)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_FindUsersByEmail", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@EmailToMatch", EmailToMatch, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_FindUsersByName Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipFindUsersByName(string ApplicationName, string UserNameToMatch, int? PageIndex, int? PageSize)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_FindUsersByName", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserNameToMatch", UserNameToMatch, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_GetAllUsers Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipGetAllUsers(string ApplicationName, int? PageIndex, int? PageSize)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_GetAllUsers", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_GetNumberOfUsersOnline Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipGetNumberOfUsersOnline(string ApplicationName, int? MinutesSinceLastInActive, DateTime? CurrentTimeUtc)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_GetNumberOfUsersOnline", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@MinutesSinceLastInActive", MinutesSinceLastInActive, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_GetPassword Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipGetPassword(string ApplicationName, string UserName, int? MaxInvalidPasswordAttempts, int? PasswordAttemptWindow, DateTime? CurrentTimeUtc, string PasswordAnswer)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_GetPassword", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@MaxInvalidPasswordAttempts", MaxInvalidPasswordAttempts, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PasswordAttemptWindow", PasswordAttemptWindow, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@PasswordAnswer", PasswordAnswer, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_GetPasswordWithFormat Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipGetPasswordWithFormat(string ApplicationName, string UserName, bool? UpdateLastLoginActivityDate, DateTime? CurrentTimeUtc)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_GetPasswordWithFormat", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UpdateLastLoginActivityDate", UpdateLastLoginActivityDate, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_GetUserByEmail Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipGetUserByEmail(string ApplicationName, string Email)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_GetUserByEmail", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Email", Email, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_GetUserByName Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipGetUserByName(string ApplicationName, string UserName, DateTime? CurrentTimeUtc, bool? UpdateLastActivity)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_GetUserByName", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@UpdateLastActivity", UpdateLastActivity, DbType.Boolean, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_GetUserByUserId Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipGetUserByUserId(Guid? UserId, DateTime? CurrentTimeUtc, bool? UpdateLastActivity)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_GetUserByUserId", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@UserId", UserId, DbType.Guid, null, null);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@UpdateLastActivity", UpdateLastActivity, DbType.Boolean, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_ResetPassword Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipResetPassword(string ApplicationName, string UserName, string NewPassword, int? MaxInvalidPasswordAttempts, int? PasswordAttemptWindow, string PasswordSalt, DateTime? CurrentTimeUtc, int? PasswordFormat, string PasswordAnswer)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_ResetPassword", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@NewPassword", NewPassword, DbType.String, null, null);
        	
            sp.Command.AddParameter("@MaxInvalidPasswordAttempts", MaxInvalidPasswordAttempts, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PasswordAttemptWindow", PasswordAttemptWindow, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PasswordSalt", PasswordSalt, DbType.String, null, null);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@PasswordFormat", PasswordFormat, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PasswordAnswer", PasswordAnswer, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_SetPassword Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipSetPassword(string ApplicationName, string UserName, string NewPassword, string PasswordSalt, DateTime? CurrentTimeUtc, int? PasswordFormat)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_SetPassword", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@NewPassword", NewPassword, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PasswordSalt", PasswordSalt, DbType.String, null, null);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@PasswordFormat", PasswordFormat, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_UnlockUser Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipUnlockUser(string ApplicationName, string UserName)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_UnlockUser", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_UpdateUser Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipUpdateUser(string ApplicationName, string UserName, string Email, string Comment, bool? IsApproved, DateTime? LastLoginDate, DateTime? LastActivityDate, int? UniqueEmail, DateTime? CurrentTimeUtc)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_UpdateUser", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Email", Email, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Comment", Comment, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IsApproved", IsApproved, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@LastLoginDate", LastLoginDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@LastActivityDate", LastActivityDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@UniqueEmail", UniqueEmail, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Membership_UpdateUserInfo Procedure
        /// </summary>
        public static StoredProcedure AspnetMembershipUpdateUserInfo(string ApplicationName, string UserName, bool? IsPasswordCorrect, bool? UpdateLastLoginActivityDate, int? MaxInvalidPasswordAttempts, int? PasswordAttemptWindow, DateTime? CurrentTimeUtc, DateTime? LastLoginDate, DateTime? LastActivityDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Membership_UpdateUserInfo", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IsPasswordCorrect", IsPasswordCorrect, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@UpdateLastLoginActivityDate", UpdateLastLoginActivityDate, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@MaxInvalidPasswordAttempts", MaxInvalidPasswordAttempts, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PasswordAttemptWindow", PasswordAttemptWindow, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@LastLoginDate", LastLoginDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@LastActivityDate", LastActivityDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Paths_CreatePath Procedure
        /// </summary>
        public static StoredProcedure AspnetPathsCreatePath(Guid? ApplicationId, string Path, Guid? PathId)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Paths_CreatePath", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationId", ApplicationId, DbType.Guid, null, null);
        	
            sp.Command.AddParameter("@Path", Path, DbType.String, null, null);
        	
            sp.Command.AddOutputParameter("@PathId", DbType.Guid, null, null);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Personalization_GetApplicationId Procedure
        /// </summary>
        public static StoredProcedure AspnetPersonalizationGetApplicationId(string ApplicationName, Guid? ApplicationId)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Personalization_GetApplicationId", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddOutputParameter("@ApplicationId", DbType.Guid, null, null);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_PersonalizationAdministration_DeleteAllState Procedure
        /// </summary>
        public static StoredProcedure AspnetPersonalizationAdministrationDeleteAllState(bool? AllUsersScope, string ApplicationName, int? Count)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_PersonalizationAdministration_DeleteAllState", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@AllUsersScope", AllUsersScope, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddOutputParameter("@Count", DbType.Int32, 0, 10);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_PersonalizationAdministration_FindState Procedure
        /// </summary>
        public static StoredProcedure AspnetPersonalizationAdministrationFindState(bool? AllUsersScope, string ApplicationName, int? PageIndex, int? PageSize, string Path, string UserName, DateTime? InactiveSinceDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_PersonalizationAdministration_FindState", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@AllUsersScope", AllUsersScope, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Path", Path, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@InactiveSinceDate", InactiveSinceDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_PersonalizationAdministration_GetCountOfState Procedure
        /// </summary>
        public static StoredProcedure AspnetPersonalizationAdministrationGetCountOfState(int? Count, bool? AllUsersScope, string ApplicationName, string Path, string UserName, DateTime? InactiveSinceDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_PersonalizationAdministration_GetCountOfState", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddOutputParameter("@Count", DbType.Int32, 0, 10);
            
            sp.Command.AddParameter("@AllUsersScope", AllUsersScope, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Path", Path, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@InactiveSinceDate", InactiveSinceDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_PersonalizationAdministration_ResetSharedState Procedure
        /// </summary>
        public static StoredProcedure AspnetPersonalizationAdministrationResetSharedState(int? Count, string ApplicationName, string Path)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_PersonalizationAdministration_ResetSharedState", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddOutputParameter("@Count", DbType.Int32, 0, 10);
            
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Path", Path, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_PersonalizationAdministration_ResetUserState Procedure
        /// </summary>
        public static StoredProcedure AspnetPersonalizationAdministrationResetUserState(int? Count, string ApplicationName, DateTime? InactiveSinceDate, string UserName, string Path)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_PersonalizationAdministration_ResetUserState", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddOutputParameter("@Count", DbType.Int32, 0, 10);
            
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@InactiveSinceDate", InactiveSinceDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Path", Path, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_PersonalizationAllUsers_GetPageSettings Procedure
        /// </summary>
        public static StoredProcedure AspnetPersonalizationAllUsersGetPageSettings(string ApplicationName, string Path)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_PersonalizationAllUsers_GetPageSettings", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Path", Path, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_PersonalizationAllUsers_ResetPageSettings Procedure
        /// </summary>
        public static StoredProcedure AspnetPersonalizationAllUsersResetPageSettings(string ApplicationName, string Path)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_PersonalizationAllUsers_ResetPageSettings", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Path", Path, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_PersonalizationAllUsers_SetPageSettings Procedure
        /// </summary>
        public static StoredProcedure AspnetPersonalizationAllUsersSetPageSettings(string ApplicationName, string Path, byte[] PageSettings, DateTime? CurrentTimeUtc)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_PersonalizationAllUsers_SetPageSettings", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Path", Path, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PageSettings", PageSettings, DbType.Binary, null, null);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_PersonalizationPerUser_GetPageSettings Procedure
        /// </summary>
        public static StoredProcedure AspnetPersonalizationPerUserGetPageSettings(string ApplicationName, string UserName, string Path, DateTime? CurrentTimeUtc)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_PersonalizationPerUser_GetPageSettings", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Path", Path, DbType.String, null, null);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_PersonalizationPerUser_ResetPageSettings Procedure
        /// </summary>
        public static StoredProcedure AspnetPersonalizationPerUserResetPageSettings(string ApplicationName, string UserName, string Path, DateTime? CurrentTimeUtc)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_PersonalizationPerUser_ResetPageSettings", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Path", Path, DbType.String, null, null);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_PersonalizationPerUser_SetPageSettings Procedure
        /// </summary>
        public static StoredProcedure AspnetPersonalizationPerUserSetPageSettings(string ApplicationName, string UserName, string Path, byte[] PageSettings, DateTime? CurrentTimeUtc)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_PersonalizationPerUser_SetPageSettings", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Path", Path, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PageSettings", PageSettings, DbType.Binary, null, null);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Profile_DeleteInactiveProfiles Procedure
        /// </summary>
        public static StoredProcedure AspnetProfileDeleteInactiveProfiles(string ApplicationName, int? ProfileAuthOptions, DateTime? InactiveSinceDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Profile_DeleteInactiveProfiles", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@ProfileAuthOptions", ProfileAuthOptions, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@InactiveSinceDate", InactiveSinceDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Profile_DeleteProfiles Procedure
        /// </summary>
        public static StoredProcedure AspnetProfileDeleteProfiles(string ApplicationName, string UserNames)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Profile_DeleteProfiles", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserNames", UserNames, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Profile_GetNumberOfInactiveProfiles Procedure
        /// </summary>
        public static StoredProcedure AspnetProfileGetNumberOfInactiveProfiles(string ApplicationName, int? ProfileAuthOptions, DateTime? InactiveSinceDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Profile_GetNumberOfInactiveProfiles", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@ProfileAuthOptions", ProfileAuthOptions, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@InactiveSinceDate", InactiveSinceDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Profile_GetProfiles Procedure
        /// </summary>
        public static StoredProcedure AspnetProfileGetProfiles(string ApplicationName, int? ProfileAuthOptions, int? PageIndex, int? PageSize, string UserNameToMatch, DateTime? InactiveSinceDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Profile_GetProfiles", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@ProfileAuthOptions", ProfileAuthOptions, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@UserNameToMatch", UserNameToMatch, DbType.String, null, null);
        	
            sp.Command.AddParameter("@InactiveSinceDate", InactiveSinceDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Profile_GetProperties Procedure
        /// </summary>
        public static StoredProcedure AspnetProfileGetProperties(string ApplicationName, string UserName, DateTime? CurrentTimeUtc)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Profile_GetProperties", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Profile_SetProperties Procedure
        /// </summary>
        public static StoredProcedure AspnetProfileSetProperties(string ApplicationName, string PropertyNames, string PropertyValuesString, byte[] PropertyValuesBinary, string UserName, bool? IsUserAnonymous, DateTime? CurrentTimeUtc)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Profile_SetProperties", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PropertyNames", PropertyNames, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PropertyValuesString", PropertyValuesString, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PropertyValuesBinary", PropertyValuesBinary, DbType.Binary, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IsUserAnonymous", IsUserAnonymous, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_RegisterSchemaVersion Procedure
        /// </summary>
        public static StoredProcedure AspnetRegisterSchemaVersion(string Feature, string CompatibleSchemaVersion, bool? IsCurrentVersion, bool? RemoveIncompatibleSchema)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_RegisterSchemaVersion", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@Feature", Feature, DbType.String, null, null);
        	
            sp.Command.AddParameter("@CompatibleSchemaVersion", CompatibleSchemaVersion, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IsCurrentVersion", IsCurrentVersion, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@RemoveIncompatibleSchema", RemoveIncompatibleSchema, DbType.Boolean, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Roles_CreateRole Procedure
        /// </summary>
        public static StoredProcedure AspnetRolesCreateRole(string ApplicationName, string RoleName)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Roles_CreateRole", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@RoleName", RoleName, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Roles_DeleteRole Procedure
        /// </summary>
        public static StoredProcedure AspnetRolesDeleteRole(string ApplicationName, string RoleName, bool? DeleteOnlyIfRoleIsEmpty)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Roles_DeleteRole", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@RoleName", RoleName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@DeleteOnlyIfRoleIsEmpty", DeleteOnlyIfRoleIsEmpty, DbType.Boolean, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Roles_GetAllRoles Procedure
        /// </summary>
        public static StoredProcedure AspnetRolesGetAllRoles(string ApplicationName)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Roles_GetAllRoles", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Roles_RoleExists Procedure
        /// </summary>
        public static StoredProcedure AspnetRolesRoleExists(string ApplicationName, string RoleName)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Roles_RoleExists", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@RoleName", RoleName, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Setup_RemoveAllRoleMembers Procedure
        /// </summary>
        public static StoredProcedure AspnetSetupRemoveAllRoleMembers(string name)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Setup_RemoveAllRoleMembers", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@name", name, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Setup_RestorePermissions Procedure
        /// </summary>
        public static StoredProcedure AspnetSetupRestorePermissions(string name)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Setup_RestorePermissions", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@name", name, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_UnRegisterSchemaVersion Procedure
        /// </summary>
        public static StoredProcedure AspnetUnRegisterSchemaVersion(string Feature, string CompatibleSchemaVersion)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_UnRegisterSchemaVersion", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@Feature", Feature, DbType.String, null, null);
        	
            sp.Command.AddParameter("@CompatibleSchemaVersion", CompatibleSchemaVersion, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Users_CreateUser Procedure
        /// </summary>
        public static StoredProcedure AspnetUsersCreateUser(Guid? ApplicationId, string UserName, bool? IsUserAnonymous, DateTime? LastActivityDate, Guid? UserId)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Users_CreateUser", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationId", ApplicationId, DbType.Guid, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IsUserAnonymous", IsUserAnonymous, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@LastActivityDate", LastActivityDate, DbType.DateTime, null, null);
        	
            sp.Command.AddOutputParameter("@UserId", DbType.Guid, null, null);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Users_DeleteUser Procedure
        /// </summary>
        public static StoredProcedure AspnetUsersDeleteUser(string ApplicationName, string UserName, int? TablesToDeleteFrom, int? NumTablesDeletedFrom)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Users_DeleteUser", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@TablesToDeleteFrom", TablesToDeleteFrom, DbType.Int32, 0, 10);
        	
            sp.Command.AddOutputParameter("@NumTablesDeletedFrom", DbType.Int32, 0, 10);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_UsersInRoles_AddUsersToRoles Procedure
        /// </summary>
        public static StoredProcedure AspnetUsersInRolesAddUsersToRoles(string ApplicationName, string UserNames, string RoleNames, DateTime? CurrentTimeUtc)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_UsersInRoles_AddUsersToRoles", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserNames", UserNames, DbType.String, null, null);
        	
            sp.Command.AddParameter("@RoleNames", RoleNames, DbType.String, null, null);
        	
            sp.Command.AddParameter("@CurrentTimeUtc", CurrentTimeUtc, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_UsersInRoles_FindUsersInRole Procedure
        /// </summary>
        public static StoredProcedure AspnetUsersInRolesFindUsersInRole(string ApplicationName, string RoleName, string UserNameToMatch)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_UsersInRoles_FindUsersInRole", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@RoleName", RoleName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserNameToMatch", UserNameToMatch, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_UsersInRoles_GetRolesForUser Procedure
        /// </summary>
        public static StoredProcedure AspnetUsersInRolesGetRolesForUser(string ApplicationName, string UserName)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_UsersInRoles_GetRolesForUser", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_UsersInRoles_GetUsersInRoles Procedure
        /// </summary>
        public static StoredProcedure AspnetUsersInRolesGetUsersInRoles(string ApplicationName, string RoleName)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_UsersInRoles_GetUsersInRoles", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@RoleName", RoleName, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_UsersInRoles_IsUserInRole Procedure
        /// </summary>
        public static StoredProcedure AspnetUsersInRolesIsUserInRole(string ApplicationName, string UserName, string RoleName)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_UsersInRoles_IsUserInRole", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@RoleName", RoleName, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_UsersInRoles_RemoveUsersFromRoles Procedure
        /// </summary>
        public static StoredProcedure AspnetUsersInRolesRemoveUsersFromRoles(string ApplicationName, string UserNames, string RoleNames)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_UsersInRoles_RemoveUsersFromRoles", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserNames", UserNames, DbType.String, null, null);
        	
            sp.Command.AddParameter("@RoleNames", RoleNames, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_WebEvent_LogEvent Procedure
        /// </summary>
        public static StoredProcedure AspnetWebEventLogEvent(string EventId, DateTime? EventTimeUtc, DateTime? EventTime, string EventType, decimal? EventSequence, decimal? EventOccurrence, int? EventCode, int? EventDetailCode, string Message, string ApplicationPath, string ApplicationVirtualPath, string MachineName, string RequestUrl, string ExceptionType, string Details)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_WebEvent_LogEvent", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@EventId", EventId, DbType.AnsiStringFixedLength, null, null);
        	
            sp.Command.AddParameter("@EventTimeUtc", EventTimeUtc, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@EventTime", EventTime, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@EventType", EventType, DbType.String, null, null);
        	
            sp.Command.AddParameter("@EventSequence", EventSequence, DbType.Decimal, 0, 19);
        	
            sp.Command.AddParameter("@EventOccurrence", EventOccurrence, DbType.Decimal, 0, 19);
        	
            sp.Command.AddParameter("@EventCode", EventCode, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@EventDetailCode", EventDetailCode, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Message", Message, DbType.String, null, null);
        	
            sp.Command.AddParameter("@ApplicationPath", ApplicationPath, DbType.String, null, null);
        	
            sp.Command.AddParameter("@ApplicationVirtualPath", ApplicationVirtualPath, DbType.String, null, null);
        	
            sp.Command.AddParameter("@MachineName", MachineName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@RequestUrl", RequestUrl, DbType.String, null, null);
        	
            sp.Command.AddParameter("@ExceptionType", ExceptionType, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Details", Details, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the JobPrintingDetail Procedure
        /// </summary>
        public static StoredProcedure JobPrintingDetail(int? JobID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("JobPrintingDetail", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@JobID", JobID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Report_RemakeReport Procedure
        /// </summary>
        public static StoredProcedure ReportRemakeReport(DateTime? FromDate, DateTime? ToDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Report_RemakeReport", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@FromDate", FromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ToDate", ToDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Report_SalesReport Procedure
        /// </summary>
        public static StoredProcedure ReportSalesReport(int? ProductTypeID, int? SaleID, int? CustomerID, int? Type, int? BaseCurrencyID, DateTime? FromDate, DateTime? ToDate, DateTime? FromDateInvoice, DateTime? ToDateInvoice, int? PageIndex, int? PageSize, string SortColumn, string SortType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Report_SalesReport", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@ProductTypeID", ProductTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@SaleID", SaleID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@CustomerID", CustomerID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Type", Type, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@BaseCurrencyID", BaseCurrencyID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@FromDate", FromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ToDate", ToDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@FromDateInvoice", FromDateInvoice, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ToDateInvoice", ToDateInvoice, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@SortColumn", SortColumn, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@SortType", SortType, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the SearchDeliveryOrderByCustomer Procedure
        /// </summary>
        public static StoredProcedure SearchDeliveryOrderByCustomer(string Customer, string DONumber, string JobNumber, DateTime? FromDate, DateTime? ToDate, int? PageIndex, int? PageSize, string SortColumn, string SortType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("SearchDeliveryOrderByCustomer", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@Customer", Customer, DbType.String, null, null);
        	
            sp.Command.AddParameter("@DONumber", DONumber, DbType.String, null, null);
        	
            sp.Command.AddParameter("@JobNumber", JobNumber, DbType.String, null, null);
        	
            sp.Command.AddParameter("@FromDate", FromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ToDate", ToDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@SortColumn", SortColumn, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@SortType", SortType, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the SearchPurchaseOrderByCustomer Procedure
        /// </summary>
        public static StoredProcedure SearchPurchaseOrderByCustomer(string Customer, string Job, string PurchaseOrder, DateTime? FromDate, DateTime? ToDate, int? PageIndex, int? PageSize, string SortColumn, string SortType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("SearchPurchaseOrderByCustomer", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@Customer", Customer, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Job", Job, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PurchaseOrder", PurchaseOrder, DbType.String, null, null);
        	
            sp.Command.AddParameter("@FromDate", FromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ToDate", ToDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@SortColumn", SortColumn, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@SortType", SortType, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblBacking_SelectAll Procedure
        /// </summary>
        public static StoredProcedure TblBackingSelectAll(string KeyWord, bool? IsObsolete, int? PageIndex, int? PageSize, string SortColumn, string SortType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblBacking_SelectAll", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@KeyWord", KeyWord, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IsObsolete", IsObsolete, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@SortColumn", SortColumn, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@SortType", SortType, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the TblConfirmOrder_SelectAll Procedure
        /// </summary>
        public static StoredProcedure TblConfirmOrderSelectAll(string Customer, string Job, string OCNumber, DateTime? FromDate, DateTime? ToDate, int? PageIndex, int? PageSize, string SortColumn, string SortType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("TblConfirmOrder_SelectAll", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@Customer", Customer, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Job", Job, DbType.String, null, null);
        	
            sp.Command.AddParameter("@OCNumber", OCNumber, DbType.String, null, null);
        	
            sp.Command.AddParameter("@FromDate", FromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ToDate", ToDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@SortColumn", SortColumn, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@SortType", SortType, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblCredit_SelectAll Procedure
        /// </summary>
        public static StoredProcedure TblCreditSelectAll(string CreditNo, string Customer, DateTime? FromDate, DateTime? ToDate, int? PageIndex, int? PageSize, string SortColumn, string SortType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblCredit_SelectAll", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@CreditNo", CreditNo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Customer", Customer, DbType.String, null, null);
        	
            sp.Command.AddParameter("@FromDate", FromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ToDate", ToDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@SortColumn", SortColumn, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@SortType", SortType, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblCurrency_SelectAll Procedure
        /// </summary>
        public static StoredProcedure TblCurrencySelectAll(string KeyWord, bool? IsObsolete, int? PageIndex, int? PageSize, string SortColumn, string SortType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblCurrency_SelectAll", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@KeyWord", KeyWord, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IsObsolete", IsObsolete, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@SortColumn", SortColumn, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@SortType", SortType, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblCurrencyChangegLod_SelectAll Procedure
        /// </summary>
        public static StoredProcedure TblCurrencyChangegLodSelectAll(int? CurrencyID, DateTime? SearchDate, int? PageIndex, int? PageSize, string SortColumn, string SortType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblCurrencyChangegLod_SelectAll", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@CurrencyID", CurrencyID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@SearchDate", SearchDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@SortColumn", SortColumn, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@SortType", SortType, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblCustomer_SelectAll Procedure
        /// </summary>
        public static StoredProcedure TblCustomerSelectAll(string KeyWord, bool? IsObsolete, int? PageIndex, int? PageSize, string SortColumn, string SortType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblCustomer_SelectAll", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@KeyWord", KeyWord, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IsObsolete", IsObsolete, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@SortColumn", SortColumn, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@SortType", SortType, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblCustomer_SelectForReport Procedure
        /// </summary>
        public static StoredProcedure TblCustomerSelectForReport(string KeyWord, bool? IsObsolete, string SortColumn, string SortType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblCustomer_SelectForReport", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@KeyWord", KeyWord, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IsObsolete", IsObsolete, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@SortColumn", SortColumn, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@SortType", SortType, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblCylinder_SelectAll Procedure
        /// </summary>
        public static StoredProcedure TblCylinderSelectAll(int? JobID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblCylinder_SelectAll", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@JobID", JobID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblCylinder_SelectForDeliveryOrder Procedure
        /// </summary>
        public static StoredProcedure TblCylinderSelectForDeliveryOrder(int? JobID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblCylinder_SelectForDeliveryOrder", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@JobID", JobID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblCylinder_SelectForOrderConfirmation Procedure
        /// </summary>
        public static StoredProcedure TblCylinderSelectForOrderConfirmation(int? JobID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblCylinder_SelectForOrderConfirmation", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@JobID", JobID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblCylinderStatus_SelectAll Procedure
        /// </summary>
        public static StoredProcedure TblCylinderStatusSelectAll(string KeyWord, bool? IsObsolete, int? PageIndex, int? PageSize, string SortColumn, string SortType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblCylinderStatus_SelectAll", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@KeyWord", KeyWord, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IsObsolete", IsObsolete, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@SortColumn", SortColumn, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@SortType", SortType, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblDebit_SelectAll Procedure
        /// </summary>
        public static StoredProcedure TblDebitSelectAll(string DebitNo, string Customer, DateTime? FromDate, DateTime? ToDate, int? PageIndex, int? PageSize, string SortColumn, string SortType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblDebit_SelectAll", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@DebitNo", DebitNo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Customer", Customer, DbType.String, null, null);
        	
            sp.Command.AddParameter("@FromDate", FromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ToDate", ToDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@SortColumn", SortColumn, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@SortType", SortType, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblDelivery_SelectSummaryForPrint Procedure
        /// </summary>
        public static StoredProcedure TblDeliverySelectSummaryForPrint(int? JobID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblDelivery_SelectSummaryForPrint", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@JobID", JobID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblDepartment_SelectAll Procedure
        /// </summary>
        public static StoredProcedure TblDepartmentSelectAll(string KeyWord, bool? IsObsolete, int? PageIndex, int? PageSize, string SortColumn, string SortType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblDepartment_SelectAll", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@KeyWord", KeyWord, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IsObsolete", IsObsolete, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@SortColumn", SortColumn, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@SortType", SortType, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblEngravingDetail_SelectAll Procedure
        /// </summary>
        public static StoredProcedure TblEngravingDetailSelectAll(int? JobID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblEngravingDetail_SelectAll", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@JobID", JobID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblEngravingDetail_SelectAllForPrint Procedure
        /// </summary>
        public static StoredProcedure TblEngravingDetailSelectAllForPrint(int? JobID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblEngravingDetail_SelectAllForPrint", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@JobID", JobID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblEngravingEtching_SelectAll Procedure
        /// </summary>
        public static StoredProcedure TblEngravingEtchingSelectAll(int? JobID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblEngravingEtching_SelectAll", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@JobID", JobID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblEngravingEtching_SelectAllForPrint Procedure
        /// </summary>
        public static StoredProcedure TblEngravingEtchingSelectAllForPrint(int? JobID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblEngravingEtching_SelectAllForPrint", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@JobID", JobID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblEngravingTobacco_SelectAll Procedure
        /// </summary>
        public static StoredProcedure TblEngravingTobaccoSelectAll(int? JobID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblEngravingTobacco_SelectAll", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@JobID", JobID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblEngravingTobacco_SelectAllForPrint Procedure
        /// </summary>
        public static StoredProcedure TblEngravingTobaccoSelectAllForPrint(int? JobID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblEngravingTobacco_SelectAllForPrint", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@JobID", JobID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblEtchingDetail_SelectAll Procedure
        /// </summary>
        public static StoredProcedure TblEtchingDetailSelectAll(int? JobID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblEtchingDetail_SelectAll", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@JobID", JobID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblInvocie_SelectSummary Procedure
        /// </summary>
        public static StoredProcedure TblInvocieSelectSummary(int? InvoiceID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblInvocie_SelectSummary", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@InvoiceID", InvoiceID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the TblInvoice_SelectAll Procedure
        /// </summary>
        public static StoredProcedure TblInvoiceSelectAll(string Customer, string InvoiceNo, string Job, DateTime? FromDate, DateTime? ToDate, int? PageIndex, int? PageSize, string SortColumn, string SortType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("TblInvoice_SelectAll", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@Customer", Customer, DbType.String, null, null);
        	
            sp.Command.AddParameter("@InvoiceNo", InvoiceNo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Job", Job, DbType.String, null, null);
        	
            sp.Command.AddParameter("@FromDate", FromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ToDate", ToDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@SortColumn", SortColumn, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@SortType", SortType, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblInvoice_SelectDetailForExport Procedure
        /// </summary>
        public static StoredProcedure TblInvoiceSelectDetailForExport(string InvoiceID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblInvoice_SelectDetailForExport", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@InvoiceID", InvoiceID, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblInvoice_SelectForExport Procedure
        /// </summary>
        public static StoredProcedure TblInvoiceSelectForExport(string InvoiceID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblInvoice_SelectForExport", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@InvoiceID", InvoiceID, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblInvoice_SelectJobOtherCharges Procedure
        /// </summary>
        public static StoredProcedure TblInvoiceSelectJobOtherCharges(int? JobID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblInvoice_SelectJobOtherCharges", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@JobID", JobID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblInvoice_SelectJobSummary Procedure
        /// </summary>
        public static StoredProcedure TblInvoiceSelectJobSummary(int? JobID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblInvoice_SelectJobSummary", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@JobID", JobID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblJob_CreateJobBarcode Procedure
        /// </summary>
        public static StoredProcedure TblJobCreateJobBarcode(string NewBarcode)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblJob_CreateJobBarcode", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddOutputParameter("@NewBarcode", DbType.String, null, null);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblJob_ProgressForDeReChrome Procedure
        /// </summary>
        public static StoredProcedure TblJobProgressForDeReChrome(DateTime? DeliveryBegin, DateTime? DeliveryEnd, DateTime? DeReDateBegin, DateTime? DeReDateEnd, DateTime? CylinderDateBegin, DateTime? CylinderDateEnd, int? PageIndex, int? PageSize, string SortColumn, string SortType, string JobNumber, string Customer)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblJob_ProgressForDeReChrome", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@DeliveryBegin", DeliveryBegin, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@DeliveryEnd", DeliveryEnd, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@DeReDateBegin", DeReDateBegin, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@DeReDateEnd", DeReDateEnd, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@CylinderDateBegin", CylinderDateBegin, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@CylinderDateEnd", CylinderDateEnd, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@SortColumn", SortColumn, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@SortType", SortType, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@JobNumber", JobNumber, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Customer", Customer, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblJob_ProgressForEngraving Procedure
        /// </summary>
        public static StoredProcedure TblJobProgressForEngraving(DateTime? DeliveryBegin, DateTime? DeliveryEnd, DateTime? EngravingBegin, DateTime? EngravingEnd, int? ReproStatusID, int? PageIndex, int? PageSize, string SortColumn, string SortType, string JobNumber, string Customer)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblJob_ProgressForEngraving", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@DeliveryBegin", DeliveryBegin, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@DeliveryEnd", DeliveryEnd, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@EngravingBegin", EngravingBegin, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@EngravingEnd", EngravingEnd, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ReproStatusID", ReproStatusID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@SortColumn", SortColumn, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@SortType", SortType, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@JobNumber", JobNumber, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Customer", Customer, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblJob_ProgressForRepro Procedure
        /// </summary>
        public static StoredProcedure TblJobProgressForRepro(DateTime? OrderDateBegin, DateTime? OrderDateEnd, DateTime? ProofBegin, DateTime? ProofEnd, DateTime? ReproDateBegin, DateTime? ReproDateEnd, DateTime? CylinderDateBegin, DateTime? CylinderDateEnd, int? ReproStatusID, int? PageIndex, int? PageSize, string SortColumn, string SortType, string JobNumber, string Customer)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblJob_ProgressForRepro", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@OrderDateBegin", OrderDateBegin, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@OrderDateEnd", OrderDateEnd, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ProofBegin", ProofBegin, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ProofEnd", ProofEnd, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ReproDateBegin", ReproDateBegin, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ReproDateEnd", ReproDateEnd, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@CylinderDateBegin", CylinderDateBegin, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@CylinderDateEnd", CylinderDateEnd, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ReproStatusID", ReproStatusID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@SortColumn", SortColumn, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@SortType", SortType, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@JobNumber", JobNumber, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Customer", Customer, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblJob_SelectAll Procedure
        /// </summary>
        public static StoredProcedure TblJobSelectAll(string Customer, string JobBarcode, string JobNumber, string JobInfo, string CusCylID, int? SaleRepID, DateTime? FromDate, DateTime? ToDate, int? HasOC, int? HasDO, int? HasInvoice, bool? IsServiceJob, int? PageIndex, int? PageSize, string SortColumn, string SortType, string Status)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblJob_SelectAll", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@Customer", Customer, DbType.String, null, null);
        	
            sp.Command.AddParameter("@JobBarcode", JobBarcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@JobNumber", JobNumber, DbType.String, null, null);
        	
            sp.Command.AddParameter("@JobInfo", JobInfo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@CusCylID", CusCylID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@SaleRepID", SaleRepID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@FromDate", FromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ToDate", ToDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@HasOC", HasOC, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@HasDO", HasDO, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@HasInvoice", HasInvoice, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@IsServiceJob", IsServiceJob, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@SortColumn", SortColumn, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@SortType", SortType, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Status", Status, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblJob_SelectForReport Procedure
        /// </summary>
        public static StoredProcedure TblJobSelectForReport(string Customer, string JobBarcode, string JobNumber, string JobInfo, int? SaleRepID, DateTime? FromDate, DateTime? ToDate, int? PageIndex, int? PageSize, string SortColumn, string SortType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblJob_SelectForReport", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@Customer", Customer, DbType.String, null, null);
        	
            sp.Command.AddParameter("@JobBarcode", JobBarcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@JobNumber", JobNumber, DbType.String, null, null);
        	
            sp.Command.AddParameter("@JobInfo", JobInfo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@SaleRepID", SaleRepID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@FromDate", FromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ToDate", ToDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@SortColumn", SortColumn, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@SortType", SortType, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblJob_SelectRevisionHistory Procedure
        /// </summary>
        public static StoredProcedure TblJobSelectRevisionHistory(int? JobID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblJob_SelectRevisionHistory", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@JobID", JobID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblPricing_SelectAll Procedure
        /// </summary>
        public static StoredProcedure TblPricingSelectAll(string KeyWord, bool? IsObsolete, int? PageIndex, int? PageSize, string SortColumn, string SortType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblPricing_SelectAll", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@KeyWord", KeyWord, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IsObsolete", IsObsolete, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@SortColumn", SortColumn, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@SortType", SortType, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblProductionSchedule_DeReChrome Procedure
        /// </summary>
        public static StoredProcedure TblProductionScheduleDeReChrome(DateTime? DeliveryBegin, DateTime? DeliveryEnd, DateTime? DeReBegin, DateTime? DeReEnd)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblProductionSchedule_DeReChrome", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@DeliveryBegin", DeliveryBegin, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@DeliveryEnd", DeliveryEnd, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@DeReBegin", DeReBegin, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@DeReEnd", DeReEnd, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblProductionSchedule_Embossing Procedure
        /// </summary>
        public static StoredProcedure TblProductionScheduleEmbossing(DateTime? DeliveryBegin, DateTime? DeliveryEnd, DateTime? EngravingBegin, DateTime? EngravingEnd, int? ReproStatusID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblProductionSchedule_Embossing", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@DeliveryBegin", DeliveryBegin, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@DeliveryEnd", DeliveryEnd, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@EngravingBegin", EngravingBegin, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@EngravingEnd", EngravingEnd, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ReproStatusID", ReproStatusID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblProductionSchedule_Engraving Procedure
        /// </summary>
        public static StoredProcedure TblProductionScheduleEngraving(DateTime? DeliveryBegin, DateTime? DeliveryEnd, DateTime? EngravingBegin, DateTime? EngravingEnd, int? ReproStatusID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblProductionSchedule_Engraving", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@DeliveryBegin", DeliveryBegin, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@DeliveryEnd", DeliveryEnd, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@EngravingBegin", EngravingBegin, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@EngravingEnd", EngravingEnd, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ReproStatusID", ReproStatusID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblProgressCylinderStatus_SelectAll Procedure
        /// </summary>
        public static StoredProcedure TblProgressCylinderStatusSelectAll(string KeyWord, bool? IsObsolete, int? PageIndex, int? PageSize, string SortColumn, string SortType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblProgressCylinderStatus_SelectAll", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@KeyWord", KeyWord, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IsObsolete", IsObsolete, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@SortColumn", SortColumn, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@SortType", SortType, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblReference_SelectAll Procedure
        /// </summary>
        public static StoredProcedure TblReferenceSelectAll(string KeyWord, short? Type, short? IsObsolete, int? PageIndex, int? PageSize, string SortColumn, string SortType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblReference_SelectAll", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@KeyWord", KeyWord, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Type", Type, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@IsObsolete", IsObsolete, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@SortColumn", SortColumn, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@SortType", SortType, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblReproStatus_SelectAll Procedure
        /// </summary>
        public static StoredProcedure TblReproStatusSelectAll(string KeyWord, bool? IsObsolete, int? PageIndex, int? PageSize, string SortColumn, string SortType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblReproStatus_SelectAll", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@KeyWord", KeyWord, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IsObsolete", IsObsolete, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@SortColumn", SortColumn, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@SortType", SortType, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblRole_SelectAll Procedure
        /// </summary>
        public static StoredProcedure TblRoleSelectAll(string KeyWord, bool? IsActive, int? PageIndex, int? PageSize, string SortColumn, string SortType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblRole_SelectAll", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@KeyWord", KeyWord, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IsActive", IsActive, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@SortColumn", SortColumn, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@SortType", SortType, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblRolePermissions_SelectByRoleID Procedure
        /// </summary>
        public static StoredProcedure TblRolePermissionsSelectByRoleID(int? RoleID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblRolePermissions_SelectByRoleID", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@RoleID", RoleID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblStaff_SelectAll Procedure
        /// </summary>
        public static StoredProcedure TblStaffSelectAll(string KeyWord, bool? IsObsolete, short? DepartmentID, int? PageIndex, int? PageSize, string SortColumn, string SortType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblStaff_SelectAll", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@KeyWord", KeyWord, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IsObsolete", IsObsolete, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@DepartmentID", DepartmentID, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@SortColumn", SortColumn, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@SortType", SortType, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblSupplier_SelectAll Procedure
        /// </summary>
        public static StoredProcedure TblSupplierSelectAll(string KeyWord, bool? IsObsolete, int? PageIndex, int? PageSize, string SortColumn, string SortType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblSupplier_SelectAll", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@KeyWord", KeyWord, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IsObsolete", IsObsolete, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@SortColumn", SortColumn, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@SortType", SortType, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblSupply_SelectAll Procedure
        /// </summary>
        public static StoredProcedure TblSupplySelectAll(string KeyWord, bool? IsObsolete, int? PageIndex, int? PageSize, string SortColumn, string SortType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblSupply_SelectAll", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@KeyWord", KeyWord, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IsObsolete", IsObsolete, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@SortColumn", SortColumn, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@SortType", SortType, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the tblTax_SelectAll Procedure
        /// </summary>
        public static StoredProcedure TblTaxSelectAll(string KeyWord, bool? IsObsolete, int? PageIndex, int? PageSize, string SortColumn, string SortType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("tblTax_SelectAll", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@KeyWord", KeyWord, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IsObsolete", IsObsolete, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@SortColumn", SortColumn, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@SortType", SortType, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
    }
    
}
