using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
    /// <summary>
    /// Controller class for tblEngraving
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TblEngravingController
    {
        // Preload our schema..
        TblEngraving thisSchemaLoad = new TblEngraving();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TblEngravingCollection FetchAll()
        {
            TblEngravingCollection coll = new TblEngravingCollection();
            Query qry = new Query(TblEngraving.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblEngravingCollection FetchByID(object JobID)
        {
            TblEngravingCollection coll = new TblEngravingCollection().Where("JobID", JobID).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblEngravingCollection FetchByQuery(Query qry)
        {
            TblEngravingCollection coll = new TblEngravingCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object JobID)
        {
            return (TblEngraving.Delete(JobID) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object JobID)
        {
            return (TblEngraving.Destroy(JobID) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(int JobID,double? EngravingStart,string JobCoOrd,byte? EngravingOnNut,byte? EngravingOnBoader,string ChromeThickness,string Roughness,string LaserStart,string LaserOperator,string FinalControl,string CreatedBy,DateTime? CreatedOn,string ModifiedBy,DateTime? ModifiedOn,double? FileSizeHEMG,double? FileSizeVEMG,double? FileSizeHDLS,double? FileSizeVDLS,double? FileSizeHEtching,double? FileSizeVEtching,string SRRemarkEMG,string SRRemarkDLS,string SRRemarkEtching,string TobaccoType,double? EngravingWidth,double? EngrStartEtching,double? EngrWidthEtching,string JobTicket)
	    {
		    TblEngraving item = new TblEngraving();
		    
            item.JobID = JobID;
            
            item.EngravingStart = EngravingStart;
            
            item.JobCoOrd = JobCoOrd;
            
            item.EngravingOnNut = EngravingOnNut;
            
            item.EngravingOnBoader = EngravingOnBoader;
            
            item.ChromeThickness = ChromeThickness;
            
            item.Roughness = Roughness;
            
            item.LaserStart = LaserStart;
            
            item.LaserOperator = LaserOperator;
            
            item.FinalControl = FinalControl;
            
            item.CreatedBy = CreatedBy;
            
            item.CreatedOn = CreatedOn;
            
            item.ModifiedBy = ModifiedBy;
            
            item.ModifiedOn = ModifiedOn;
            
            item.FileSizeHEMG = FileSizeHEMG;
            
            item.FileSizeVEMG = FileSizeVEMG;
            
            item.FileSizeHDLS = FileSizeHDLS;
            
            item.FileSizeVDLS = FileSizeVDLS;
            
            item.FileSizeHEtching = FileSizeHEtching;
            
            item.FileSizeVEtching = FileSizeVEtching;
            
            item.SRRemarkEMG = SRRemarkEMG;
            
            item.SRRemarkDLS = SRRemarkDLS;
            
            item.SRRemarkEtching = SRRemarkEtching;
            
            item.TobaccoType = TobaccoType;
            
            item.EngravingWidth = EngravingWidth;
            
            item.EngrStartEtching = EngrStartEtching;
            
            item.EngrWidthEtching = EngrWidthEtching;
            
            item.JobTicket = JobTicket;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int JobID,double? EngravingStart,string JobCoOrd,byte? EngravingOnNut,byte? EngravingOnBoader,string ChromeThickness,string Roughness,string LaserStart,string LaserOperator,string FinalControl,string CreatedBy,DateTime? CreatedOn,string ModifiedBy,DateTime? ModifiedOn,double? FileSizeHEMG,double? FileSizeVEMG,double? FileSizeHDLS,double? FileSizeVDLS,double? FileSizeHEtching,double? FileSizeVEtching,string SRRemarkEMG,string SRRemarkDLS,string SRRemarkEtching,string TobaccoType,double? EngravingWidth,double? EngrStartEtching,double? EngrWidthEtching,string JobTicket)
	    {
		    TblEngraving item = new TblEngraving();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.JobID = JobID;
				
			item.EngravingStart = EngravingStart;
				
			item.JobCoOrd = JobCoOrd;
				
			item.EngravingOnNut = EngravingOnNut;
				
			item.EngravingOnBoader = EngravingOnBoader;
				
			item.ChromeThickness = ChromeThickness;
				
			item.Roughness = Roughness;
				
			item.LaserStart = LaserStart;
				
			item.LaserOperator = LaserOperator;
				
			item.FinalControl = FinalControl;
				
			item.CreatedBy = CreatedBy;
				
			item.CreatedOn = CreatedOn;
				
			item.ModifiedBy = ModifiedBy;
				
			item.ModifiedOn = ModifiedOn;
				
			item.FileSizeHEMG = FileSizeHEMG;
				
			item.FileSizeVEMG = FileSizeVEMG;
				
			item.FileSizeHDLS = FileSizeHDLS;
				
			item.FileSizeVDLS = FileSizeVDLS;
				
			item.FileSizeHEtching = FileSizeHEtching;
				
			item.FileSizeVEtching = FileSizeVEtching;
				
			item.SRRemarkEMG = SRRemarkEMG;
				
			item.SRRemarkDLS = SRRemarkDLS;
				
			item.SRRemarkEtching = SRRemarkEtching;
				
			item.TobaccoType = TobaccoType;
				
			item.EngravingWidth = EngravingWidth;
				
			item.EngrStartEtching = EngrStartEtching;
				
			item.EngrWidthEtching = EngrWidthEtching;
				
			item.JobTicket = JobTicket;
				
	        item.Save(UserName);
	    }
    }
}
