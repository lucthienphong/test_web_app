using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetSoft.APEM.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblCustomerQuotationDetail class.
	/// </summary>
    [Serializable]
	public partial class TblCustomerQuotationDetailCollection : ActiveList<TblCustomerQuotationDetail, TblCustomerQuotationDetailCollection>
	{	   
		public TblCustomerQuotationDetailCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblCustomerQuotationDetailCollection</returns>
		public TblCustomerQuotationDetailCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblCustomerQuotationDetail o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblCustomerQuotationDetail table.
	/// </summary>
	[Serializable]
	public partial class TblCustomerQuotationDetail : ActiveRecord<TblCustomerQuotationDetail>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblCustomerQuotationDetail()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblCustomerQuotationDetail(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblCustomerQuotationDetail(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblCustomerQuotationDetail(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblCustomerQuotationDetail", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarCustomerId = new TableSchema.TableColumn(schema);
				colvarCustomerId.ColumnName = "CustomerId";
				colvarCustomerId.DataType = DbType.Int32;
				colvarCustomerId.MaxLength = 0;
				colvarCustomerId.AutoIncrement = false;
				colvarCustomerId.IsNullable = false;
				colvarCustomerId.IsPrimaryKey = false;
				colvarCustomerId.IsForeignKey = false;
				colvarCustomerId.IsReadOnly = false;
				colvarCustomerId.DefaultSetting = @"";
				colvarCustomerId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerId);
				
				TableSchema.TableColumn colvarProductTypeID = new TableSchema.TableColumn(schema);
				colvarProductTypeID.ColumnName = "ProductTypeID";
				colvarProductTypeID.DataType = DbType.Int32;
				colvarProductTypeID.MaxLength = 0;
				colvarProductTypeID.AutoIncrement = false;
				colvarProductTypeID.IsNullable = false;
				colvarProductTypeID.IsPrimaryKey = false;
				colvarProductTypeID.IsForeignKey = false;
				colvarProductTypeID.IsReadOnly = false;
				colvarProductTypeID.DefaultSetting = @"";
				colvarProductTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductTypeID);
				
				TableSchema.TableColumn colvarProcessTypeID = new TableSchema.TableColumn(schema);
				colvarProcessTypeID.ColumnName = "ProcessTypeID";
				colvarProcessTypeID.DataType = DbType.Int32;
				colvarProcessTypeID.MaxLength = 0;
				colvarProcessTypeID.AutoIncrement = false;
				colvarProcessTypeID.IsNullable = false;
				colvarProcessTypeID.IsPrimaryKey = false;
				colvarProcessTypeID.IsForeignKey = false;
				colvarProcessTypeID.IsReadOnly = false;
				colvarProcessTypeID.DefaultSetting = @"";
				colvarProcessTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProcessTypeID);
				
				TableSchema.TableColumn colvarCurrencyID = new TableSchema.TableColumn(schema);
				colvarCurrencyID.ColumnName = "CurrencyID";
				colvarCurrencyID.DataType = DbType.Int16;
				colvarCurrencyID.MaxLength = 0;
				colvarCurrencyID.AutoIncrement = false;
				colvarCurrencyID.IsNullable = false;
				colvarCurrencyID.IsPrimaryKey = false;
				colvarCurrencyID.IsForeignKey = false;
				colvarCurrencyID.IsReadOnly = false;
				colvarCurrencyID.DefaultSetting = @"";
				colvarCurrencyID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrencyID);
				
				TableSchema.TableColumn colvarPricingName = new TableSchema.TableColumn(schema);
				colvarPricingName.ColumnName = "PricingName";
				colvarPricingName.DataType = DbType.String;
				colvarPricingName.MaxLength = 100;
				colvarPricingName.AutoIncrement = false;
				colvarPricingName.IsNullable = false;
				colvarPricingName.IsPrimaryKey = false;
				colvarPricingName.IsForeignKey = false;
				colvarPricingName.IsReadOnly = false;
				colvarPricingName.DefaultSetting = @"";
				colvarPricingName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPricingName);
				
				TableSchema.TableColumn colvarGLCode = new TableSchema.TableColumn(schema);
				colvarGLCode.ColumnName = "GLCode";
				colvarGLCode.DataType = DbType.AnsiString;
				colvarGLCode.MaxLength = 10;
				colvarGLCode.AutoIncrement = false;
				colvarGLCode.IsNullable = false;
				colvarGLCode.IsPrimaryKey = false;
				colvarGLCode.IsForeignKey = false;
				colvarGLCode.IsReadOnly = false;
				colvarGLCode.DefaultSetting = @"";
				colvarGLCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGLCode);
				
				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.String;
				colvarDescription.MaxLength = 200;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);
				
				TableSchema.TableColumn colvarOldSteelBase = new TableSchema.TableColumn(schema);
				colvarOldSteelBase.ColumnName = "OldSteelBase";
				colvarOldSteelBase.DataType = DbType.Decimal;
				colvarOldSteelBase.MaxLength = 0;
				colvarOldSteelBase.AutoIncrement = false;
				colvarOldSteelBase.IsNullable = false;
				colvarOldSteelBase.IsPrimaryKey = false;
				colvarOldSteelBase.IsForeignKey = false;
				colvarOldSteelBase.IsReadOnly = false;
				colvarOldSteelBase.DefaultSetting = @"";
				colvarOldSteelBase.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOldSteelBase);
				
				TableSchema.TableColumn colvarNewSteelBase = new TableSchema.TableColumn(schema);
				colvarNewSteelBase.ColumnName = "NewSteelBase";
				colvarNewSteelBase.DataType = DbType.Decimal;
				colvarNewSteelBase.MaxLength = 0;
				colvarNewSteelBase.AutoIncrement = false;
				colvarNewSteelBase.IsNullable = false;
				colvarNewSteelBase.IsPrimaryKey = false;
				colvarNewSteelBase.IsForeignKey = false;
				colvarNewSteelBase.IsReadOnly = false;
				colvarNewSteelBase.DefaultSetting = @"";
				colvarNewSteelBase.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNewSteelBase);
				
				TableSchema.TableColumn colvarUnitOfMeasure = new TableSchema.TableColumn(schema);
				colvarUnitOfMeasure.ColumnName = "UnitOfMeasure";
				colvarUnitOfMeasure.DataType = DbType.AnsiString;
				colvarUnitOfMeasure.MaxLength = 50;
				colvarUnitOfMeasure.AutoIncrement = false;
				colvarUnitOfMeasure.IsNullable = false;
				colvarUnitOfMeasure.IsPrimaryKey = false;
				colvarUnitOfMeasure.IsForeignKey = false;
				colvarUnitOfMeasure.IsReadOnly = false;
				colvarUnitOfMeasure.DefaultSetting = @"";
				colvarUnitOfMeasure.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnitOfMeasure);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("tblCustomerQuotationDetail",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("CustomerId")]
		[Bindable(true)]
		public int CustomerId 
		{
			get { return GetColumnValue<int>(Columns.CustomerId); }
			set { SetColumnValue(Columns.CustomerId, value); }
		}
		  
		[XmlAttribute("ProductTypeID")]
		[Bindable(true)]
		public int ProductTypeID 
		{
			get { return GetColumnValue<int>(Columns.ProductTypeID); }
			set { SetColumnValue(Columns.ProductTypeID, value); }
		}
		  
		[XmlAttribute("ProcessTypeID")]
		[Bindable(true)]
		public int ProcessTypeID 
		{
			get { return GetColumnValue<int>(Columns.ProcessTypeID); }
			set { SetColumnValue(Columns.ProcessTypeID, value); }
		}
		  
		[XmlAttribute("CurrencyID")]
		[Bindable(true)]
		public short CurrencyID 
		{
			get { return GetColumnValue<short>(Columns.CurrencyID); }
			set { SetColumnValue(Columns.CurrencyID, value); }
		}
		  
		[XmlAttribute("PricingName")]
		[Bindable(true)]
		public string PricingName 
		{
			get { return GetColumnValue<string>(Columns.PricingName); }
			set { SetColumnValue(Columns.PricingName, value); }
		}
		  
		[XmlAttribute("GLCode")]
		[Bindable(true)]
		public string GLCode 
		{
			get { return GetColumnValue<string>(Columns.GLCode); }
			set { SetColumnValue(Columns.GLCode, value); }
		}
		  
		[XmlAttribute("Description")]
		[Bindable(true)]
		public string Description 
		{
			get { return GetColumnValue<string>(Columns.Description); }
			set { SetColumnValue(Columns.Description, value); }
		}
		  
		[XmlAttribute("OldSteelBase")]
		[Bindable(true)]
		public decimal OldSteelBase 
		{
			get { return GetColumnValue<decimal>(Columns.OldSteelBase); }
			set { SetColumnValue(Columns.OldSteelBase, value); }
		}
		  
		[XmlAttribute("NewSteelBase")]
		[Bindable(true)]
		public decimal NewSteelBase 
		{
			get { return GetColumnValue<decimal>(Columns.NewSteelBase); }
			set { SetColumnValue(Columns.NewSteelBase, value); }
		}
		  
		[XmlAttribute("UnitOfMeasure")]
		[Bindable(true)]
		public string UnitOfMeasure 
		{
			get { return GetColumnValue<string>(Columns.UnitOfMeasure); }
			set { SetColumnValue(Columns.UnitOfMeasure, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varCustomerId,int varProductTypeID,int varProcessTypeID,short varCurrencyID,string varPricingName,string varGLCode,string varDescription,decimal varOldSteelBase,decimal varNewSteelBase,string varUnitOfMeasure)
		{
			TblCustomerQuotationDetail item = new TblCustomerQuotationDetail();
			
			item.CustomerId = varCustomerId;
			
			item.ProductTypeID = varProductTypeID;
			
			item.ProcessTypeID = varProcessTypeID;
			
			item.CurrencyID = varCurrencyID;
			
			item.PricingName = varPricingName;
			
			item.GLCode = varGLCode;
			
			item.Description = varDescription;
			
			item.OldSteelBase = varOldSteelBase;
			
			item.NewSteelBase = varNewSteelBase;
			
			item.UnitOfMeasure = varUnitOfMeasure;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,int varCustomerId,int varProductTypeID,int varProcessTypeID,short varCurrencyID,string varPricingName,string varGLCode,string varDescription,decimal varOldSteelBase,decimal varNewSteelBase,string varUnitOfMeasure)
		{
			TblCustomerQuotationDetail item = new TblCustomerQuotationDetail();
			
				item.Id = varId;
			
				item.CustomerId = varCustomerId;
			
				item.ProductTypeID = varProductTypeID;
			
				item.ProcessTypeID = varProcessTypeID;
			
				item.CurrencyID = varCurrencyID;
			
				item.PricingName = varPricingName;
			
				item.GLCode = varGLCode;
			
				item.Description = varDescription;
			
				item.OldSteelBase = varOldSteelBase;
			
				item.NewSteelBase = varNewSteelBase;
			
				item.UnitOfMeasure = varUnitOfMeasure;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomerIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ProductTypeIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ProcessTypeIDColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CurrencyIDColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn PricingNameColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn GLCodeColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn OldSteelBaseColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn NewSteelBaseColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn UnitOfMeasureColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string CustomerId = @"CustomerId";
			 public static string ProductTypeID = @"ProductTypeID";
			 public static string ProcessTypeID = @"ProcessTypeID";
			 public static string CurrencyID = @"CurrencyID";
			 public static string PricingName = @"PricingName";
			 public static string GLCode = @"GLCode";
			 public static string Description = @"Description";
			 public static string OldSteelBase = @"OldSteelBase";
			 public static string NewSteelBase = @"NewSteelBase";
			 public static string UnitOfMeasure = @"UnitOfMeasure";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
